<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C" filename="src.c"><comment type="block">"/* ssl/d1_both.c */"</comment>
<comment type="block">"/* 
 * DTLS implementation written by Nagendra Modadugu
 * (nagendra@cs.stanford.edu) for the OpenSSL project 2005.  
 */"</comment>
<comment type="block">"/* ====================================================================
 * Copyright (c) 1998-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    \"This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\"
 *
 * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called \"OpenSSL\"
 *    nor may \"OpenSSL\" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    \"This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */"</comment>
<comment type="block">"/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    \"This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)\"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    \"This product includes software written by Tim Hudson (tjh@cryptsoft.com)\"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */"</comment>

<cpp:include>"#"<cpp:directive>"include"</cpp:directive> <cpp:file>"&lt;limits.h&gt;"</cpp:file></cpp:include>
<cpp:include>"#"<cpp:directive>"include"</cpp:directive> <cpp:file>"&lt;string.h&gt;"</cpp:file></cpp:include>
<cpp:include>"#"<cpp:directive>"include"</cpp:directive> <cpp:file>"&lt;stdio.h&gt;"</cpp:file></cpp:include>
<cpp:include>"#"<cpp:directive>"include"</cpp:directive> <cpp:file>"\"ssl_locl.h\""</cpp:file></cpp:include>
<cpp:include>"#"<cpp:directive>"include"</cpp:directive> <cpp:file>"&lt;openssl/buffer.h&gt;"</cpp:file></cpp:include>
<cpp:include>"#"<cpp:directive>"include"</cpp:directive> <cpp:file>"&lt;openssl/rand.h&gt;"</cpp:file></cpp:include>
<cpp:include>"#"<cpp:directive>"include"</cpp:directive> <cpp:file>"&lt;openssl/objects.h&gt;"</cpp:file></cpp:include>
<cpp:include>"#"<cpp:directive>"include"</cpp:directive> <cpp:file>"&lt;openssl/evp.h&gt;"</cpp:file></cpp:include>
<cpp:include>"#"<cpp:directive>"include"</cpp:directive> <cpp:file>"&lt;openssl/x509.h&gt;"</cpp:file></cpp:include>

<cpp:define>"#"<cpp:directive>"define"</cpp:directive> <cpp:macro><name>"RSMBLY_BITMASK_SIZE"</name><parameter_list>"("<parameter><type><name>"msg_len"</name></type></parameter>")"</parameter_list></cpp:macro> <cpp:value>"(((msg_len) + 7) / 8)"</cpp:value></cpp:define>

<cpp:define>"#"<cpp:directive>"define"</cpp:directive> <cpp:macro><name>"RSMBLY_BITMASK_MARK"</name><parameter_list>"("<parameter><type><name>"bitmask"</name></type></parameter>"," <parameter><type><name>"start"</name></type></parameter>"," <parameter><type><name>"end"</name></type></parameter>")"</parameter_list></cpp:macro> <cpp:value>"{ \\
                        if ((end) - (start) &lt;= 8) { \\
                                long ii; \\
                                for (ii = (start); ii &lt; (end); ii++) bitmask[((ii) &gt;&gt; 3)] |= (1 &lt;&lt; ((ii) &amp; 7)); \\
                        } else { \\
                                long ii; \\
                                bitmask[((start) &gt;&gt; 3)] |= bitmask_start_values[((start) &amp; 7)]; \\
                                for (ii = (((start) &gt;&gt; 3) + 1); ii &lt; ((((end) - 1)) &gt;&gt; 3); ii++) bitmask[ii] = 0xff; \\
                                bitmask[(((end) - 1) &gt;&gt; 3)] |= bitmask_end_values[((end) &amp; 7)]; \\
                        } }"</cpp:value></cpp:define>

<cpp:define>"#"<cpp:directive>"define"</cpp:directive> <cpp:macro><name>"RSMBLY_BITMASK_IS_COMPLETE"</name><parameter_list>"("<parameter><type><name>"bitmask"</name></type></parameter>"," <parameter><type><name>"msg_len"</name></type></parameter>"," <parameter><type><name>"is_complete"</name></type></parameter>")"</parameter_list></cpp:macro> <cpp:value>"{ \\
                        long ii; \\
                        OPENSSL_assert((msg_len) &gt; 0); \\
                        is_complete = 1; \\
                        if (bitmask[(((msg_len) - 1) &gt;&gt; 3)] != bitmask_end_values[((msg_len) &amp; 7)]) is_complete = 0; \\
                        if (is_complete) for (ii = (((msg_len) - 1) &gt;&gt; 3) - 1; ii &gt;= 0 ; ii--) \\
                                if (bitmask[ii] != 0xff) { is_complete = 0; break; } }"</cpp:value></cpp:define>

<cpp:if>"#"<cpp:directive>"if"</cpp:directive> <expr><literal type="number">"0"</literal></expr></cpp:if>
<cpp:define>"#"<cpp:directive>"define"</cpp:directive> <cpp:macro><name>"RSMBLY_BITMASK_PRINT"</name><parameter_list>"("<parameter><type><name>"bitmask"</name></type></parameter>"," <parameter><type><name>"msg_len"</name></type></parameter>")"</parameter_list></cpp:macro> <cpp:value>"{ \\
                        long ii; \\
                        printf(\"bitmask: \"); for (ii = 0; ii &lt; (msg_len); ii++) \\
                        printf(\"%d \", (bitmask[ii &gt;&gt; 3] &amp; (1 &lt;&lt; (ii &amp; 7))) &gt;&gt; (ii &amp; 7)); \\
                        printf(\"\\n\"); }"</cpp:value></cpp:define>
<cpp:endif>"#"<cpp:directive>"endif"</cpp:directive></cpp:endif>

<decl_stmt><decl><specifier>"static"</specifier> <type><name>"unsigned"</name> <name>"char"</name></type> <name><name>"bitmask_start_values"</name><index>"[]"</index></name> <init>"=" <expr><block>"{"<expr><literal type="number">"0xff"</literal></expr>"," <expr><literal type="number">"0xfe"</literal></expr>"," <expr><literal type="number">"0xfc"</literal></expr>"," <expr><literal type="number">"0xf8"</literal></expr>"," <expr><literal type="number">"0xf0"</literal></expr>"," <expr><literal type="number">"0xe0"</literal></expr>"," <expr><literal type="number">"0xc0"</literal></expr>"," <expr><literal type="number">"0x80"</literal></expr>"}"</block></expr></init></decl>";"</decl_stmt>
<decl_stmt><decl><specifier>"static"</specifier> <type><name>"unsigned"</name> <name>"char"</name></type> <name><name>"bitmask_end_values"</name><index>"[]"</index></name>   <init>"=" <expr><block>"{"<expr><literal type="number">"0xff"</literal></expr>"," <expr><literal type="number">"0x01"</literal></expr>"," <expr><literal type="number">"0x03"</literal></expr>"," <expr><literal type="number">"0x07"</literal></expr>"," <expr><literal type="number">"0x0f"</literal></expr>"," <expr><literal type="number">"0x1f"</literal></expr>"," <expr><literal type="number">"0x3f"</literal></expr>"," <expr><literal type="number">"0x7f"</literal></expr>"}"</block></expr></init></decl>";"</decl_stmt>

<comment type="block">"/* XDTLS:  figure out the right values */"</comment>
<decl_stmt><decl><specifier>"static"</specifier> <type><name>"unsigned"</name> <name>"int"</name></type> <name><name>"g_probable_mtu"</name><index>"[]"</index></name> <init>"=" <expr><block>"{"<expr><literal type="number">"1500"</literal> <operator>"-"</operator> <literal type="number">"28"</literal></expr>"," <expr><literal type="number">"512"</literal> <operator>"-"</operator> <literal type="number">"28"</literal></expr>"," <expr><literal type="number">"256"</literal> <operator>"-"</operator> <literal type="number">"28"</literal></expr>"}"</block></expr></init></decl>";"</decl_stmt>

<function_decl><specifier>"static"</specifier> <type><name>"unsigned"</name> <name>"int"</name></type> <name>"dtls1_guess_mtu"</name><parameter_list>"("<parameter><decl><type><name>"unsigned"</name> <name>"int"</name></type> <name>"curr_mtu"</name></decl></parameter>")"</parameter_list>";"</function_decl>
<function_decl><specifier>"static"</specifier> <type><name>"void"</name></type> <name>"dtls1_fix_message_header"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_off"</name></decl></parameter>"," 
        <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_len"</name></decl></parameter>")"</parameter_list>";"</function_decl>
<function_decl><specifier>"static"</specifier> <type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"dtls1_write_message_header"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>","
        <parameter><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name></decl></parameter>")"</parameter_list>";"</function_decl>
<function_decl><specifier>"static"</specifier> <type><name>"void"</name></type> <name>"dtls1_set_message_header_int"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"char"</name></type> <name>"mt"</name></decl></parameter>","
        <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"len"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"short"</name></type> <name>"seq_num"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_off"</name></decl></parameter>"," 
        <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_len"</name></decl></parameter>")"</parameter_list>";"</function_decl>
<function_decl><specifier>"static"</specifier> <type><name>"long"</name></type> <name>"dtls1_get_message_fragment"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"st1"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"stn"</name></decl></parameter>"," 
        <parameter><decl><type><name>"long"</name></type> <name>"max"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name> <modifier>"*"</modifier></type><name>"ok"</name></decl></parameter>")"</parameter_list>";"</function_decl>

<function><specifier>"static"</specifier> <type><name>"hm_fragment"</name> <modifier>"*"</modifier></type>
<name>"dtls1_hm_fragment_new"</name><parameter_list>"("<parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_len"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"reassembly"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"hm_fragment"</name> <modifier>"*"</modifier></type><name>"frag"</name> <init>"=" <expr><name>"NULL"</name></expr></init></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"buf"</name> <init>"=" <expr><name>"NULL"</name></expr></init></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"bitmask"</name> <init>"=" <expr><name>"NULL"</name></expr></init></decl>";"</decl_stmt>

        <expr_stmt><expr><name>"frag"</name> <operator>"="</operator> <operator>"("</operator><name>"hm_fragment"</name> <operator>"*"</operator><operator>")"</operator><call><name>"OPENSSL_malloc"</name><argument_list>"("<argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"hm_fragment"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if" <condition>"(" <expr><name>"frag"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                <block type="pseudo"><return>"return" <expr><name>"NULL"</name></expr>";"</return></block></then></if>

        <if>"if" <condition>"("<expr><name>"frag_len"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><name>"buf"</name> <operator>"="</operator> <operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><call><name>"OPENSSL_malloc"</name><argument_list>"("<argument><expr><name>"frag_len"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <if>"if" <condition>"(" <expr><name>"buf"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                        <block>"{"
                        <expr_stmt><expr><call><name>"OPENSSL_free"</name><argument_list>"("<argument><expr><name>"frag"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <return>"return" <expr><name>"NULL"</name></expr>";"</return>
                        "}"</block></then></if>
                "}"</block></then></if>

        <comment type="block">"/* zero length fragment gets zero frag-&gt;fragment */"</comment>
        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"fragment"</name></name> <operator>"="</operator> <name>"buf"</name></expr>";"</expr_stmt>

        <comment type="block">"/* Initialize reassembly bitmask if necessary */"</comment>
        <if>"if" <condition>"("<expr><name>"reassembly"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><name>"bitmask"</name> <operator>"="</operator> <operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><call><name>"OPENSSL_malloc"</name><argument_list>"("<argument><expr><call><name>"RSMBLY_BITMASK_SIZE"</name><argument_list>"("<argument><expr><name>"frag_len"</name></expr></argument>")"</argument_list></call></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <if>"if" <condition>"("<expr><name>"bitmask"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                        <block>"{"
                        <if>"if" <condition>"("<expr><name>"buf"</name> <operator>"!="</operator> <name>"NULL"</name></expr>")"</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>"OPENSSL_free"</name><argument_list>"("<argument><expr><name>"buf"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>
                        <expr_stmt><expr><call><name>"OPENSSL_free"</name><argument_list>"("<argument><expr><name>"frag"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <return>"return" <expr><name>"NULL"</name></expr>";"</return>
                        "}"</block></then></if>
                <expr_stmt><expr><call><name>"memset"</name><argument_list>"("<argument><expr><name>"bitmask"</name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>"," <argument><expr><call><name>"RSMBLY_BITMASK_SIZE"</name><argument_list>"("<argument><expr><name>"frag_len"</name></expr></argument>")"</argument_list></call></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                "}"</block></then></if>

        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"reassembly"</name></name> <operator>"="</operator> <name>"bitmask"</name></expr>";"</expr_stmt>

        <return>"return" <expr><name>"frag"</name></expr>";"</return>
        "}"</block></function>

<function><specifier>"static"</specifier> <type><name>"void"</name></type>
<name>"dtls1_hm_fragment_free"</name><parameter_list>"("<parameter><decl><type><name>"hm_fragment"</name> <modifier>"*"</modifier></type><name>"frag"</name></decl></parameter>")"</parameter_list>
        <block>"{"

        <if>"if" <condition>"("<expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"is_ccs"</name></name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"EVP_CIPHER_CTX_free"</name><argument_list>"("<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"enc_write_ctx"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"EVP_MD_CTX_destroy"</name><argument_list>"("<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"write_hash"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                "}"</block></then></if>
        <if>"if" <condition>"("<expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"fragment"</name></name></expr>")"</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>"OPENSSL_free"</name><argument_list>"("<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"fragment"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>
        <if>"if" <condition>"("<expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"reassembly"</name></name></expr>")"</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>"OPENSSL_free"</name><argument_list>"("<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"reassembly"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name>"OPENSSL_free"</name><argument_list>"("<argument><expr><name>"frag"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        "}"</block></function>

<comment type="block">"/* send s-&gt;init_buf in records of type 'type' (SSL3_RT_HANDSHAKE or SSL3_RT_CHANGE_CIPHER_SPEC) */"</comment>
<function><type><name>"int"</name></type> <name>"dtls1_do_write"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"type"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"int"</name></type> <name>"ret"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"int"</name></type> <name>"curr_mtu"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"int"</name></type> <name>"len"</name></decl>"," <decl><type ref="prev"/><name>"frag_off"</name></decl>"," <decl><type ref="prev"/><name>"mac_size"</name></decl>"," <decl><type ref="prev"/><name>"blocksize"</name></decl>";"</decl_stmt>

        <comment type="block">"/* AHA!  Figure out the MTU, and stick to the right size */"</comment>
        <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"mtu"</name></name> <operator>"&lt;"</operator> <call><name>"dtls1_min_mtu"</name><argument_list>"()"</argument_list></call> <operator>"&amp;&amp;"</operator> <operator>"!"</operator><operator>"("</operator><call><name>"SSL_get_options"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call> <operator>"&amp;"</operator> <name>"SSL_OP_NO_QUERY_MTU"</name><operator>")"</operator></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"mtu"</name></name> <operator>"="</operator> 
                        <call><name>"BIO_ctrl"</name><argument_list>"("<argument><expr><call><name>"SSL_get_wbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>"," <argument><expr><name>"BIO_CTRL_DGRAM_QUERY_MTU"</name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>"," <argument><expr><name>"NULL"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <comment type="block">"/* I've seen the kernel return bogus numbers when it doesn't know
                 * (initial write), so just make sure we have a reasonable number */"</comment>
                <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"mtu"</name></name> <operator>"&lt;"</operator> <call><name>"dtls1_min_mtu"</name><argument_list>"()"</argument_list></call></expr>")"</condition><then>
                        <block>"{"
                        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"mtu"</name></name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
                        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"mtu"</name></name> <operator>"="</operator> <call><name>"dtls1_guess_mtu"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"mtu"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <expr_stmt><expr><call><name>"BIO_ctrl"</name><argument_list>"("<argument><expr><call><name>"SSL_get_wbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>"," <argument><expr><name>"BIO_CTRL_DGRAM_SET_MTU"</name></expr></argument>"," 
                                <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"mtu"</name></name></expr></argument>"," <argument><expr><name>"NULL"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        "}"</block></then></if>
                "}"</block></then></if>
<cpp:if>"#"<cpp:directive>"if"</cpp:directive> <expr><literal type="number">"0"</literal></expr></cpp:if> 
        "mtu = s-&gt;d1-&gt;mtu;

        fprintf(stderr, \"using MTU = %d\\n\", mtu);

        mtu -= (DTLS1_HM_HEADER_LENGTH + DTLS1_RT_HEADER_LENGTH);

        curr_mtu = mtu - BIO_wpending(SSL_get_wbio(s));

        if ( curr_mtu &gt; 0)
                mtu = curr_mtu;
        else if ( ( ret = BIO_flush(SSL_get_wbio(s))) &lt;= 0)
                return ret;

        if ( BIO_wpending(SSL_get_wbio(s)) + s-&gt;init_num &gt;= mtu)
                {
                ret = BIO_flush(SSL_get_wbio(s));
                if ( ret &lt;= 0)
                        return ret;
                mtu = s-&gt;d1-&gt;mtu - (DTLS1_HM_HEADER_LENGTH + DTLS1_RT_HEADER_LENGTH);
                }"
<cpp:endif>"#"<cpp:directive>"endif"</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>"OPENSSL_assert"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"mtu"</name></name> <operator>"&gt;="</operator> <call><name>"dtls1_min_mtu"</name><argument_list>"()"</argument_list></call></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>  <comment type="block">"/* should have something reasonable now */"</comment>

        <if>"if" <condition>"(" <expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name> <operator>"=="</operator> <literal type="number">"0"</literal>  <operator>"&amp;&amp;"</operator> <name>"type"</name> <operator>"=="</operator> <name>"SSL3_RT_HANDSHAKE"</name></expr>")"</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>"OPENSSL_assert"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"=="</operator> 
                        <operator>"("</operator><name>"int"</name><operator>")"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_msg_hdr"</name><operator>"."</operator><name>"msg_len"</name></name> <operator>"+"</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>

        <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"write_hash"</name></name></expr>")"</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>"mac_size"</name> <operator>"="</operator> <call><name>"EVP_MD_CTX_size"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"write_hash"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then>
        <else>"else"
                <block type="pseudo"><expr_stmt><expr><name>"mac_size"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt></block></else></if>

        <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"enc_write_ctx"</name></name> <operator>"&amp;&amp;"</operator> 
                <operator>"("</operator><call><name>"EVP_CIPHER_mode"</name><argument_list>"(" <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"enc_write_ctx"</name><operator>"-&gt;"</operator><name>"cipher"</name></name></expr></argument>")"</argument_list></call> <operator>"&amp;"</operator> <name>"EVP_CIPH_CBC_MODE"</name><operator>")"</operator></expr>")"</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>"blocksize"</name> <operator>"="</operator> <literal type="number">"2"</literal> <operator>"*"</operator> <call><name>"EVP_CIPHER_block_size"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"enc_write_ctx"</name><operator>"-&gt;"</operator><name>"cipher"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then>
        <else>"else"
                <block type="pseudo"><expr_stmt><expr><name>"blocksize"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt></block></else></if>

        <expr_stmt><expr><name>"frag_off"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
        <while>"while"<condition>"(" <expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name></expr>")"</condition>
                <block>"{"
                <expr_stmt><expr><name>"curr_mtu"</name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"mtu"</name></name> <operator>"-"</operator> <call><name>"BIO_wpending"</name><argument_list>"("<argument><expr><call><name>"SSL_get_wbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>")"</argument_list></call> <operator>"-"</operator> 
                        <name>"DTLS1_RT_HEADER_LENGTH"</name> <operator>"-"</operator> <name>"mac_size"</name> <operator>"-"</operator> <name>"blocksize"</name></expr>";"</expr_stmt>

                <if>"if" <condition>"(" <expr><name>"curr_mtu"</name> <operator>"&lt;="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>")"</condition><then>
                        <block>"{"
                        <comment type="block">"/* grr.. we could get an error if MTU picked was wrong */"</comment>
                        <expr_stmt><expr><name>"ret"</name> <operator>"="</operator> <call><name>"BIO_flush"</name><argument_list>"("<argument><expr><call><name>"SSL_get_wbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <if>"if" <condition>"(" <expr><name>"ret"</name> <operator>"&lt;="</operator> <literal type="number">"0"</literal></expr>")"</condition><then>
                                <block type="pseudo"><return>"return" <expr><name>"ret"</name></expr>";"</return></block></then></if>
                        <expr_stmt><expr><name>"curr_mtu"</name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"mtu"</name></name> <operator>"-"</operator> <name>"DTLS1_RT_HEADER_LENGTH"</name> <operator>"-"</operator>
                                <name>"mac_size"</name> <operator>"-"</operator> <name>"blocksize"</name></expr>";"</expr_stmt>
                        "}"</block></then></if>

                <if>"if" <condition>"(" <expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"&gt;"</operator> <name>"curr_mtu"</name></expr>")"</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>"len"</name> <operator>"="</operator> <name>"curr_mtu"</name></expr>";"</expr_stmt></block></then>
                <else>"else"
                        <block type="pseudo"><expr_stmt><expr><name>"len"</name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name></expr>";"</expr_stmt></block></else></if>


                <comment type="block">"/* XDTLS: this function is too long.  split out the CCS part */"</comment>
                <if>"if" <condition>"(" <expr><name>"type"</name> <operator>"=="</operator> <name>"SSL3_RT_HANDSHAKE"</name></expr>")"</condition><then>
                        <block>"{"
                        <if>"if" <condition>"(" <expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name> <operator>"!="</operator> <literal type="number">"0"</literal></expr>")"</condition><then>
                                <block>"{"
                                <expr_stmt><expr><call><name>"OPENSSL_assert"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name> <operator>"&gt;"</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name> <operator>"-="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt>
                                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"+="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt>

                                <if>"if" <condition>"(" <expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"&gt;"</operator> <name>"curr_mtu"</name></expr>")"</condition><then>
                                        <block type="pseudo"><expr_stmt><expr><name>"len"</name> <operator>"="</operator> <name>"curr_mtu"</name></expr>";"</expr_stmt></block></then>
                                <else>"else"
                                        <block type="pseudo"><expr_stmt><expr><name>"len"</name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name></expr>";"</expr_stmt></block></else></if>
                                "}"</block></then></if>

                        <expr_stmt><expr><call><name>"dtls1_fix_message_header"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"frag_off"</name></expr></argument>"," 
                                <argument><expr><name>"len"</name> <operator>"-"</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                        <expr_stmt><expr><call><name>"dtls1_write_message_header"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><operator>"&amp;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name><index>"["<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name></expr>"]"</index></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                        <expr_stmt><expr><call><name>"OPENSSL_assert"</name><argument_list>"("<argument><expr><name>"len"</name> <operator>"&gt;="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        "}"</block></then></if>

                <expr_stmt><expr><name>"ret"</name><operator>"="</operator><call><name>"dtls1_write_bytes"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"type"</name></expr></argument>","<argument><expr><operator>"&amp;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name><index>"["<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name></expr>"]"</index></name></expr></argument>","
                        <argument><expr><name>"len"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <if>"if" <condition>"("<expr><name>"ret"</name> <operator>"&lt;"</operator> <literal type="number">"0"</literal></expr>")"</condition><then>
                        <block>"{"
                        <comment type="block">"/* might need to update MTU here, but we don't know
                         * which previous packet caused the failure -- so can't
                         * really retransmit anything.  continue as if everything
                         * is fine and wait for an alert to handle the
                         * retransmit 
                         */"</comment>
                        <if>"if" <condition>"(" <expr><call><name>"BIO_ctrl"</name><argument_list>"("<argument><expr><call><name>"SSL_get_wbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>","
                                <argument><expr><name>"BIO_CTRL_DGRAM_MTU_EXCEEDED"</name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>"," <argument><expr><name>"NULL"</name></expr></argument>")"</argument_list></call> <operator>"&gt;"</operator> <literal type="number">"0"</literal></expr> ")"</condition><then>
                                <block type="pseudo"><expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"mtu"</name></name> <operator>"="</operator> <call><name>"BIO_ctrl"</name><argument_list>"("<argument><expr><call><name>"SSL_get_wbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>","
                                        <argument><expr><name>"BIO_CTRL_DGRAM_QUERY_MTU"</name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>"," <argument><expr><name>"NULL"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then>
                        <else>"else"
                                <block type="pseudo"><return>"return"<expr><operator>"("</operator><operator>"-"</operator><literal type="number">"1"</literal><operator>")"</operator></expr>";"</return></block></else></if>
                        "}"</block></then>
                <else>"else"
                        <block>"{"

                        <comment type="block">"/* bad if this assert fails, only part of the handshake
                         * message got sent.  but why would this happen? */"</comment>
                        <expr_stmt><expr><call><name>"OPENSSL_assert"</name><argument_list>"("<argument><expr><name>"len"</name> <operator>"=="</operator> <operator>"("</operator><name>"unsigned"</name> <name>"int"</name><operator>")"</operator><name>"ret"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                        <if>"if" <condition>"("<expr><name>"type"</name> <operator>"=="</operator> <name>"SSL3_RT_HANDSHAKE"</name> <operator>"&amp;&amp;"</operator> <operator>"!"</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"retransmitting"</name></name></expr>")"</condition><then>
                                <block>"{"
                                <comment type="block">"/* should not be done for 'Hello Request's, but in that case
                                 * we'll ignore the result anyway */"</comment>
                                <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name> <init>"=" <expr><operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><operator>"&amp;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name><index>"["<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name></expr>"]"</index></name></expr></init></decl>";"</decl_stmt>
                                <decl_stmt><decl><type><specifier>"const"</specifier> <name><name>"struct"</name> <name>"hm_header_st"</name></name> <modifier>"*"</modifier></type><name>"msg_hdr"</name> <init>"=" <expr><operator>"&amp;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_msg_hdr"</name></name></expr></init></decl>";"</decl_stmt>
                                <decl_stmt><decl><type><name>"int"</name></type> <name>"xlen"</name></decl>";"</decl_stmt>

                                <if>"if" <condition>"("<expr><name>"frag_off"</name> <operator>"=="</operator> <literal type="number">"0"</literal> <operator>"&amp;&amp;"</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"version"</name></name> <operator>"!="</operator> <name>"DTLS1_BAD_VER"</name></expr>")"</condition><then>
                                        <block>"{"
                                        <comment type="block">"/* reconstruct message header is if it
                                         * is being sent in single fragment */"</comment>
                                        <expr_stmt><expr><operator>"*"</operator><name>"p"</name><operator>"++"</operator> <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"type"</name></name></expr>";"</expr_stmt>
                                        <expr_stmt><expr><call><name>"l2n3"</name><argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr></argument>","<argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                                        <expr_stmt><expr><call><name>"s2n"</name> <argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name></expr></argument>","<argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                                        <expr_stmt><expr><call><name>"l2n3"</name><argument_list>"("<argument><expr><literal type="number">"0"</literal></expr></argument>","<argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                                        <expr_stmt><expr><call><name>"l2n3"</name><argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr></argument>","<argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                                        <expr_stmt><expr><name>"p"</name>  <operator>"-="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt>
                                        <expr_stmt><expr><name>"xlen"</name> <operator>"="</operator> <name>"ret"</name></expr>";"</expr_stmt>
                                        "}"</block></then>
                                <else>"else"
                                        <block>"{"
                                        <expr_stmt><expr><name>"p"</name>  <operator>"+="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt>
                                        <expr_stmt><expr><name>"xlen"</name> <operator>"="</operator> <name>"ret"</name> <operator>"-"</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt>
                                        "}"</block></else></if>

                                <expr_stmt><expr><call><name>"ssl3_finish_mac"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"p"</name></expr></argument>"," <argument><expr><name>"xlen"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                                "}"</block></then></if>

                        <if>"if" <condition>"("<expr><name>"ret"</name> <operator>"=="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name></expr>")"</condition><then>
                                <block>"{"
                                <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name></expr>")"</condition><then>
                                        <block type="pseudo"><expr_stmt><expr><call><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name><argument_list>"("<argument><expr><literal type="number">"1"</literal></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"version"</name></name></expr></argument>"," <argument><expr><name>"type"</name></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name></name></expr></argument>"," 
                                                <argument><expr><call>"("<name>"size_t"</name>")"<argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name> <operator>"+"</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name></expr></argument>")"</argument_list></call></expr></argument>"," <argument><expr><name>"s"</name></expr></argument>"," 
                                                <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback_arg"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>

                                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>  <comment type="block">"/* done writing this message */"</comment>
                                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>

                                <return>"return"<expr><operator>"("</operator><literal type="number">"1"</literal><operator>")"</operator></expr>";"</return>
                                "}"</block></then></if>
                        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name><operator>"+="</operator><name>"ret"</name></expr>";"</expr_stmt>
                        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name><operator>"-="</operator><name>"ret"</name></expr>";"</expr_stmt>
                        <expr_stmt><expr><name>"frag_off"</name> <operator>"+="</operator> <operator>"("</operator><name>"ret"</name> <operator>"-="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name><operator>")"</operator></expr>";"</expr_stmt>
                        "}"</block></else></if>
                "}"</block></while>
        <return>"return"<expr><operator>"("</operator><literal type="number">"0"</literal><operator>")"</operator></expr>";"</return>
        "}"</block></function>


<comment type="block">"/* Obtain handshake message of message type 'mt' (any if mt == -1),
 * maximum acceptable body length 'max'.
 * Read an entire handshake message.  Handshake messages arrive in
 * fragments.
 */"</comment>
<function><type><name>"long"</name></type> <name>"dtls1_get_message"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"st1"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"stn"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"mt"</name></decl></parameter>"," <parameter><decl><type><name>"long"</name></type> <name>"max"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name> <modifier>"*"</modifier></type><name>"ok"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"int"</name></type> <name>"i"</name></decl>"," <decl><type ref="prev"/><name>"al"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name><name>"struct"</name> <name>"hm_header_st"</name></name> <modifier>"*"</modifier></type><name>"msg_hdr"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"msg_len"</name></decl>";"</decl_stmt>

        <comment type="block">"/* s3-&gt;tmp is used to store messages that are unexpected, caused
         * by the absence of an optional handshake message */"</comment>
        <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"tmp"</name><operator>"."</operator><name>"reuse_message"</name></name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"tmp"</name><operator>"."</operator><name>"reuse_message"</name></name><operator>"="</operator><literal type="number">"0"</literal></expr>";"</expr_stmt>
                <if>"if" <condition>"("<expr><operator>"("</operator><name>"mt"</name> <operator>"&gt;="</operator> <literal type="number">"0"</literal><operator>")"</operator> <operator>"&amp;&amp;"</operator> <operator>"("</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"tmp"</name><operator>"."</operator><name>"message_type"</name></name> <operator>"!="</operator> <name>"mt"</name><operator>")"</operator></expr>")"</condition><then>
                        <block>"{"
                        <expr_stmt><expr><name>"al"</name><operator>"="</operator><name>"SSL_AD_UNEXPECTED_MESSAGE"</name></expr>";"</expr_stmt>
                        <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_GET_MESSAGE"</name></expr></argument>","<argument><expr><name>"SSL_R_UNEXPECTED_MESSAGE"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <goto>"goto" <name>"f_err"</name>";"</goto>
                        "}"</block></then></if>
                <expr_stmt><expr><operator>"*"</operator><name>"ok"</name><operator>"="</operator><literal type="number">"1"</literal></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_msg"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name></name> <operator>"+"</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"="</operator> <operator>"("</operator><name>"int"</name><operator>")"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"tmp"</name><operator>"."</operator><name>"message_size"</name></name></expr>";"</expr_stmt>
                <return>"return" <expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name></expr>";"</return>
                "}"</block></then></if>

        <expr_stmt><expr><name>"msg_hdr"</name> <operator>"="</operator> <operator>"&amp;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"r_msg_hdr"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"memset"</name><argument_list>"("<argument><expr><name>"msg_hdr"</name></expr></argument>"," <argument><expr><literal type="number">"0x00"</literal></expr></argument>"," <argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr>"struct" <name>"hm_header_st"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

<label><name>"again"</name>":"</label>
        <expr_stmt><expr><name>"i"</name> <operator>"="</operator> <call><name>"dtls1_get_message_fragment"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"st1"</name></expr></argument>"," <argument><expr><name>"stn"</name></expr></argument>"," <argument><expr><name>"max"</name></expr></argument>"," <argument><expr><name>"ok"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if" <condition>"(" <expr><name>"i"</name> <operator>"=="</operator> <name>"DTLS1_HM_BAD_FRAGMENT"</name> <operator>"||"</operator>
                <name>"i"</name> <operator>"=="</operator> <name>"DTLS1_HM_FRAGMENT_RETRY"</name></expr>")"</condition><then>  <comment type="block">"/* bad fragment received */"</comment>
                <block type="pseudo"><goto>"goto" <name>"again"</name>";"</goto></block></then>
        <elseif>"else" <if>"if" <condition>"(" <expr><name>"i"</name> <operator>"&lt;="</operator> <literal type="number">"0"</literal> <operator>"&amp;&amp;"</operator> <operator>"!"</operator><operator>"*"</operator><name>"ok"</name></expr>")"</condition><then>
                <block type="pseudo"><return>"return" <expr><name>"i"</name></expr>";"</return></block></then></if></elseif></if>

        <expr_stmt><expr><name>"p"</name> <operator>"="</operator> <operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"msg_len"</name> <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr>";"</expr_stmt>

        <comment type="block">"/* reconstruct message header */"</comment>
        <expr_stmt><expr><operator>"*"</operator><operator>"("</operator><name>"p"</name><operator>"++"</operator><operator>")"</operator> <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"type"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"l2n3"</name><argument_list>"("<argument><expr><name>"msg_len"</name></expr></argument>","<argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"s2n"</name> <argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name></expr></argument>","<argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"l2n3"</name><argument_list>"("<argument><expr><literal type="number">"0"</literal></expr></argument>","<argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"l2n3"</name><argument_list>"("<argument><expr><name>"msg_len"</name></expr></argument>","<argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"version"</name></name> <operator>"!="</operator> <name>"DTLS1_BAD_VER"</name></expr>")"</condition><then> <block>"{"
                <expr_stmt><expr><name>"p"</name>       <operator>"-="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><name>"msg_len"</name> <operator>"+="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt>
        "}"</block></then></if>

        <expr_stmt><expr><call><name>"ssl3_finish_mac"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"p"</name></expr></argument>"," <argument><expr><name>"msg_len"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name></expr>")"</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name><argument_list>"("<argument><expr><literal type="number">"0"</literal></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"version"</name></name></expr></argument>"," <argument><expr><name>"SSL3_RT_HANDSHAKE"</name></expr></argument>","
                        <argument><expr><name>"p"</name></expr></argument>"," <argument><expr><name>"msg_len"</name></expr></argument>","
                        <argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback_arg"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name>"memset"</name><argument_list>"("<argument><expr><name>"msg_hdr"</name></expr></argument>"," <argument><expr><literal type="number">"0x00"</literal></expr></argument>"," <argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr>"struct" <name>"hm_header_st"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <comment type="block">"/* Don't change sequence numbers while listening */"</comment>
        <if>"if" <condition>"("<expr><operator>"!"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"listen"</name></name></expr>")"</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"handshake_read_seq"</name></name><operator>"++"</operator></expr>";"</expr_stmt></block></then></if>

        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_msg"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name></name> <operator>"+"</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt>
        <return>"return" <expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name></expr>";"</return>

<label><name>"f_err"</name>":"</label>
        <expr_stmt><expr><call><name>"ssl3_send_alert"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"SSL3_AL_FATAL"</name></expr></argument>","<argument><expr><name>"al"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><operator>"*"</operator><name>"ok"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
        <return>"return" <expr><operator>"-"</operator><literal type="number">"1"</literal></expr>";"</return>
        "}"</block></function>


<function><specifier>"static"</specifier> <type><name>"int"</name></type> <name>"dtls1_preprocess_fragment"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>","<parameter><decl><type><name><name>"struct"</name> <name>"hm_header_st"</name></name> <modifier>"*"</modifier></type><name>"msg_hdr"</name></decl></parameter>","<parameter><decl><type><name>"int"</name></type> <name>"max"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"size_t"</name></type> <name>"frag_off"</name></decl>","<decl><type ref="prev"/><name>"frag_len"</name></decl>","<decl><type ref="prev"/><name>"msg_len"</name></decl>";"</decl_stmt>

        <expr_stmt><expr><name>"msg_len"</name>  <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"frag_off"</name> <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_off"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"frag_len"</name> <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_len"</name></name></expr>";"</expr_stmt>

        <comment type="block">"/* sanity checking */"</comment>
        <if>"if" <condition>"(" <expr><operator>"("</operator><name>"frag_off"</name><operator>"+"</operator><name>"frag_len"</name><operator>")"</operator> <operator>"&gt;"</operator> <name>"msg_len"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_PREPROCESS_FRAGMENT"</name></expr></argument>","<argument><expr><name>"SSL_R_EXCESSIVE_MESSAGE_SIZE"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <return>"return" <expr><name>"SSL_AD_ILLEGAL_PARAMETER"</name></expr>";"</return>
                "}"</block></then></if>

        <if>"if" <condition>"(" <expr><operator>"("</operator><name>"frag_off"</name><operator>"+"</operator><name>"frag_len"</name><operator>")"</operator> <operator>"&gt;"</operator> <operator>"("</operator><name>"unsigned"</name> <name>"long"</name><operator>")"</operator><name>"max"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_PREPROCESS_FRAGMENT"</name></expr></argument>","<argument><expr><name>"SSL_R_EXCESSIVE_MESSAGE_SIZE"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <return>"return" <expr><name>"SSL_AD_ILLEGAL_PARAMETER"</name></expr>";"</return>
                "}"</block></then></if>

        <if>"if" <condition>"(" <expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"r_msg_hdr"</name><operator>"."</operator><name>"frag_off"</name></name> <operator>"=="</operator> <literal type="number">"0"</literal></expr>")"</condition><then> <comment type="block">"/* first fragment */"</comment>
                <block>"{"
                <comment type="block">"/* msg_len is limited to 2^24, but is effectively checked
                 * against max above */"</comment>
                <if>"if" <condition>"("<expr><operator>"!"</operator><call><name>"BUF_MEM_grow_clean"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name></name></expr></argument>","<argument><expr><name>"msg_len"</name><operator>"+"</operator><name>"DTLS1_HM_HEADER_LENGTH"</name></expr></argument>")"</argument_list></call></expr>")"</condition><then>
                        <block>"{"
                        <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_PREPROCESS_FRAGMENT"</name></expr></argument>","<argument><expr><name>"ERR_R_BUF_LIB"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <return>"return" <expr><name>"SSL_AD_INTERNAL_ERROR"</name></expr>";"</return>
                        "}"</block></then></if>

                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"tmp"</name><operator>"."</operator><name>"message_size"</name></name>  <operator>"="</operator> <name>"msg_len"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"r_msg_hdr"</name><operator>"."</operator><name>"msg_len"</name></name> <operator>"="</operator> <name>"msg_len"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"tmp"</name><operator>"."</operator><name>"message_type"</name></name>  <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"type"</name></name></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"r_msg_hdr"</name><operator>"."</operator><name>"type"</name></name>    <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"type"</name></name></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"r_msg_hdr"</name><operator>"."</operator><name>"seq"</name></name>     <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name></expr>";"</expr_stmt>
                "}"</block></then>
        <elseif>"else" <if>"if" <condition>"("<expr><name>"msg_len"</name> <operator>"!="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"r_msg_hdr"</name><operator>"."</operator><name>"msg_len"</name></name></expr>")"</condition><then>
                <block>"{"
                <comment type="block">"/* They must be playing with us! BTW, failure to enforce
                 * upper limit would open possibility for buffer overrun. */"</comment>
                <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_PREPROCESS_FRAGMENT"</name></expr></argument>","<argument><expr><name>"SSL_R_EXCESSIVE_MESSAGE_SIZE"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <return>"return" <expr><name>"SSL_AD_ILLEGAL_PARAMETER"</name></expr>";"</return>
                "}"</block></then></if></elseif></if>

        <return>"return" <expr><literal type="number">"0"</literal></expr>";"</return> <comment type="block">"/* no error */"</comment>
        "}"</block></function>


<function><specifier>"static"</specifier> <type><name>"int"</name></type>
<name>"dtls1_retrieve_buffered_fragment"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"long"</name></type> <name>"max"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name> <modifier>"*"</modifier></type><name>"ok"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <comment type="block">"/* (0) check whether the desired fragment is available
         * if so:
         * (1) copy over the fragment to s-&gt;init_buf-&gt;data[]
         * (2) update s-&gt;init_num
         */"</comment>
        <decl_stmt><decl><type><name>"pitem"</name> <modifier>"*"</modifier></type><name>"item"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"hm_fragment"</name> <modifier>"*"</modifier></type><name>"frag"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"int"</name></type> <name>"al"</name></decl>";"</decl_stmt>

        <expr_stmt><expr><operator>"*"</operator><name>"ok"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"item"</name> <operator>"="</operator> <call><name>"pqueue_peek"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"buffered_messages"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if" <condition>"(" <expr><name>"item"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                <block type="pseudo"><return>"return" <expr><literal type="number">"0"</literal></expr>";"</return></block></then></if>

        <expr_stmt><expr><name>"frag"</name> <operator>"="</operator> <operator>"("</operator><name>"hm_fragment"</name> <operator>"*"</operator><operator>")"</operator><name><name>"item"</name><operator>"-&gt;"</operator><name>"data"</name></name></expr>";"</expr_stmt>
        
        <comment type="block">"/* Don't return if reassembly still in progress */"</comment>
        <if>"if" <condition>"("<expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"reassembly"</name></name> <operator>"!="</operator> <name>"NULL"</name></expr>")"</condition><then>
                <block type="pseudo"><return>"return" <expr><literal type="number">"0"</literal></expr>";"</return></block></then></if>

        <if>"if" <condition>"(" <expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"handshake_read_seq"</name></name> <operator>"=="</operator> <name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"seq"</name></name></expr>")"</condition><then>
                <block>"{"
                <decl_stmt><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_len"</name> <init>"=" <expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"frag_len"</name></name></expr></init></decl>";"</decl_stmt>
                <expr_stmt><expr><call><name>"pqueue_pop"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"buffered_messages"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <expr_stmt><expr><name>"al"</name><operator>"="</operator><call><name>"dtls1_preprocess_fragment"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><operator>"&amp;"</operator><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name></name></expr></argument>","<argument><expr><name>"max"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <if>"if" <condition>"("<expr><name>"al"</name><operator>"=="</operator><literal type="number">"0"</literal></expr>")"</condition><then> <comment type="block">"/* no alert */"</comment>
                        <block>"{"
                        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name> <init>"=" <expr><operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name></name><operator>"+"</operator><name>"DTLS1_HM_HEADER_LENGTH"</name></expr></init></decl>";"</decl_stmt>
                        <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><operator>"&amp;"</operator><name><name>"p"</name><index>"["<expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"frag_off"</name></name></expr>"]"</index></name></expr></argument>","
                                <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"fragment"</name></name></expr></argument>","<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"frag_len"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        "}"</block></then></if>

                <expr_stmt><expr><call><name>"dtls1_hm_fragment_free"</name><argument_list>"("<argument><expr><name>"frag"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"pitem_free"</name><argument_list>"("<argument><expr><name>"item"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <if>"if" <condition>"("<expr><name>"al"</name><operator>"=="</operator><literal type="number">"0"</literal></expr>")"</condition><then>
                        <block>"{"
                        <expr_stmt><expr><operator>"*"</operator><name>"ok"</name> <operator>"="</operator> <literal type="number">"1"</literal></expr>";"</expr_stmt>
                        <return>"return" <expr><name>"frag_len"</name></expr>";"</return>
                        "}"</block></then></if>

                <expr_stmt><expr><call><name>"ssl3_send_alert"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"SSL3_AL_FATAL"</name></expr></argument>","<argument><expr><name>"al"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
                <expr_stmt><expr><operator>"*"</operator><name>"ok"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
                <return>"return" <expr><operator>"-"</operator><literal type="number">"1"</literal></expr>";"</return>
                "}"</block></then>
        <else>"else"
                <block type="pseudo"><return>"return" <expr><literal type="number">"0"</literal></expr>";"</return></block></else></if>
        "}"</block></function>


<function><specifier>"static"</specifier> <type><name>"int"</name></type>
<name>"dtls1_reassemble_fragment"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name><name>"struct"</name> <name>"hm_header_st"</name></name><modifier>"*"</modifier></type> <name>"msg_hdr"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name> <modifier>"*"</modifier></type><name>"ok"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"hm_fragment"</name> <modifier>"*"</modifier></type><name>"frag"</name> <init>"=" <expr><name>"NULL"</name></expr></init></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"pitem"</name> <modifier>"*"</modifier></type><name>"item"</name> <init>"=" <expr><name>"NULL"</name></expr></init></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"int"</name></type> <name>"i"</name> <init>"=" <expr><operator>"-"</operator><literal type="number">"1"</literal></expr></init></decl>"," <decl><type ref="prev"/><name>"is_complete"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name></type> <name><name>"seq64be"</name><index>"["<expr><literal type="number">"8"</literal></expr>"]"</index></name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_len"</name> <init>"=" <expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_len"</name></name></expr></init></decl>"," <decl><type ref="prev"/><name>"max_len"</name></decl>";"</decl_stmt>

        <if>"if" <condition>"("<expr><operator>"("</operator><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_off"</name></name><operator>"+"</operator><name>"frag_len"</name><operator>")"</operator> <operator>"&gt;"</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr>")"</condition><then>
                <block type="pseudo"><goto>"goto" <name>"err"</name>";"</goto></block></then></if>

        <comment type="block">"/* Determine maximum allowed message size. Depends on (user set)
         * maximum certificate length, but 16k is minimum.
         */"</comment>
        <if>"if" <condition>"("<expr><name>"DTLS1_HM_HEADER_LENGTH"</name> <operator>"+"</operator> <name>"SSL3_RT_MAX_ENCRYPTED_LENGTH"</name> <operator>"&lt;"</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"max_cert_list"</name></name></expr>")"</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>"max_len"</name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"max_cert_list"</name></name></expr>";"</expr_stmt></block></then>
        <else>"else"
                <block type="pseudo"><expr_stmt><expr><name>"max_len"</name> <operator>"="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name> <operator>"+"</operator> <name>"SSL3_RT_MAX_ENCRYPTED_LENGTH"</name></expr>";"</expr_stmt></block></else></if>

        <if>"if" <condition>"("<expr><operator>"("</operator><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_off"</name></name><operator>"+"</operator><name>"frag_len"</name><operator>")"</operator> <operator>"&gt;"</operator> <name>"max_len"</name></expr>")"</condition><then>
                <block type="pseudo"><goto>"goto" <name>"err"</name>";"</goto></block></then></if>

        <comment type="block">"/* Try to find item in queue */"</comment>
        <expr_stmt><expr><call><name>"memset"</name><argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>","<argument><expr><literal type="number">"0"</literal></expr></argument>","<argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"6"</literal></expr>"]"</index></name> <operator>"="</operator> <call>"("<name>"unsigned"</name> <name>"char"</name>")" <argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name><operator>"&gt;&gt;"</operator><literal type="number">"8"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"7"</literal></expr>"]"</index></name> <operator>"="</operator> <operator>"("</operator><name>"unsigned"</name> <name>"char"</name><operator>")"</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"item"</name> <operator>"="</operator> <call><name>"pqueue_find"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"buffered_messages"</name></name></expr></argument>"," <argument><expr><name>"seq64be"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <if>"if" <condition>"("<expr><name>"item"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><name>"frag"</name> <operator>"="</operator> <call><name>"dtls1_hm_fragment_new"</name><argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr></argument>"," <argument><expr><literal type="number">"1"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <if>"if" <condition>"(" <expr><name>"frag"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                        <block type="pseudo"><goto>"goto" <name>"err"</name>";"</goto></block></then></if>
                <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><operator>"&amp;"</operator><operator>"("</operator><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name></name><operator>")"</operator></expr></argument>"," <argument><expr><name>"msg_hdr"</name></expr></argument>"," <argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><operator>"*"</operator><name>"msg_hdr"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"frag_len"</name></name> <operator>"="</operator> <name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"msg_len"</name></name></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"frag_off"</name></name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
                "}"</block></then>
        <else>"else"
                <block type="pseudo"><expr_stmt><expr><name>"frag"</name> <operator>"="</operator> <operator>"("</operator><name>"hm_fragment"</name><operator>"*"</operator><operator>")"</operator> <name><name>"item"</name><operator>"-&gt;"</operator><name>"data"</name></name></expr>";"</expr_stmt></block></else></if>

        <comment type="block">"/* If message is already reassembled, this must be a
         * retransmit and can be dropped.
         */"</comment>
        <if>"if" <condition>"("<expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"reassembly"</name></name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                <block>"{"
                <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name></type> <name><name>"devnull"</name> <index>"["<expr><literal type="number">"256"</literal></expr>"]"</index></name></decl>";"</decl_stmt>

                <while>"while" <condition>"("<expr><name>"frag_len"</name></expr>")"</condition>
                        <block>"{"
                        <expr_stmt><expr><name>"i"</name> <operator>"="</operator> <call><name><name>"s"</name><operator>"-&gt;"</operator><name>"method"</name><operator>"-&gt;"</operator><name>"ssl_read_bytes"</name></name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"SSL3_RT_HANDSHAKE"</name></expr></argument>","
                                <argument><expr><name>"devnull"</name></expr></argument>","
                                <argument><expr><ternary><condition><expr><name>"frag_len"</name><operator>"&gt;"</operator><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"devnull"</name></expr></argument>")"</argument_list></sizeof></expr>"?"</condition><then><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"devnull"</name></expr></argument>")"</argument_list></sizeof></expr></then><else>":"<expr><name>"frag_len"</name></expr></else></ternary></expr></argument>","<argument><expr><literal type="number">"0"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <if>"if" <condition>"("<expr><name>"i"</name><operator>"&lt;="</operator><literal type="number">"0"</literal></expr>")"</condition><then> <block type="pseudo"><goto>"goto" <name>"err"</name>";"</goto></block></then></if>
                        <expr_stmt><expr><name>"frag_len"</name> <operator>"-="</operator> <name>"i"</name></expr>";"</expr_stmt>
                        "}"</block></while>
                <return>"return" <expr><name>"DTLS1_HM_FRAGMENT_RETRY"</name></expr>";"</return>
                "}"</block></then></if>

        <comment type="block">"/* read the body of the fragment (header has already been read */"</comment>
        <expr_stmt><expr><name>"i"</name> <operator>"="</operator> <call><name><name>"s"</name><operator>"-&gt;"</operator><name>"method"</name><operator>"-&gt;"</operator><name>"ssl_read_bytes"</name></name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"SSL3_RT_HANDSHAKE"</name></expr></argument>","
                <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"fragment"</name></name> <operator>"+"</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_off"</name></name></expr></argument>","<argument><expr><name>"frag_len"</name></expr></argument>","<argument><expr><literal type="number">"0"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if" <condition>"("<expr><name>"i"</name><operator>"&lt;="</operator><literal type="number">"0"</literal> <operator>"||"</operator> <operator>"("</operator><name>"unsigned"</name> <name>"long"</name><operator>")"</operator><name>"i"</name><operator>"!="</operator><name>"frag_len"</name></expr>")"</condition><then>
                <block type="pseudo"><goto>"goto" <name>"err"</name>";"</goto></block></then></if>

        <expr_stmt><expr><call><name>"RSMBLY_BITMASK_MARK"</name><argument_list>"("<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"reassembly"</name></name></expr></argument>"," <argument><expr><operator>"("</operator><name>"long"</name><operator>")"</operator><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_off"</name></name></expr></argument>","
                            <argument><expr><call>"("<name>"long"</name>")"<argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_off"</name></name> <operator>"+"</operator> <name>"frag_len"</name></expr></argument>")"</argument_list></call></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <expr_stmt><expr><call><name>"RSMBLY_BITMASK_IS_COMPLETE"</name><argument_list>"("<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"reassembly"</name></name></expr></argument>"," <argument><expr><operator>"("</operator><name>"long"</name><operator>")"</operator><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr></argument>","
                                   <argument><expr><name>"is_complete"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <if>"if" <condition>"("<expr><name>"is_complete"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"OPENSSL_free"</name><argument_list>"("<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"reassembly"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"reassembly"</name></name> <operator>"="</operator> <name>"NULL"</name></expr>";"</expr_stmt>
                "}"</block></then></if>

        <if>"if" <condition>"("<expr><name>"item"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"memset"</name><argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>","<argument><expr><literal type="number">"0"</literal></expr></argument>","<argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"6"</literal></expr>"]"</index></name> <operator>"="</operator> <call>"("<name>"unsigned"</name> <name>"char"</name>")"<argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name><operator>"&gt;&gt;"</operator><literal type="number">"8"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"7"</literal></expr>"]"</index></name> <operator>"="</operator> <call>"("<name>"unsigned"</name> <name>"char"</name>")"<argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <expr_stmt><expr><name>"item"</name> <operator>"="</operator> <call><name>"pitem_new"</name><argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>"," <argument><expr><name>"frag"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <if>"if" <condition>"("<expr><name>"item"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                        <block>"{"
                        <goto>"goto" <name>"err"</name>";"</goto>
                        <expr_stmt><expr><name>"i"</name> <operator>"="</operator> <operator>"-"</operator><literal type="number">"1"</literal></expr>";"</expr_stmt>
                        "}"</block></then></if>

                <expr_stmt><expr><call><name>"pqueue_insert"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"buffered_messages"</name></name></expr></argument>"," <argument><expr><name>"item"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                "}"</block></then></if>

        <return>"return" <expr><name>"DTLS1_HM_FRAGMENT_RETRY"</name></expr>";"</return>

<label><name>"err"</name>":"</label>
        <if>"if" <condition>"("<expr><name>"frag"</name> <operator>"!="</operator> <name>"NULL"</name></expr>")"</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>"dtls1_hm_fragment_free"</name><argument_list>"("<argument><expr><name>"frag"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>
        <if>"if" <condition>"("<expr><name>"item"</name> <operator>"!="</operator> <name>"NULL"</name></expr>")"</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>"OPENSSL_free"</name><argument_list>"("<argument><expr><name>"item"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>
        <expr_stmt><expr><operator>"*"</operator><name>"ok"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
        <return>"return" <expr><name>"i"</name></expr>";"</return>
        "}"</block></function>


<function><specifier>"static"</specifier> <type><name>"int"</name></type>
<name>"dtls1_process_out_of_seq_message"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name><name>"struct"</name> <name>"hm_header_st"</name></name><modifier>"*"</modifier></type> <name>"msg_hdr"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name> <modifier>"*"</modifier></type><name>"ok"</name></decl></parameter>")"</parameter_list>
<block>"{"
        <decl_stmt><decl><type><name>"int"</name></type> <name>"i"</name><init>"="<expr><operator>"-"</operator><literal type="number">"1"</literal></expr></init></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"hm_fragment"</name> <modifier>"*"</modifier></type><name>"frag"</name> <init>"=" <expr><name>"NULL"</name></expr></init></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"pitem"</name> <modifier>"*"</modifier></type><name>"item"</name> <init>"=" <expr><name>"NULL"</name></expr></init></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name></type> <name><name>"seq64be"</name><index>"["<expr><literal type="number">"8"</literal></expr>"]"</index></name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_len"</name> <init>"=" <expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_len"</name></name></expr></init></decl>";"</decl_stmt>

        <if>"if" <condition>"("<expr><operator>"("</operator><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_off"</name></name><operator>"+"</operator><name>"frag_len"</name><operator>")"</operator> <operator>"&gt;"</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr>")"</condition><then>
                <block type="pseudo"><goto>"goto" <name>"err"</name>";"</goto></block></then></if>

        <comment type="block">"/* Try to find item in queue, to prevent duplicate entries */"</comment>
        <expr_stmt><expr><call><name>"memset"</name><argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>","<argument><expr><literal type="number">"0"</literal></expr></argument>","<argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"6"</literal></expr>"]"</index></name> <operator>"="</operator> <call>"("<name>"unsigned"</name> <name>"char"</name>")" <argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name><operator>"&gt;&gt;"</operator><literal type="number">"8"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"7"</literal></expr>"]"</index></name> <operator>"="</operator> <operator>"("</operator><name>"unsigned"</name> <name>"char"</name><operator>")"</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"item"</name> <operator>"="</operator> <call><name>"pqueue_find"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"buffered_messages"</name></name></expr></argument>"," <argument><expr><name>"seq64be"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <comment type="block">"/* If we already have an entry and this one is a fragment,
         * don't discard it and rather try to reassemble it.
         */"</comment>
        <if>"if" <condition>"("<expr><name>"item"</name> <operator>"!="</operator> <name>"NULL"</name> <operator>"&amp;&amp;"</operator> <name>"frag_len"</name> <operator>"&lt;"</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr>")"</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>"item"</name> <operator>"="</operator> <name>"NULL"</name></expr>";"</expr_stmt></block></then></if>

        <comment type="block">"/* Discard the message if sequence number was already there, is
         * too far in the future, already in the queue or if we received
         * a FINISHED before the SERVER_HELLO, which then must be a stale
         * retransmit.
         */"</comment>
        <if>"if" <condition>"("<expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name> <operator>"&lt;="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"handshake_read_seq"</name></name> <operator>"||"</operator>
                <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name> <operator>"&gt;"</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"handshake_read_seq"</name></name> <operator>"+"</operator> <literal type="number">"10"</literal> <operator>"||"</operator> <name>"item"</name> <operator>"!="</operator> <name>"NULL"</name> <operator>"||"</operator>
                <operator>"("</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"handshake_read_seq"</name></name> <operator>"=="</operator> <literal type="number">"0"</literal> <operator>"&amp;&amp;"</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"type"</name></name> <operator>"=="</operator> <name>"SSL3_MT_FINISHED"</name><operator>")"</operator></expr>")"</condition><then>
                <block>"{"
                <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name></type> <name><name>"devnull"</name> <index>"["<expr><literal type="number">"256"</literal></expr>"]"</index></name></decl>";"</decl_stmt>

                <while>"while" <condition>"("<expr><name>"frag_len"</name></expr>")"</condition>
                        <block>"{"
                        <expr_stmt><expr><name>"i"</name> <operator>"="</operator> <call><name><name>"s"</name><operator>"-&gt;"</operator><name>"method"</name><operator>"-&gt;"</operator><name>"ssl_read_bytes"</name></name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"SSL3_RT_HANDSHAKE"</name></expr></argument>","
                                <argument><expr><name>"devnull"</name></expr></argument>","
                                <argument><expr><ternary><condition><expr><name>"frag_len"</name><operator>"&gt;"</operator><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"devnull"</name></expr></argument>")"</argument_list></sizeof></expr>"?"</condition><then><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"devnull"</name></expr></argument>")"</argument_list></sizeof></expr></then><else>":"<expr><name>"frag_len"</name></expr></else></ternary></expr></argument>","<argument><expr><literal type="number">"0"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <if>"if" <condition>"("<expr><name>"i"</name><operator>"&lt;="</operator><literal type="number">"0"</literal></expr>")"</condition><then> <block type="pseudo"><goto>"goto" <name>"err"</name>";"</goto></block></then></if>
                        <expr_stmt><expr><name>"frag_len"</name> <operator>"-="</operator> <name>"i"</name></expr>";"</expr_stmt>
                        "}"</block></while>
                "}"</block></then>
        <else>"else"
                <block>"{"
                <if>"if" <condition>"("<expr><name>"frag_len"</name> <operator>"&amp;&amp;"</operator> <name>"frag_len"</name> <operator>"&lt;"</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr>")"</condition><then>
                        <block type="pseudo"><return>"return" <expr><call><name>"dtls1_reassemble_fragment"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"msg_hdr"</name></expr></argument>"," <argument><expr><name>"ok"</name></expr></argument>")"</argument_list></call></expr>";"</return></block></then></if>

                <expr_stmt><expr><name>"frag"</name> <operator>"="</operator> <call><name>"dtls1_hm_fragment_new"</name><argument_list>"("<argument><expr><name>"frag_len"</name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <if>"if" <condition>"(" <expr><name>"frag"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                        <block type="pseudo"><goto>"goto" <name>"err"</name>";"</goto></block></then></if>

                <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><operator>"&amp;"</operator><operator>"("</operator><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name></name><operator>")"</operator></expr></argument>"," <argument><expr><name>"msg_hdr"</name></expr></argument>"," <argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><operator>"*"</operator><name>"msg_hdr"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <if>"if" <condition>"("<expr><name>"frag_len"</name></expr>")"</condition><then>
                        <block>"{"
                        <comment type="block">"/* read the body of the fragment (header has already been read */"</comment>
                        <expr_stmt><expr><name>"i"</name> <operator>"="</operator> <call><name><name>"s"</name><operator>"-&gt;"</operator><name>"method"</name><operator>"-&gt;"</operator><name>"ssl_read_bytes"</name></name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"SSL3_RT_HANDSHAKE"</name></expr></argument>","
                                <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"fragment"</name></name></expr></argument>","<argument><expr><name>"frag_len"</name></expr></argument>","<argument><expr><literal type="number">"0"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <if>"if" <condition>"("<expr><name>"i"</name><operator>"&lt;="</operator><literal type="number">"0"</literal> <operator>"||"</operator> <operator>"("</operator><name>"unsigned"</name> <name>"long"</name><operator>")"</operator><name>"i"</name><operator>"!="</operator><name>"frag_len"</name></expr>")"</condition><then>
                                <block type="pseudo"><goto>"goto" <name>"err"</name>";"</goto></block></then></if>
                        "}"</block></then></if>

                <expr_stmt><expr><call><name>"memset"</name><argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>","<argument><expr><literal type="number">"0"</literal></expr></argument>","<argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"6"</literal></expr>"]"</index></name> <operator>"="</operator> <call>"("<name>"unsigned"</name> <name>"char"</name>")"<argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name><operator>"&gt;&gt;"</operator><literal type="number">"8"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"7"</literal></expr>"]"</index></name> <operator>"="</operator> <call>"("<name>"unsigned"</name> <name>"char"</name>")"<argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <expr_stmt><expr><name>"item"</name> <operator>"="</operator> <call><name>"pitem_new"</name><argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>"," <argument><expr><name>"frag"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <if>"if" <condition>"(" <expr><name>"item"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                        <block type="pseudo"><goto>"goto" <name>"err"</name>";"</goto></block></then></if>

                <expr_stmt><expr><call><name>"pqueue_insert"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"buffered_messages"</name></name></expr></argument>"," <argument><expr><name>"item"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                "}"</block></else></if>

        <return>"return" <expr><name>"DTLS1_HM_FRAGMENT_RETRY"</name></expr>";"</return>

<label><name>"err"</name>":"</label>
        <if>"if" <condition>"(" <expr><name>"frag"</name> <operator>"!="</operator> <name>"NULL"</name></expr>")"</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>"dtls1_hm_fragment_free"</name><argument_list>"("<argument><expr><name>"frag"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>
        <if>"if" <condition>"(" <expr><name>"item"</name> <operator>"!="</operator> <name>"NULL"</name></expr>")"</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>"OPENSSL_free"</name><argument_list>"("<argument><expr><name>"item"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>
        <expr_stmt><expr><operator>"*"</operator><name>"ok"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
        <return>"return" <expr><name>"i"</name></expr>";"</return>
        "}"</block></function>


<function><specifier>"static"</specifier> <type><name>"long"</name></type>
<name>"dtls1_get_message_fragment"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"st1"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"stn"</name></decl></parameter>"," <parameter><decl><type><name>"long"</name></type> <name>"max"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name> <modifier>"*"</modifier></type><name>"ok"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name></type> <name><name>"wire"</name><index>"["<expr><name>"DTLS1_HM_HEADER_LENGTH"</name></expr>"]"</index></name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"len"</name></decl>"," <decl><type ref="prev"/><name>"frag_off"</name></decl>"," <decl><type ref="prev"/><name>"frag_len"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"int"</name></type> <name>"i"</name></decl>","<decl><type ref="prev"/><name>"al"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name><name>"struct"</name> <name>"hm_header_st"</name></name></type> <name>"msg_hdr"</name></decl>";"</decl_stmt>

        <comment type="block">"/* see if we have the required fragment already */"</comment>
        <if>"if" <condition>"("<expr><operator>"("</operator><name>"frag_len"</name> <operator>"="</operator> <call><name>"dtls1_retrieve_buffered_fragment"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"max"</name></expr></argument>","<argument><expr><name>"ok"</name></expr></argument>")"</argument_list></call><operator>")"</operator> <operator>"||"</operator> <operator>"*"</operator><name>"ok"</name></expr>")"</condition><then>
                <block>"{"
                <if>"if" <condition>"("<expr><operator>"*"</operator><name>"ok"</name></expr>")"</condition><then>        <block type="pseudo"><expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"="</operator> <name>"frag_len"</name></expr>";"</expr_stmt></block></then></if>
                <return>"return" <expr><name>"frag_len"</name></expr>";"</return>
                "}"</block></then></if>

        <comment type="block">"/* read handshake message header */"</comment>
        <expr_stmt><expr><name>"i"</name><operator>"="</operator><call><name><name>"s"</name><operator>"-&gt;"</operator><name>"method"</name><operator>"-&gt;"</operator><name>"ssl_read_bytes"</name></name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"SSL3_RT_HANDSHAKE"</name></expr></argument>","<argument><expr><name>"wire"</name></expr></argument>","
                <argument><expr><name>"DTLS1_HM_HEADER_LENGTH"</name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if" <condition>"("<expr><name>"i"</name> <operator>"&lt;="</operator> <literal type="number">"0"</literal></expr>")"</condition><then>     <comment type="block">"/* nbio, or an error */"</comment>
                <block>"{"
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"rwstate"</name></name><operator>"="</operator><name>"SSL_READING"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><operator>"*"</operator><name>"ok"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
                <return>"return" <expr><name>"i"</name></expr>";"</return>
                "}"</block></then></if>
        <comment type="block">"/* Handshake fails if message header is incomplete */"</comment>
        <if>"if" <condition>"("<expr><name>"i"</name> <operator>"!="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><name>"al"</name><operator>"="</operator><name>"SSL_AD_UNEXPECTED_MESSAGE"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_GET_MESSAGE_FRAGMENT"</name></expr></argument>","<argument><expr><name>"SSL_R_UNEXPECTED_MESSAGE"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <goto>"goto" <name>"f_err"</name>";"</goto>
                "}"</block></then></if>

        <comment type="block">"/* parse the message fragment header */"</comment>
        <expr_stmt><expr><call><name>"dtls1_get_message_header"</name><argument_list>"("<argument><expr><name>"wire"</name></expr></argument>"," <argument><expr><operator>"&amp;"</operator><name>"msg_hdr"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <comment type="block">"/* 
         * if this is a future (or stale) message it gets buffered
         * (or dropped)--no further processing at this time
         * While listening, we accept seq 1 (ClientHello with cookie)
         * although we're still expecting seq 0 (ClientHello)
         */"</comment>
        <if>"if" <condition>"("<expr><name><name>"msg_hdr"</name><operator>"."</operator><name>"seq"</name></name> <operator>"!="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"handshake_read_seq"</name></name> <operator>"&amp;&amp;"</operator> <operator>"!"</operator><operator>"("</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"listen"</name></name> <operator>"&amp;&amp;"</operator> <name><name>"msg_hdr"</name><operator>"."</operator><name>"seq"</name></name> <operator>"=="</operator> <literal type="number">"1"</literal><operator>")"</operator></expr>")"</condition><then>
                <block type="pseudo"><return>"return" <expr><call><name>"dtls1_process_out_of_seq_message"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><operator>"&amp;"</operator><name>"msg_hdr"</name></expr></argument>"," <argument><expr><name>"ok"</name></expr></argument>")"</argument_list></call></expr>";"</return></block></then></if>

        <expr_stmt><expr><name>"len"</name> <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"."</operator><name>"msg_len"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"frag_off"</name> <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"."</operator><name>"frag_off"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"frag_len"</name> <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"."</operator><name>"frag_len"</name></name></expr>";"</expr_stmt>

        <if>"if" <condition>"("<expr><name>"frag_len"</name> <operator>"&amp;&amp;"</operator> <name>"frag_len"</name> <operator>"&lt;"</operator> <name>"len"</name></expr>")"</condition><then>
                <block type="pseudo"><return>"return" <expr><call><name>"dtls1_reassemble_fragment"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><operator>"&amp;"</operator><name>"msg_hdr"</name></expr></argument>"," <argument><expr><name>"ok"</name></expr></argument>")"</argument_list></call></expr>";"</return></block></then></if>

        <if>"if" <condition>"("<expr><operator>"!"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"server"</name></name> <operator>"&amp;&amp;"</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"r_msg_hdr"</name><operator>"."</operator><name>"frag_off"</name></name> <operator>"=="</operator> <literal type="number">"0"</literal> <operator>"&amp;&amp;"</operator>
                <name><name>"wire"</name><index>"["<expr><literal type="number">"0"</literal></expr>"]"</index></name> <operator>"=="</operator> <name>"SSL3_MT_HELLO_REQUEST"</name></expr>")"</condition><then>
                <block>"{"
                <comment type="block">"/* The server may always send 'Hello Request' messages --
                 * we are doing a handshake anyway now, so ignore them
                 * if their format is correct. Does not count for
                 * 'Finished' MAC. */"</comment>
                <if>"if" <condition>"("<expr><name><name>"wire"</name><index>"["<expr><literal type="number">"1"</literal></expr>"]"</index></name> <operator>"=="</operator> <literal type="number">"0"</literal> <operator>"&amp;&amp;"</operator> <name><name>"wire"</name><index>"["<expr><literal type="number">"2"</literal></expr>"]"</index></name> <operator>"=="</operator> <literal type="number">"0"</literal> <operator>"&amp;&amp;"</operator> <name><name>"wire"</name><index>"["<expr><literal type="number">"3"</literal></expr>"]"</index></name> <operator>"=="</operator> <literal type="number">"0"</literal></expr>")"</condition><then>
                        <block>"{"
                        <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name></expr>")"</condition><then>
                                <block type="pseudo"><expr_stmt><expr><call><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name><argument_list>"("<argument><expr><literal type="number">"0"</literal></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"version"</name></name></expr></argument>"," <argument><expr><name>"SSL3_RT_HANDSHAKE"</name></expr></argument>"," 
                                        <argument><expr><name>"wire"</name></expr></argument>"," <argument><expr><name>"DTLS1_HM_HEADER_LENGTH"</name></expr></argument>"," <argument><expr><name>"s"</name></expr></argument>"," 
                                        <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback_arg"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>
                        
                        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
                        <return>"return" <expr><call><name>"dtls1_get_message_fragment"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"st1"</name></expr></argument>"," <argument><expr><name>"stn"</name></expr></argument>","
                                <argument><expr><name>"max"</name></expr></argument>"," <argument><expr><name>"ok"</name></expr></argument>")"</argument_list></call></expr>";"</return>
                        "}"</block></then>
                <else>"else" <comment type="block">"/* Incorrectly formated Hello request */"</comment>
                        <block>"{"
                        <expr_stmt><expr><name>"al"</name><operator>"="</operator><name>"SSL_AD_UNEXPECTED_MESSAGE"</name></expr>";"</expr_stmt>
                        <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_GET_MESSAGE_FRAGMENT"</name></expr></argument>","<argument><expr><name>"SSL_R_UNEXPECTED_MESSAGE"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <goto>"goto" <name>"f_err"</name>";"</goto>
                        "}"</block></else></if>
                "}"</block></then></if>

        <if>"if" <condition>"("<expr><operator>"("</operator><name>"al"</name><operator>"="</operator><call><name>"dtls1_preprocess_fragment"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><operator>"&amp;"</operator><name>"msg_hdr"</name></expr></argument>","<argument><expr><name>"max"</name></expr></argument>")"</argument_list></call><operator>")"</operator></expr>")"</condition><then>
                <block type="pseudo"><goto>"goto" <name>"f_err"</name>";"</goto></block></then></if>

        <comment type="block">"/* XDTLS:  ressurect this when restart is in place */"</comment>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"state"</name></name><operator>"="</operator><name>"stn"</name></expr>";"</expr_stmt>

        <if>"if" <condition>"(" <expr><name>"frag_len"</name> <operator>"&gt;"</operator> <literal type="number">"0"</literal></expr>")"</condition><then>
                <block>"{"
                <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name><init>"="<expr><operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name></name><operator>"+"</operator><name>"DTLS1_HM_HEADER_LENGTH"</name></expr></init></decl>";"</decl_stmt>

                <expr_stmt><expr><name>"i"</name><operator>"="</operator><call><name><name>"s"</name><operator>"-&gt;"</operator><name>"method"</name><operator>"-&gt;"</operator><name>"ssl_read_bytes"</name></name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"SSL3_RT_HANDSHAKE"</name></expr></argument>","
                        <argument><expr><operator>"&amp;"</operator><name><name>"p"</name><index>"["<expr><name>"frag_off"</name></expr>"]"</index></name></expr></argument>","<argument><expr><name>"frag_len"</name></expr></argument>","<argument><expr><literal type="number">"0"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <comment type="block">"/* XDTLS:  fix this--message fragments cannot span multiple packets */"</comment>
                <if>"if" <condition>"("<expr><name>"i"</name> <operator>"&lt;="</operator> <literal type="number">"0"</literal></expr>")"</condition><then>
                        <block>"{"
                        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"rwstate"</name></name><operator>"="</operator><name>"SSL_READING"</name></expr>";"</expr_stmt>
                        <expr_stmt><expr><operator>"*"</operator><name>"ok"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
                        <return>"return" <expr><name>"i"</name></expr>";"</return>
                        "}"</block></then></if>
                "}"</block></then>
        <else>"else"
                <block type="pseudo"><expr_stmt><expr><name>"i"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt></block></else></if>

        <comment type="block">"/* XDTLS:  an incorrectly formatted fragment should cause the 
         * handshake to fail */"</comment>
        <if>"if" <condition>"("<expr><name>"i"</name> <operator>"!="</operator> <operator>"("</operator><name>"int"</name><operator>")"</operator><name>"frag_len"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><name>"al"</name><operator>"="</operator><name>"SSL3_AD_ILLEGAL_PARAMETER"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_GET_MESSAGE_FRAGMENT"</name></expr></argument>","<argument><expr><name>"SSL3_AD_ILLEGAL_PARAMETER"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <goto>"goto" <name>"f_err"</name>";"</goto>
                "}"</block></then></if>

        <expr_stmt><expr><operator>"*"</operator><name>"ok"</name> <operator>"="</operator> <literal type="number">"1"</literal></expr>";"</expr_stmt>

        <comment type="block">"/* Note that s-&gt;init_num is *not* used as current offset in
         * s-&gt;init_buf-&gt;data, but as a counter summing up fragments'
         * lengths: as soon as they sum up to handshake packet
         * length, we assume we have got all the fragments. */"</comment>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"="</operator> <name>"frag_len"</name></expr>";"</expr_stmt>
        <return>"return" <expr><name>"frag_len"</name></expr>";"</return>

<label><name>"f_err"</name>":"</label>
        <expr_stmt><expr><call><name>"ssl3_send_alert"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"SSL3_AL_FATAL"</name></expr></argument>","<argument><expr><name>"al"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>

        <expr_stmt><expr><operator>"*"</operator><name>"ok"</name><operator>"="</operator><literal type="number">"0"</literal></expr>";"</expr_stmt>
        <return>"return"<expr><operator>"("</operator><operator>"-"</operator><literal type="number">"1"</literal><operator>")"</operator></expr>";"</return>
        "}"</block></function>

<function><type><name>"int"</name></type> <name>"dtls1_send_finished"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"a"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"b"</name></decl></parameter>"," <parameter><decl><type><specifier>"const"</specifier> <name>"char"</name> <modifier>"*"</modifier></type><name>"sender"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"slen"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name></decl>","<modifier>"*"</modifier><decl><type ref="prev"/><name>"d"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"int"</name></type> <name>"i"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"l"</name></decl>";"</decl_stmt>

        <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"state"</name></name> <operator>"=="</operator> <name>"a"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><name>"d"</name><operator>"="</operator><operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name></name></expr>";"</expr_stmt>
                <expr_stmt><expr><name>"p"</name><operator>"="</operator> <operator>"&amp;"</operator><operator>"("</operator><name><name>"d"</name><index>"["<expr><name>"DTLS1_HM_HEADER_LENGTH"</name></expr>"]"</index></name><operator>")"</operator></expr>";"</expr_stmt>

                <expr_stmt><expr><name>"i"</name><operator>"="</operator><call><name><name>"s"</name><operator>"-&gt;"</operator><name>"method"</name><operator>"-&gt;"</operator><name>"ssl3_enc"</name><operator>"-&gt;"</operator><name>"final_finish_mac"</name></name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","
                        <argument><expr><name>"sender"</name></expr></argument>","<argument><expr><name>"slen"</name></expr></argument>","<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"tmp"</name><operator>"."</operator><name>"finish_md"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"tmp"</name><operator>"."</operator><name>"finish_md_len"</name></name> <operator>"="</operator> <name>"i"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><name>"p"</name></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"tmp"</name><operator>"."</operator><name>"finish_md"</name></name></expr></argument>"," <argument><expr><name>"i"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name>"p"</name><operator>"+="</operator><name>"i"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><name>"l"</name><operator>"="</operator><name>"i"</name></expr>";"</expr_stmt>

        <comment type="block">"/* Copy the finished so we can use it for
         * renegotiation checks
         */"</comment>
        <if>"if"<condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"type"</name></name> <operator>"=="</operator> <name>"SSL_ST_CONNECT"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"OPENSSL_assert"</name><argument_list>"("<argument><expr><name>"i"</name> <operator>"&lt;="</operator> <name>"EVP_MAX_MD_SIZE"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"previous_client_finished"</name></name></expr></argument>"," 
                       <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"tmp"</name><operator>"."</operator><name>"finish_md"</name></name></expr></argument>"," <argument><expr><name>"i"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"previous_client_finished_len"</name></name><operator>"="</operator><name>"i"</name></expr>";"</expr_stmt>
                "}"</block></then>
        <else>"else"
                <block>"{"
                <expr_stmt><expr><call><name>"OPENSSL_assert"</name><argument_list>"("<argument><expr><name>"i"</name> <operator>"&lt;="</operator> <name>"EVP_MAX_MD_SIZE"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"previous_server_finished"</name></name></expr></argument>"," 
                       <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"tmp"</name><operator>"."</operator><name>"finish_md"</name></name></expr></argument>"," <argument><expr><name>"i"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"previous_server_finished_len"</name></name><operator>"="</operator><name>"i"</name></expr>";"</expr_stmt>
                "}"</block></else></if>

<cpp:ifdef>"#"<cpp:directive>"ifdef"</cpp:directive> <name>"OPENSSL_SYS_WIN16"</name></cpp:ifdef>
                <comment type="block">"/* MSVC 1.5 does not clear the top bytes of the word unless
                 * I do this.
                 */"</comment>
                <expr_stmt><expr><name>"l"</name><operator>"&amp;="</operator><literal type="number">"0xffff"</literal></expr>";"</expr_stmt>
<cpp:endif>"#"<cpp:directive>"endif"</cpp:directive></cpp:endif>

                <expr_stmt><expr><name>"d"</name> <operator>"="</operator> <call><name>"dtls1_set_message_header"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"d"</name></expr></argument>"," <argument><expr><name>"SSL3_MT_FINISHED"</name></expr></argument>"," <argument><expr><name>"l"</name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>"," <argument><expr><name>"l"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name><operator>"="</operator><operator>"("</operator><name>"int"</name><operator>")"</operator><name>"l"</name><operator>"+"</operator><name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name><operator>"="</operator><literal type="number">"0"</literal></expr>";"</expr_stmt>

                <comment type="block">"/* buffer the message to handle re-xmits */"</comment>
                <expr_stmt><expr><call><name>"dtls1_buffer_message"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"state"</name></name><operator>"="</operator><name>"b"</name></expr>";"</expr_stmt>
                "}"</block></then></if>

        <comment type="block">"/* SSL3_ST_SEND_xxxxxx_HELLO_B */"</comment>
        <return>"return"<expr><operator>"("</operator><call><name>"dtls1_do_write"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"SSL3_RT_HANDSHAKE"</name></expr></argument>")"</argument_list></call><operator>")"</operator></expr>";"</return>
        "}"</block></function>

<comment type="block">"/* for these 2 messages, we need to
 * ssl-&gt;enc_read_ctx                    re-init
 * ssl-&gt;s3-&gt;read_sequence               zero
 * ssl-&gt;s3-&gt;read_mac_secret             re-init
 * ssl-&gt;session-&gt;read_sym_enc           assign
 * ssl-&gt;session-&gt;read_compression       assign
 * ssl-&gt;session-&gt;read_hash              assign
 */"</comment>
<function><type><name>"int"</name></type> <name>"dtls1_send_change_cipher_spec"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"a"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"b"</name></decl></parameter>")"</parameter_list>
        <block>"{" 
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name></decl>";"</decl_stmt>

        <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"state"</name></name> <operator>"=="</operator> <name>"a"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><name>"p"</name><operator>"="</operator><operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name></name></expr>";"</expr_stmt>
                <expr_stmt><expr><operator>"*"</operator><name>"p"</name><operator>"++"</operator><operator>"="</operator><name>"SSL3_MT_CCS"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"handshake_write_seq"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"next_handshake_write_seq"</name></name></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name><operator>"="</operator><name>"DTLS1_CCS_HEADER_LENGTH"</name></expr>";"</expr_stmt>

                <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"version"</name></name> <operator>"=="</operator> <name>"DTLS1_BAD_VER"</name></expr>")"</condition><then> <block>"{"
                        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"next_handshake_write_seq"</name></name><operator>"++"</operator></expr>";"</expr_stmt>
                        <expr_stmt><expr><call><name>"s2n"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"handshake_write_seq"</name></name></expr></argument>","<argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name><operator>"+="</operator><literal type="number">"2"</literal></expr>";"</expr_stmt>
                "}"</block></then></if>

                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name><operator>"="</operator><literal type="number">"0"</literal></expr>";"</expr_stmt>

                <expr_stmt><expr><call><name>"dtls1_set_message_header_int"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"SSL3_MT_CCS"</name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>"," 
                        <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"handshake_write_seq"</name></name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <comment type="block">"/* buffer the message to handle re-xmits */"</comment>
                <expr_stmt><expr><call><name>"dtls1_buffer_message"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><literal type="number">"1"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"state"</name></name><operator>"="</operator><name>"b"</name></expr>";"</expr_stmt>
                "}"</block></then></if>

        <comment type="block">"/* SSL3_ST_CW_CHANGE_B */"</comment>
        <return>"return"<expr><operator>"("</operator><call><name>"dtls1_do_write"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name>"SSL3_RT_CHANGE_CIPHER_SPEC"</name></expr></argument>")"</argument_list></call><operator>")"</operator></expr>";"</return>
        "}"</block></function>

<function><specifier>"static"</specifier> <type><name>"int"</name></type> <name>"dtls1_add_cert_to_buf"</name><parameter_list>"("<parameter><decl><type><name>"BUF_MEM"</name> <modifier>"*"</modifier></type><name>"buf"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"long"</name> <modifier>"*"</modifier></type><name>"l"</name></decl></parameter>"," <parameter><decl><type><name>"X509"</name> <modifier>"*"</modifier></type><name>"x"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"int"</name></type> <name>"n"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name></decl>";"</decl_stmt>

        <expr_stmt><expr><name>"n"</name><operator>"="</operator><call><name>"i2d_X509"</name><argument_list>"("<argument><expr><name>"x"</name></expr></argument>","<argument><expr><name>"NULL"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if" <condition>"("<expr><operator>"!"</operator><call><name>"BUF_MEM_grow_clean"</name><argument_list>"("<argument><expr><name>"buf"</name></expr></argument>","<argument><expr><call>"("<name>"int"</name>")"<argument_list>"("<argument><expr><name>"n"</name><operator>"+"</operator><operator>"("</operator><operator>"*"</operator><name>"l"</name><operator>")"</operator><operator>"+"</operator><literal type="number">"3"</literal></expr></argument>")"</argument_list></call></expr></argument>")"</argument_list></call></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_ADD_CERT_TO_BUF"</name></expr></argument>","<argument><expr><name>"ERR_R_BUF_LIB"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <return>"return" <expr><literal type="number">"0"</literal></expr>";"</return>
                "}"</block></then></if>
        <expr_stmt><expr><name>"p"</name><operator>"="</operator><operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><operator>"&amp;"</operator><operator>"("</operator><name><name>"buf"</name><operator>"-&gt;"</operator><name>"data"</name><index>"["<expr><operator>"*"</operator><name>"l"</name></expr>"]"</index></name><operator>")"</operator></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"l2n3"</name><argument_list>"("<argument><expr><name>"n"</name></expr></argument>","<argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"i2d_X509"</name><argument_list>"("<argument><expr><name>"x"</name></expr></argument>","<argument><expr><operator>"&amp;"</operator><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><operator>"*"</operator><name>"l"</name><operator>"+="</operator><name>"n"</name><operator>"+"</operator><literal type="number">"3"</literal></expr>";"</expr_stmt>

        <return>"return" <expr><literal type="number">"1"</literal></expr>";"</return>
        "}"</block></function>
<function><type><name>"unsigned"</name> <name>"long"</name></type> <name>"dtls1_output_cert_chain"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"X509"</name> <modifier>"*"</modifier></type><name>"x"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"int"</name></type> <name>"i"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"l"</name><init>"=" <expr><literal type="number">"3"</literal> <operator>"+"</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr></init></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"BUF_MEM"</name> <modifier>"*"</modifier></type><name>"buf"</name></decl>";"</decl_stmt>

        <comment type="block">"/* TLSv1 sends a chain with nothing in it, instead of an alert */"</comment>
        <expr_stmt><expr><name>"buf"</name><operator>"="</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name></name></expr>";"</expr_stmt>
        <if>"if" <condition>"("<expr><operator>"!"</operator><call><name>"BUF_MEM_grow_clean"</name><argument_list>"("<argument><expr><name>"buf"</name></expr></argument>","<argument><expr><literal type="number">"10"</literal></expr></argument>")"</argument_list></call></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_OUTPUT_CERT_CHAIN"</name></expr></argument>","<argument><expr><name>"ERR_R_BUF_LIB"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <return>"return"<expr><operator>"("</operator><literal type="number">"0"</literal><operator>")"</operator></expr>";"</return>
                "}"</block></then></if>
        <if>"if" <condition>"("<expr><name>"x"</name> <operator>"!="</operator> <name>"NULL"</name></expr>")"</condition><then>
                <block>"{"
                <decl_stmt><decl><type><name>"X509_STORE_CTX"</name></type> <name>"xs_ctx"</name></decl>";"</decl_stmt>

                <if>"if" <condition>"("<expr><operator>"!"</operator><call><name>"X509_STORE_CTX_init"</name><argument_list>"("<argument><expr><operator>"&amp;"</operator><name>"xs_ctx"</name></expr></argument>","<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"ctx"</name><operator>"-&gt;"</operator><name>"cert_store"</name></name></expr></argument>","<argument><expr><name>"x"</name></expr></argument>","<argument><expr><name>"NULL"</name></expr></argument>")"</argument_list></call></expr>")"</condition><then>
                        <block>"{"
                        <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_OUTPUT_CERT_CHAIN"</name></expr></argument>","<argument><expr><name>"ERR_R_X509_LIB"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <return>"return"<expr><operator>"("</operator><literal type="number">"0"</literal><operator>")"</operator></expr>";"</return>
                        "}"</block></then></if>
  
                <expr_stmt><expr><call><name>"X509_verify_cert"</name><argument_list>"("<argument><expr><operator>"&amp;"</operator><name>"xs_ctx"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <comment type="block">"/* Don't leave errors in the queue */"</comment>
                <expr_stmt><expr><call><name>"ERR_clear_error"</name><argument_list>"()"</argument_list></call></expr>";"</expr_stmt>
                <for>"for" <control>"("<init><expr><name>"i"</name><operator>"="</operator><literal type="number">"0"</literal></expr>";"</init> <condition><expr><name>"i"</name> <operator>"&lt;"</operator> <call><name>"sk_X509_num"</name><argument_list>"("<argument><expr><name><name>"xs_ctx"</name><operator>"."</operator><name>"chain"</name></name></expr></argument>")"</argument_list></call></expr>";"</condition> <incr><expr><name>"i"</name><operator>"++"</operator></expr></incr>")"</control>
                        <block>"{"
                        <expr_stmt><expr><name>"x"</name> <operator>"="</operator> <call><name>"sk_X509_value"</name><argument_list>"("<argument><expr><name><name>"xs_ctx"</name><operator>"."</operator><name>"chain"</name></name></expr></argument>"," <argument><expr><name>"i"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                        <if>"if" <condition>"("<expr><operator>"!"</operator><call><name>"dtls1_add_cert_to_buf"</name><argument_list>"("<argument><expr><name>"buf"</name></expr></argument>"," <argument><expr><operator>"&amp;"</operator><name>"l"</name></expr></argument>"," <argument><expr><name>"x"</name></expr></argument>")"</argument_list></call></expr>")"</condition><then>
                                <block>"{"
                                <expr_stmt><expr><call><name>"X509_STORE_CTX_cleanup"</name><argument_list>"("<argument><expr><operator>"&amp;"</operator><name>"xs_ctx"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                                <return>"return" <expr><literal type="number">"0"</literal></expr>";"</return>
                                "}"</block></then></if>
                        "}"</block></for>
                <expr_stmt><expr><call><name>"X509_STORE_CTX_cleanup"</name><argument_list>"("<argument><expr><operator>"&amp;"</operator><name>"xs_ctx"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                "}"</block></then></if>
        <comment type="block">"/* Thawte special :-) */"</comment>
        <for>"for" <control>"("<init><expr><name>"i"</name><operator>"="</operator><literal type="number">"0"</literal></expr>";"</init> <condition><expr><name>"i"</name><operator>"&lt;"</operator><call><name>"sk_X509_num"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"ctx"</name><operator>"-&gt;"</operator><name>"extra_certs"</name></name></expr></argument>")"</argument_list></call></expr>";"</condition> <incr><expr><name>"i"</name><operator>"++"</operator></expr></incr>")"</control>
                <block>"{"
                <expr_stmt><expr><name>"x"</name><operator>"="</operator><call><name>"sk_X509_value"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"ctx"</name><operator>"-&gt;"</operator><name>"extra_certs"</name></name></expr></argument>","<argument><expr><name>"i"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <if>"if" <condition>"("<expr><operator>"!"</operator><call><name>"dtls1_add_cert_to_buf"</name><argument_list>"("<argument><expr><name>"buf"</name></expr></argument>"," <argument><expr><operator>"&amp;"</operator><name>"l"</name></expr></argument>"," <argument><expr><name>"x"</name></expr></argument>")"</argument_list></call></expr>")"</condition><then>
                        <block type="pseudo"><return>"return" <expr><literal type="number">"0"</literal></expr>";"</return></block></then></if>
                "}"</block></for>

        <expr_stmt><expr><name>"l"</name><operator>"-="</operator> <operator>"("</operator><literal type="number">"3"</literal> <operator>"+"</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name><operator>")"</operator></expr>";"</expr_stmt>

        <expr_stmt><expr><name>"p"</name><operator>"="</operator><operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><operator>"&amp;"</operator><operator>"("</operator><name><name>"buf"</name><operator>"-&gt;"</operator><name>"data"</name><index>"["<expr><name>"DTLS1_HM_HEADER_LENGTH"</name></expr>"]"</index></name><operator>")"</operator></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"l2n3"</name><argument_list>"("<argument><expr><name>"l"</name></expr></argument>","<argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"l"</name><operator>"+="</operator><literal type="number">"3"</literal></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"p"</name><operator>"="</operator><operator>"("</operator><name>"unsigned"</name> <name>"char"</name> <operator>"*"</operator><operator>")"</operator><operator>"&amp;"</operator><operator>"("</operator><name><name>"buf"</name><operator>"-&gt;"</operator><name>"data"</name><index>"["<expr><literal type="number">"0"</literal></expr>"]"</index></name><operator>")"</operator></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"p"</name> <operator>"="</operator> <call><name>"dtls1_set_message_header"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"p"</name></expr></argument>"," <argument><expr><name>"SSL3_MT_CERTIFICATE"</name></expr></argument>"," <argument><expr><name>"l"</name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>"," <argument><expr><name>"l"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <expr_stmt><expr><name>"l"</name><operator>"+="</operator><name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt>
        <return>"return"<expr><operator>"("</operator><name>"l"</name><operator>")"</operator></expr>";"</return>
        "}"</block></function>

<function><type><name>"int"</name></type> <name>"dtls1_read_failed"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"code"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <if>"if" <condition>"(" <expr><name>"code"</name> <operator>"&gt;"</operator> <literal type="number">"0"</literal></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"fprintf"</name><argument_list>"(" <argument><expr><name>"stderr"</name></expr></argument>"," <argument><expr><literal type="string">"\"invalid state reached %s:%d\""</literal></expr></argument>"," <argument><expr><name>"__FILE__"</name></expr></argument>"," <argument><expr><name>"__LINE__"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <return>"return" <expr><literal type="number">"1"</literal></expr>";"</return>
                "}"</block></then></if>

        <if>"if" <condition>"("<expr><operator>"!"</operator><call><name>"dtls1_is_timer_expired"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr>")"</condition><then>
                <block>"{"
                <comment type="block">"/* not a timeout, none of our business, 
                   let higher layers handle this.  in fact it's probably an error */"</comment>
                <return>"return" <expr><name>"code"</name></expr>";"</return>
                "}"</block></then></if>

<cpp:ifndef>"#"<cpp:directive>"ifndef"</cpp:directive> <name>"OPENSSL_NO_HEARTBEATS"</name></cpp:ifndef>
        <if>"if" <condition>"("<expr><operator>"!"</operator><call><name>"SSL_in_init"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call> <operator>"&amp;&amp;"</operator> <operator>"!"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"tlsext_hb_pending"</name></name></expr>")"</condition><then>  <comment type="block">"/* done, no need to send a retransmit */"</comment>
<cpp:else>"#"<cpp:directive>"else"</cpp:directive></cpp:else>
        <block type="pseudo"><if>"if" <condition>"("<expr><operator>"!"</operator><call><name>"SSL_in_init"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr>")"</condition><then>  <comment type="block">"/* done, no need to send a retransmit */"</comment>
<cpp:endif>"#"<cpp:directive>"endif"</cpp:directive></cpp:endif>
                <block>"{"
                <expr_stmt><expr><call><name>"BIO_set_flags"</name><argument_list>"("<argument><expr><call><name>"SSL_get_rbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>"," <argument><expr><name>"BIO_FLAGS_READ"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <return>"return" <expr><name>"code"</name></expr>";"</return>
                "}"</block></then></if></block></then></if>

<cpp:if>"#"<cpp:directive>"if"</cpp:directive> <expr><literal type="number">"0"</literal></expr></cpp:if> <comment type="block">"/* for now, each alert contains only one record number */"</comment>
        "item = pqueue_peek(state-&gt;rcvd_records);
        if ( item )
                {"
                <comment type="block">"/* send an alert immediately for all the missing records */"</comment>
                "}
        else"
<cpp:endif>"#"<cpp:directive>"endif"</cpp:directive></cpp:endif>

<cpp:if>"#"<cpp:directive>"if"</cpp:directive> <expr><literal type="number">"0"</literal></expr></cpp:if>  <comment type="block">"/* no more alert sending, just retransmit the last set of messages */"</comment>
        "if ( state-&gt;timeout.read_timeouts &gt;= DTLS1_TMO_READ_COUNT)
                ssl3_send_alert(s,SSL3_AL_WARNING,
                        DTLS1_AD_MISSING_HANDSHAKE_MESSAGE);"
<cpp:endif>"#"<cpp:directive>"endif"</cpp:directive></cpp:endif>

        <return>"return" <expr><call><name>"dtls1_handle_timeout"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr>";"</return>
        "}"</block></function>

<function><type><name>"int"</name></type>
<name>"dtls1_get_queue_priority"</name><parameter_list>"("<parameter><decl><type><name>"unsigned"</name> <name>"short"</name></type> <name>"seq"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"is_ccs"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <comment type="block">"/* The index of the retransmission queue actually is the message sequence number,
         * since the queue only contains messages of a single handshake. However, the
         * ChangeCipherSpec has no message sequence number and so using only the sequence
         * will result in the CCS and Finished having the same index. To prevent this,
         * the sequence number is multiplied by 2. In case of a CCS 1 is subtracted.
         * This does not only differ CSS and Finished, it also maintains the order of the
         * index (important for priority queues) and fits in the unsigned short variable.
         */"</comment>     
        <return>"return" <expr><name>"seq"</name> <operator>"*"</operator> <literal type="number">"2"</literal> <operator>"-"</operator> <name>"is_ccs"</name></expr>";"</return>
        "}"</block></function>

<function><type><name>"int"</name></type>
<name>"dtls1_retransmit_buffered_messages"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"pqueue"</name></type> <name>"sent"</name> <init>"=" <expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"sent_messages"</name></name></expr></init></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"piterator"</name></type> <name>"iter"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"pitem"</name> <modifier>"*"</modifier></type><name>"item"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"hm_fragment"</name> <modifier>"*"</modifier></type><name>"frag"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"int"</name></type> <name>"found"</name> <init>"=" <expr><literal type="number">"0"</literal></expr></init></decl>";"</decl_stmt>

        <expr_stmt><expr><name>"iter"</name> <operator>"="</operator> <call><name>"pqueue_iterator"</name><argument_list>"("<argument><expr><name>"sent"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <for>"for" <control>"(" <init><expr><name>"item"</name> <operator>"="</operator> <call><name>"pqueue_next"</name><argument_list>"("<argument><expr><operator>"&amp;"</operator><name>"iter"</name></expr></argument>")"</argument_list></call></expr>";"</init> <condition><expr><name>"item"</name> <operator>"!="</operator> <name>"NULL"</name></expr>";"</condition> <incr><expr><name>"item"</name> <operator>"="</operator> <call><name>"pqueue_next"</name><argument_list>"("<argument><expr><operator>"&amp;"</operator><name>"iter"</name></expr></argument>")"</argument_list></call></expr></incr>")"</control>
                <block>"{"
                <expr_stmt><expr><name>"frag"</name> <operator>"="</operator> <operator>"("</operator><name>"hm_fragment"</name> <operator>"*"</operator><operator>")"</operator><name><name>"item"</name><operator>"-&gt;"</operator><name>"data"</name></name></expr>";"</expr_stmt>
                        <if>"if" <condition>"(" <expr><call><name>"dtls1_retransmit_message"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>","
                                <argument><expr><operator>"("</operator><name>"unsigned"</name> <name>"short"</name><operator>")"</operator><call><name>"dtls1_get_queue_priority"</name><argument_list>"("<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"seq"</name></name></expr></argument>"," <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"is_ccs"</name></name></expr></argument>")"</argument_list></call></expr></argument>","
                                <argument><expr><literal type="number">"0"</literal></expr></argument>"," <argument><expr><operator>"&amp;"</operator><name>"found"</name></expr></argument>")"</argument_list></call> <operator>"&lt;="</operator> <literal type="number">"0"</literal> <operator>"&amp;&amp;"</operator> <name>"found"</name></expr>")"</condition><then>
                        <block>"{"
                        <expr_stmt><expr><call><name>"fprintf"</name><argument_list>"("<argument><expr><name>"stderr"</name></expr></argument>"," <argument><expr><literal type="string">"\"dtls1_retransmit_message() failed\n\""</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <return>"return" <expr><operator>"-"</operator><literal type="number">"1"</literal></expr>";"</return>
                        "}"</block></then></if>
                "}"</block></for>

        <return>"return" <expr><literal type="number">"1"</literal></expr>";"</return>
        "}"</block></function>

<function><type><name>"int"</name></type>
<name>"dtls1_buffer_message"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"int"</name></type> <name>"is_ccs"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"pitem"</name> <modifier>"*"</modifier></type><name>"item"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"hm_fragment"</name> <modifier>"*"</modifier></type><name>"frag"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name></type> <name><name>"seq64be"</name><index>"["<expr><literal type="number">"8"</literal></expr>"]"</index></name></decl>";"</decl_stmt>

        <comment type="block">"/* this function is called immediately after a message has 
         * been serialized */"</comment>
        <expr_stmt><expr><call><name>"OPENSSL_assert"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_off"</name></name> <operator>"=="</operator> <literal type="number">"0"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <expr_stmt><expr><name>"frag"</name> <operator>"="</operator> <call><name>"dtls1_hm_fragment_new"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"fragment"</name></name></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name></name></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <if>"if" <condition>"(" <expr><name>"is_ccs"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"OPENSSL_assert"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_msg_hdr"</name><operator>"."</operator><name>"msg_len"</name></name> <operator>"+"</operator> 
                               <operator>"("</operator><ternary><condition><expr><operator>"("</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"version"</name></name><operator>"=="</operator><name>"DTLS1_VERSION"</name><operator>")"</operator></expr>"?"</condition><then><expr><name>"DTLS1_CCS_HEADER_LENGTH"</name></expr></then><else>":"<expr><literal type="number">"3"</literal></expr></else></ternary><operator>")"</operator> <operator>"=="</operator> <operator>"("</operator><name>"unsigned"</name> <name>"int"</name><operator>")"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                "}"</block></then>
        <else>"else"
                <block>"{"
                <expr_stmt><expr><call><name>"OPENSSL_assert"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_msg_hdr"</name><operator>"."</operator><name>"msg_len"</name></name> <operator>"+"</operator> 
                        <name>"DTLS1_HM_HEADER_LENGTH"</name> <operator>"=="</operator> <operator>"("</operator><name>"unsigned"</name> <name>"int"</name><operator>")"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                "}"</block></else></if>

        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"msg_len"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_msg_hdr"</name><operator>"."</operator><name>"msg_len"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"seq"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_msg_hdr"</name><operator>"."</operator><name>"seq"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"type"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_msg_hdr"</name><operator>"."</operator><name>"type"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"frag_off"</name></name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"frag_len"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_msg_hdr"</name><operator>"."</operator><name>"msg_len"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"is_ccs"</name></name> <operator>"="</operator> <name>"is_ccs"</name></expr>";"</expr_stmt>

        <comment type="block">"/* save current state*/"</comment>
        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"enc_write_ctx"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"enc_write_ctx"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"write_hash"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"write_hash"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"compress"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"compress"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"session"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"session"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"epoch"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_epoch"</name></name></expr>";"</expr_stmt>
        
        <expr_stmt><expr><call><name>"memset"</name><argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>","<argument><expr><literal type="number">"0"</literal></expr></argument>","<argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"6"</literal></expr>"]"</index></name> <operator>"="</operator> <call>"("<name>"unsigned"</name> <name>"char"</name>")"<argument_list>"("<argument><expr><call><name>"dtls1_get_queue_priority"</name><argument_list>"("<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"seq"</name></name></expr></argument>","
                                                                                                                  <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"is_ccs"</name></name></expr></argument>")"</argument_list></call><operator>"&gt;&gt;"</operator><literal type="number">"8"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"7"</literal></expr>"]"</index></name> <operator>"="</operator> <call>"("<name>"unsigned"</name> <name>"char"</name>")"<argument_list>"("<argument><expr><call><name>"dtls1_get_queue_priority"</name><argument_list>"("<argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"seq"</name></name></expr></argument>","
                                                                                                                  <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"is_ccs"</name></name></expr></argument>")"</argument_list></call></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <expr_stmt><expr><name>"item"</name> <operator>"="</operator> <call><name>"pitem_new"</name><argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>"," <argument><expr><name>"frag"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if" <condition>"(" <expr><name>"item"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"dtls1_hm_fragment_free"</name><argument_list>"("<argument><expr><name>"frag"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <return>"return" <expr><literal type="number">"0"</literal></expr>";"</return>
                "}"</block></then></if>

<cpp:if>"#"<cpp:directive>"if"</cpp:directive> <expr><literal type="number">"0"</literal></expr></cpp:if>
        "fprintf( stderr, \"buffered messge: \\ttype = %xx\\n\", msg_buf-&gt;type);
        fprintf( stderr, \"\\t\\t\\t\\t\\tlen = %d\\n\", msg_buf-&gt;len);
        fprintf( stderr, \"\\t\\t\\t\\t\\tseq_num = %d\\n\", msg_buf-&gt;seq_num);"
<cpp:endif>"#"<cpp:directive>"endif"</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>"pqueue_insert"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"sent_messages"</name></name></expr></argument>"," <argument><expr><name>"item"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <return>"return" <expr><literal type="number">"1"</literal></expr>";"</return>
        "}"</block></function>

<function><type><name>"int"</name></type>
<name>"dtls1_retransmit_message"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"short"</name></type> <name>"seq"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_off"</name></decl></parameter>","
        <parameter><decl><type><name>"int"</name> <modifier>"*"</modifier></type><name>"found"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"int"</name></type> <name>"ret"</name></decl>";"</decl_stmt>
        <comment type="block">"/* XDTLS: for now assuming that read/writes are blocking */"</comment>
        <decl_stmt><decl><type><name>"pitem"</name> <modifier>"*"</modifier></type><name>"item"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"hm_fragment"</name> <modifier>"*"</modifier></type><name>"frag"</name></decl> ";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"header_length"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name></type> <name><name>"seq64be"</name><index>"["<expr><literal type="number">"8"</literal></expr>"]"</index></name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name><name>"struct"</name> <name>"dtls1_retransmit_state"</name></name></type> <name>"saved_state"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name></type> <name><name>"save_write_sequence"</name><index>"["<expr><literal type="number">"8"</literal></expr>"]"</index></name></decl>";"</decl_stmt>

        <comment type="block">"/*
          OPENSSL_assert(s-&gt;init_num == 0);
          OPENSSL_assert(s-&gt;init_off == 0);
         */"</comment>

        <comment type="block">"/* XDTLS:  the requested message ought to be found, otherwise error */"</comment>
        <expr_stmt><expr><call><name>"memset"</name><argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>","<argument><expr><literal type="number">"0"</literal></expr></argument>","<argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"seq64be"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"6"</literal></expr>"]"</index></name> <operator>"="</operator> <call>"("<name>"unsigned"</name> <name>"char"</name>")"<argument_list>"("<argument><expr><name>"seq"</name><operator>"&gt;&gt;"</operator><literal type="number">"8"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"seq64be"</name><index>"["<expr><literal type="number">"7"</literal></expr>"]"</index></name> <operator>"="</operator> <operator>"("</operator><name>"unsigned"</name> <name>"char"</name><operator>")"</operator><name>"seq"</name></expr>";"</expr_stmt>

        <expr_stmt><expr><name>"item"</name> <operator>"="</operator> <call><name>"pqueue_find"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"sent_messages"</name></name></expr></argument>"," <argument><expr><name>"seq64be"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if" <condition>"(" <expr><name>"item"</name> <operator>"=="</operator> <name>"NULL"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"fprintf"</name><argument_list>"("<argument><expr><name>"stderr"</name></expr></argument>"," <argument><expr><literal type="string">"\"retransmit:  message %d non-existant\n\""</literal></expr></argument>"," <argument><expr><name>"seq"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><operator>"*"</operator><name>"found"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
                <return>"return" <expr><literal type="number">"0"</literal></expr>";"</return>
                "}"</block></then></if>

        <expr_stmt><expr><operator>"*"</operator><name>"found"</name> <operator>"="</operator> <literal type="number">"1"</literal></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"frag"</name> <operator>"="</operator> <operator>"("</operator><name>"hm_fragment"</name> <operator>"*"</operator><operator>")"</operator><name><name>"item"</name><operator>"-&gt;"</operator><name>"data"</name></name></expr>";"</expr_stmt>

        <if>"if" <condition>"(" <expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"is_ccs"</name></name></expr>")"</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>"header_length"</name> <operator>"="</operator> <name>"DTLS1_CCS_HEADER_LENGTH"</name></expr>";"</expr_stmt></block></then>
        <else>"else"
                <block type="pseudo"><expr_stmt><expr><name>"header_length"</name> <operator>"="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</expr_stmt></block></else></if>

        <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_buf"</name><operator>"-&gt;"</operator><name>"data"</name></name></expr></argument>"," <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"fragment"</name></name></expr></argument>"," 
                <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"msg_len"</name></name> <operator>"+"</operator> <name>"header_length"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"init_num"</name></name> <operator>"="</operator> <name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"msg_len"</name></name> <operator>"+"</operator> <name>"header_length"</name></expr>";"</expr_stmt>

        <expr_stmt><expr><call><name>"dtls1_set_message_header_int"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"type"</name></name></expr></argument>"," 
                <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"msg_len"</name></name></expr></argument>"," <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"seq"</name></name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>"," 
                <argument><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"frag_len"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <comment type="block">"/* save current state */"</comment>
        <expr_stmt><expr><name><name>"saved_state"</name><operator>"."</operator><name>"enc_write_ctx"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"enc_write_ctx"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"saved_state"</name><operator>"."</operator><name>"write_hash"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"write_hash"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"saved_state"</name><operator>"."</operator><name>"compress"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"compress"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"saved_state"</name><operator>"."</operator><name>"session"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"session"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"saved_state"</name><operator>"."</operator><name>"epoch"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_epoch"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"saved_state"</name><operator>"."</operator><name>"epoch"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_epoch"</name></name></expr>";"</expr_stmt>
        
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"retransmitting"</name></name> <operator>"="</operator> <literal type="number">"1"</literal></expr>";"</expr_stmt>
        
        <comment type="block">"/* restore state in which the message was originally sent */"</comment>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"enc_write_ctx"</name></name> <operator>"="</operator> <name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"enc_write_ctx"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"write_hash"</name></name> <operator>"="</operator> <name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"write_hash"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"compress"</name></name> <operator>"="</operator> <name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"compress"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"session"</name></name> <operator>"="</operator> <name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"session"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_epoch"</name></name> <operator>"="</operator> <name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"epoch"</name></name></expr>";"</expr_stmt>
        
        <if>"if" <condition>"("<expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"epoch"</name></name> <operator>"=="</operator> <name><name>"saved_state"</name><operator>"."</operator><name>"epoch"</name></name> <operator>"-"</operator> <literal type="number">"1"</literal></expr>")"</condition><then>
        <block>"{"
                <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><name>"save_write_sequence"</name></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"write_sequence"</name></name></expr></argument>"," <argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"write_sequence"</name></name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"write_sequence"</name></name></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"last_write_sequence"</name></name></expr></argument>"," <argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"write_sequence"</name></name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        "}"</block></then></if>
        
        <expr_stmt><expr><name>"ret"</name> <operator>"="</operator> <call><name>"dtls1_do_write"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><ternary><condition><expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"is_ccs"</name></name></expr> "?"</condition><then> 
                                                 <expr><name>"SSL3_RT_CHANGE_CIPHER_SPEC"</name></expr> </then><else>":" <expr><name>"SSL3_RT_HANDSHAKE"</name></expr></else></ternary></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        
        <comment type="block">"/* restore current state */"</comment>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"enc_write_ctx"</name></name> <operator>"="</operator> <name><name>"saved_state"</name><operator>"."</operator><name>"enc_write_ctx"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"write_hash"</name></name> <operator>"="</operator> <name><name>"saved_state"</name><operator>"."</operator><name>"write_hash"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"compress"</name></name> <operator>"="</operator> <name><name>"saved_state"</name><operator>"."</operator><name>"compress"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"session"</name></name> <operator>"="</operator> <name><name>"saved_state"</name><operator>"."</operator><name>"session"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_epoch"</name></name> <operator>"="</operator> <name><name>"saved_state"</name><operator>"."</operator><name>"epoch"</name></name></expr>";"</expr_stmt>
        
        <if>"if" <condition>"("<expr><name><name>"frag"</name><operator>"-&gt;"</operator><name>"msg_header"</name><operator>"."</operator><name>"saved_retransmit_state"</name><operator>"."</operator><name>"epoch"</name></name> <operator>"=="</operator> <name><name>"saved_state"</name><operator>"."</operator><name>"epoch"</name></name> <operator>"-"</operator> <literal type="number">"1"</literal></expr>")"</condition><then>
        <block>"{"
                <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"last_write_sequence"</name></name></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"write_sequence"</name></name></expr></argument>"," <argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"write_sequence"</name></name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"write_sequence"</name></name></expr></argument>"," <argument><expr><name>"save_write_sequence"</name></expr></argument>"," <argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"write_sequence"</name></name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        "}"</block></then></if>

        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"retransmitting"</name></name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>

        <expr_stmt><expr><operator>"("</operator><name>"void"</name><operator>")"</operator><call><name>"BIO_flush"</name><argument_list>"("<argument><expr><call><name>"SSL_get_wbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <return>"return" <expr><name>"ret"</name></expr>";"</return>
        "}"</block></function>

<comment type="block">"/* call this function when the buffered messages are no longer needed */"</comment>
<function><type><name>"void"</name></type>
<name>"dtls1_clear_record_buffer"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"pitem"</name> <modifier>"*"</modifier></type><name>"item"</name></decl>";"</decl_stmt>

        <for>"for"<control>"("<init><expr><name>"item"</name> <operator>"="</operator> <call><name>"pqueue_pop"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"sent_messages"</name></name></expr></argument>")"</argument_list></call></expr>";"</init>
                <condition><expr><name>"item"</name> <operator>"!="</operator> <name>"NULL"</name></expr>";"</condition> <incr><expr><name>"item"</name> <operator>"="</operator> <call><name>"pqueue_pop"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"sent_messages"</name></name></expr></argument>")"</argument_list></call></expr></incr>")"</control>
                <block>"{"
                <expr_stmt><expr><call><name>"dtls1_hm_fragment_free"</name><argument_list>"("<argument><expr><operator>"("</operator><name>"hm_fragment"</name> <operator>"*"</operator><operator>")"</operator><name><name>"item"</name><operator>"-&gt;"</operator><name>"data"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"pitem_free"</name><argument_list>"("<argument><expr><name>"item"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                "}"</block></for>
        "}"</block></function>


<function><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type>
<name>"dtls1_set_message_header"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"char"</name></type> <name>"mt"</name></decl></parameter>","
                        <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"len"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_off"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_len"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <comment type="block">"/* Don't change sequence numbers while listening */"</comment>
        <if>"if" <condition>"("<expr><name>"frag_off"</name> <operator>"=="</operator> <literal type="number">"0"</literal> <operator>"&amp;&amp;"</operator> <operator>"!"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"listen"</name></name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"handshake_write_seq"</name></name> <operator>"="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"next_handshake_write_seq"</name></name></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"next_handshake_write_seq"</name></name><operator>"++"</operator></expr>";"</expr_stmt>
                "}"</block></then></if>

        <expr_stmt><expr><call><name>"dtls1_set_message_header_int"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"mt"</name></expr></argument>"," <argument><expr><name>"len"</name></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"handshake_write_seq"</name></name></expr></argument>","
                <argument><expr><name>"frag_off"</name></expr></argument>"," <argument><expr><name>"frag_len"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <return>"return" <expr><name>"p"</name> <operator>"+="</operator> <name>"DTLS1_HM_HEADER_LENGTH"</name></expr>";"</return>
        "}"</block></function>


<comment type="block">"/* don't actually do the writing, wait till the MTU has been retrieved */"</comment>
<function><specifier>"static"</specifier> <type><name>"void"</name></type>
<name>"dtls1_set_message_header_int"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"char"</name></type> <name>"mt"</name></decl></parameter>","
                            <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"len"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"short"</name></type> <name>"seq_num"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_off"</name></decl></parameter>","
                            <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_len"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name><name>"struct"</name> <name>"hm_header_st"</name></name> <modifier>"*"</modifier></type><name>"msg_hdr"</name> <init>"=" <expr><operator>"&amp;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_msg_hdr"</name></name></expr></init></decl>";"</decl_stmt>

        <expr_stmt><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"type"</name></name> <operator>"="</operator> <name>"mt"</name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name> <operator>"="</operator> <name>"len"</name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name> <operator>"="</operator> <name>"seq_num"</name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_off"</name></name> <operator>"="</operator> <name>"frag_off"</name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_len"</name></name> <operator>"="</operator> <name>"frag_len"</name></expr>";"</expr_stmt>
        "}"</block></function>

<function><specifier>"static"</specifier> <type><name>"void"</name></type>
<name>"dtls1_fix_message_header"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_off"</name></decl></parameter>","
                        <parameter><decl><type><name>"unsigned"</name> <name>"long"</name></type> <name>"frag_len"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name><name>"struct"</name> <name>"hm_header_st"</name></name> <modifier>"*"</modifier></type><name>"msg_hdr"</name> <init>"=" <expr><operator>"&amp;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_msg_hdr"</name></name></expr></init></decl>";"</decl_stmt>

        <expr_stmt><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_off"</name></name> <operator>"="</operator> <name>"frag_off"</name></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_len"</name></name> <operator>"="</operator> <name>"frag_len"</name></expr>";"</expr_stmt>
        "}"</block></function>

<function><specifier>"static"</specifier> <type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type>
<name>"dtls1_write_message_header"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>"," <parameter><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name><name>"struct"</name> <name>"hm_header_st"</name></name> <modifier>"*"</modifier></type><name>"msg_hdr"</name> <init>"=" <expr><operator>"&amp;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"d1"</name><operator>"-&gt;"</operator><name>"w_msg_hdr"</name></name></expr></init></decl>";"</decl_stmt>

        <expr_stmt><expr><operator>"*"</operator><name>"p"</name><operator>"++"</operator> <operator>"="</operator> <name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"type"</name></name></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"l2n3"</name><argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr></argument>"," <argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <expr_stmt><expr><call><name>"s2n"</name><argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name></expr></argument>"," <argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"l2n3"</name><argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_off"</name></name></expr></argument>"," <argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"l2n3"</name><argument_list>"("<argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_len"</name></name></expr></argument>"," <argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <return>"return" <expr><name>"p"</name></expr>";"</return>
        "}"</block></function>

<function><type><name>"unsigned"</name> <name>"int"</name></type> 
<name>"dtls1_min_mtu"</name><parameter_list>"("<parameter><decl><type><name>"void"</name></type></decl></parameter>")"</parameter_list>
        <block>"{"
        <return>"return" <expr><operator>"("</operator><name><name>"g_probable_mtu"</name><index>"["<expr><operator>"("</operator><sizeof>"sizeof"<argument_list>"("<argument><expr><name>"g_probable_mtu"</name></expr></argument>")"</argument_list></sizeof> <operator>"/"</operator> 
                <sizeof>"sizeof"<argument_list>"("<argument><expr><name><name>"g_probable_mtu"</name><index>"["<expr><literal type="number">"0"</literal></expr>"]"</index></name></expr></argument>")"</argument_list></sizeof><operator>")"</operator> <operator>"-"</operator> <literal type="number">"1"</literal></expr>"]"</index></name><operator>")"</operator></expr>";"</return>
        "}"</block></function>

<function><specifier>"static"</specifier> <type><name>"unsigned"</name> <name>"int"</name></type> 
<name>"dtls1_guess_mtu"</name><parameter_list>"("<parameter><decl><type><name>"unsigned"</name> <name>"int"</name></type> <name>"curr_mtu"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"int"</name></type> <name>"i"</name></decl>";"</decl_stmt>

        <if>"if" <condition>"(" <expr><name>"curr_mtu"</name> <operator>"=="</operator> <literal type="number">"0"</literal></expr> ")"</condition><then>
                <block type="pseudo"><return>"return" <expr><name><name>"g_probable_mtu"</name><index>"["<expr><literal type="number">"0"</literal></expr>"]"</index></name></expr> ";"</return></block></then></if>

        <for>"for" <control>"(" <init><expr><name>"i"</name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</init> <condition><expr><name>"i"</name> <operator>"&lt;"</operator> <sizeof>"sizeof"<argument_list>"("<argument><expr><name>"g_probable_mtu"</name></expr></argument>")"</argument_list></sizeof><operator>"/"</operator><sizeof>"sizeof"<argument_list>"("<argument><expr><name><name>"g_probable_mtu"</name><index>"["<expr><literal type="number">"0"</literal></expr>"]"</index></name></expr></argument>")"</argument_list></sizeof></expr>";"</condition> <incr><expr><name>"i"</name><operator>"++"</operator></expr></incr>")"</control>
                <block type="pseudo"><if>"if" <condition>"(" <expr><name>"curr_mtu"</name> <operator>"&gt;"</operator> <name><name>"g_probable_mtu"</name><index>"["<expr><name>"i"</name></expr>"]"</index></name></expr>")"</condition><then>
                        <block type="pseudo"><return>"return" <expr><name><name>"g_probable_mtu"</name><index>"["<expr><name>"i"</name></expr>"]"</index></name></expr>";"</return></block></then></if></block></for>

        <return>"return" <expr><name>"curr_mtu"</name></expr>";"</return>
        "}"</block></function>

<function><type><name>"void"</name></type>
<name>"dtls1_get_message_header"</name><parameter_list>"("<parameter><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"data"</name></decl></parameter>"," <parameter><decl><type><name><name>"struct"</name> <name>"hm_header_st"</name></name> <modifier>"*"</modifier></type><name>"msg_hdr"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <expr_stmt><expr><call><name>"memset"</name><argument_list>"("<argument><expr><name>"msg_hdr"</name></expr></argument>"," <argument><expr><literal type="number">"0x00"</literal></expr></argument>"," <argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr>"struct" <name>"hm_header_st"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"type"</name></name> <operator>"="</operator> <operator>"*"</operator><operator>"("</operator><name>"data"</name><operator>"++"</operator><operator>")"</operator></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"n2l3"</name><argument_list>"("<argument><expr><name>"data"</name></expr></argument>"," <argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"msg_len"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <expr_stmt><expr><call><name>"n2s"</name><argument_list>"("<argument><expr><name>"data"</name></expr></argument>"," <argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"seq"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"n2l3"</name><argument_list>"("<argument><expr><name>"data"</name></expr></argument>"," <argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_off"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"n2l3"</name><argument_list>"("<argument><expr><name>"data"</name></expr></argument>"," <argument><expr><name><name>"msg_hdr"</name><operator>"-&gt;"</operator><name>"frag_len"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        "}"</block></function>

<function><type><name>"void"</name></type>
<name>"dtls1_get_ccs_header"</name><parameter_list>"("<parameter><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"data"</name></decl></parameter>"," <parameter><decl><type><name><name>"struct"</name> <name>"ccs_header_st"</name></name> <modifier>"*"</modifier></type><name>"ccs_hdr"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <expr_stmt><expr><call><name>"memset"</name><argument_list>"("<argument><expr><name>"ccs_hdr"</name></expr></argument>"," <argument><expr><literal type="number">"0x00"</literal></expr></argument>"," <argument><expr><sizeof>"sizeof"<argument_list>"("<argument><expr>"struct" <name>"ccs_header_st"</name></expr></argument>")"</argument_list></sizeof></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <expr_stmt><expr><name><name>"ccs_hdr"</name><operator>"-&gt;"</operator><name>"type"</name></name> <operator>"="</operator> <operator>"*"</operator><operator>"("</operator><name>"data"</name><operator>"++"</operator><operator>")"</operator></expr>";"</expr_stmt>
        "}"</block></function>

<function><type><name>"int"</name></type> <name>"dtls1_shutdown"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"int"</name></type> <name>"ret"</name></decl>";"</decl_stmt>
<cpp:ifndef>"#"<cpp:directive>"ifndef"</cpp:directive> <name>"OPENSSL_NO_SCTP"</name></cpp:ifndef>
        <if>"if" <condition>"("<expr><call><name>"BIO_dgram_is_sctp"</name><argument_list>"("<argument><expr><call><name>"SSL_get_wbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>")"</argument_list></call> <operator>"&amp;&amp;"</operator>
            <operator>"!"</operator><operator>"("</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"shutdown"</name></name> <operator>"&amp;"</operator> <name>"SSL_SENT_SHUTDOWN"</name><operator>")"</operator></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><name>"ret"</name> <operator>"="</operator> <call><name>"BIO_dgram_sctp_wait_for_dry"</name><argument_list>"("<argument><expr><call><name>"SSL_get_wbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <if>"if" <condition>"("<expr><name>"ret"</name> <operator>"&lt;"</operator> <literal type="number">"0"</literal></expr>")"</condition><then> <block type="pseudo"><return>"return" <expr><operator>"-"</operator><literal type="number">"1"</literal></expr>";"</return></block></then></if>

                <if>"if" <condition>"("<expr><name>"ret"</name> <operator>"=="</operator> <literal type="number">"0"</literal></expr>")"</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name>"BIO_ctrl"</name><argument_list>"("<argument><expr><call><name>"SSL_get_wbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>"," <argument><expr><name>"BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN"</name></expr></argument>"," <argument><expr><literal type="number">"1"</literal></expr></argument>"," <argument><expr><name>"NULL"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>
                "}"</block></then></if>
<cpp:endif>"#"<cpp:directive>"endif"</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>"ret"</name> <operator>"="</operator> <call><name>"ssl3_shutdown"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
<cpp:ifndef>"#"<cpp:directive>"ifndef"</cpp:directive> <name>"OPENSSL_NO_SCTP"</name></cpp:ifndef>
        <expr_stmt><expr><call><name>"BIO_ctrl"</name><argument_list>"("<argument><expr><call><name>"SSL_get_wbio"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr></argument>"," <argument><expr><name>"BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN"</name></expr></argument>"," <argument><expr><literal type="number">"0"</literal></expr></argument>"," <argument><expr><name>"NULL"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
<cpp:endif>"#"<cpp:directive>"endif"</cpp:directive></cpp:endif>
        <return>"return" <expr><name>"ret"</name></expr>";"</return>
        "}"</block></function>

<cpp:ifndef>"#"<cpp:directive>"ifndef"</cpp:directive> <name>"OPENSSL_NO_HEARTBEATS"</name></cpp:ifndef>
<function><type><name>"int"</name></type>
<name>"dtls1_process_heartbeat"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"p"</name> <init>"=" <expr><operator>"&amp;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"rrec"</name><operator>"."</operator><name>"data"</name><index>"["<expr><literal type="number">"0"</literal></expr>"]"</index></name></expr></init></decl>"," <modifier>"*"</modifier><decl><type ref="prev"/><name>"pl"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"short"</name></type> <name>"hbtype"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"int"</name></type> <name>"payload"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"int"</name></type> <name>"padding"</name> <init>"=" <expr><literal type="number">"16"</literal></expr></init></decl>";"</decl_stmt> <comment type="block">"/* Use minimum padding */"</comment>

        <if>"if"<condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name></expr>")"</condition><then><block><expr_stmt><expr><call><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name><argument_list>"("<argument><expr><literal type="number">"0"</literal></expr></argument>","<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"version"</name></name></expr></argument>","<argument><expr><name>"TLS1_RT_HEARTBEAT"</name></expr></argument>","<argument><expr><operator>"&amp;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"rrec"</name><operator>"."</operator><name>"data"</name><index>"["<expr><literal type="number">"0"</literal></expr>"]"</index></name></expr></argument>","<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"rrec"</name><operator>"."</operator><name>"length"</name></name></expr></argument>","<argument><expr><name>"s"</name></expr></argument>","<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback_arg"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if><comment type="block">"/* Read type and payload length first */"</comment>
        <if>"if"<condition>"("<expr><literal type="number">"1"</literal><operator>"+"</operator><literal type="number">"2"</literal><operator>"+"</operator><literal type="number">"16"</literal><operator>"&gt;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"rrec"</name><operator>"."</operator><name>"length"</name></name></expr>")"</condition><then><block><return>"return"<expr><literal type="number">"0"</literal></expr>";"</return></block></then></if><comment type="line">"/* silently discard */"</comment><expr_stmt><expr><name>"hbtype"</name> <operator>"="</operator> <operator>"*"</operator><name>"p"</name><operator>"++"</operator></expr>";"</expr_stmt>
        <expr_stmt><expr><call><name>"n2s"</name><argument_list>"("<argument><expr><name>"p"</name></expr></argument>"," <argument><expr><name>"payload"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if"<condition>"("<expr><literal type="number">"1"</literal><operator>"+"</operator><literal type="number">"2"</literal><operator>"+"</operator><name>"payload"</name><operator>"+"</operator><literal type="number">"16"</literal><operator>"&gt;"</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"s3"</name><operator>"-&gt;"</operator><name>"rrec"</name><operator>"."</operator><name>"length"</name></name></expr>")"</condition><then><block><return>"return"<expr><literal type="number">"0"</literal></expr>";"</return></block></then></if><comment type="line">"/* silently discard per RFC 6520 sec. 4 */"</comment><expr_stmt><expr><name>"pl"</name><operator>"="</operator><name>"p"</name></expr>";"</expr_stmt>

        <if>"if" <condition>"("<expr><name>"hbtype"</name> <operator>"=="</operator> <name>"TLS1_HB_REQUEST"</name></expr>")"</condition><then>
                <block>"{"
                <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"buffer"</name></decl>"," <modifier>"*"</modifier><decl><type ref="prev"/><name>"bp"</name></decl>";"</decl_stmt>
                <decl_stmt><decl><type><name>"unsigned"</name><name>"int"</name></type><name>"write_length"</name><init>"="<expr><literal type="number">"1"</literal><comment type="line">"/* heartbeat type */"</comment><operator>"+"</operator><literal type="number">"2"</literal><comment type="line">"/* heartbeat length */"</comment><operator>"+"</operator><name>"payload"</name><operator>"+"</operator><name>"padding"</name></expr></init></decl>";"</decl_stmt><decl_stmt><decl><type><name>"int"</name></type> <name>"r"</name></decl>";"</decl_stmt>

                <if>"if"<condition>"("<expr><name>"write_length"</name><operator>"&gt;"</operator><name>"SSL3_RT_MAX_PLAIN_LENGTH"</name></expr>")"</condition><then><block><return>"return"<expr><literal type="number">"0"</literal></expr>";"</return></block></then></if><comment type="block">"/* Allocate memory for the response, size is 1 byte
                 * message type, plus 2 bytes payload length, plus
                 * payload, plus padding
                 */"</comment>
                <expr_stmt><expr><name>"buffer"</name> <operator>"="</operator> <call><name>"OPENSSL_malloc"</name><argument_list>"("<argument><expr><name>"write_length"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name>"bp"</name> <operator>"="</operator> <name>"buffer"</name></expr>";"</expr_stmt>

                <comment type="block">"/* Enter response type, length and copy payload */"</comment>
                <expr_stmt><expr><operator>"*"</operator><name>"bp"</name><operator>"++"</operator> <operator>"="</operator> <name>"TLS1_HB_RESPONSE"</name></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"s2n"</name><argument_list>"("<argument><expr><name>"payload"</name></expr></argument>"," <argument><expr><name>"bp"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><call><name>"memcpy"</name><argument_list>"("<argument><expr><name>"bp"</name></expr></argument>"," <argument><expr><name>"pl"</name></expr></argument>"," <argument><expr><name>"payload"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name>"bp"</name> <operator>"+="</operator> <name>"payload"</name></expr>";"</expr_stmt>
                <comment type="block">"/* Random padding */"</comment>
                <expr_stmt><expr><call><name>"RAND_pseudo_bytes"</name><argument_list>"("<argument><expr><name>"bp"</name></expr></argument>"," <argument><expr><name>"padding"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <expr_stmt><expr><name>"r"</name> <operator>"="</operator> <call><name>"dtls1_write_bytes"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"TLS1_RT_HEARTBEAT"</name></expr></argument>"," <argument><expr><name>"buffer"</name></expr></argument>"," <argument><expr><name>"write_length"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <if>"if" <condition>"("<expr><name>"r"</name> <operator>"&gt;="</operator> <literal type="number">"0"</literal> <operator>"&amp;&amp;"</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name></expr>")"</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name><argument_list>"("<argument><expr><literal type="number">"1"</literal></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"version"</name></name></expr></argument>"," <argument><expr><name>"TLS1_RT_HEARTBEAT"</name></expr></argument>","
                                <argument><expr><name>"buffer"</name></expr></argument>"," <argument><expr><name>"write_length"</name></expr></argument>","
                                <argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback_arg"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>

                <expr_stmt><expr><call><name>"OPENSSL_free"</name><argument_list>"("<argument><expr><name>"buffer"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <if>"if" <condition>"("<expr><name>"r"</name> <operator>"&lt;"</operator> <literal type="number">"0"</literal></expr>")"</condition><then>
                        <block type="pseudo"><return>"return" <expr><name>"r"</name></expr>";"</return></block></then></if>
                "}"</block></then>
        <elseif>"else" <if>"if" <condition>"("<expr><name>"hbtype"</name> <operator>"=="</operator> <name>"TLS1_HB_RESPONSE"</name></expr>")"</condition><then>
                <block>"{"
                <decl_stmt><decl><type><name>"unsigned"</name> <name>"int"</name></type> <name>"seq"</name></decl>";"</decl_stmt>

                <comment type="block">"/* We only send sequence numbers (2 bytes unsigned int),
                 * and 16 random bytes, so we just try to read the
                 * sequence number */"</comment>
                <expr_stmt><expr><call><name>"n2s"</name><argument_list>"("<argument><expr><name>"pl"</name></expr></argument>"," <argument><expr><name>"seq"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

                <if>"if" <condition>"("<expr><name>"payload"</name> <operator>"=="</operator> <literal type="number">"18"</literal> <operator>"&amp;&amp;"</operator> <name>"seq"</name> <operator>"=="</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"tlsext_hb_seq"</name></name></expr>")"</condition><then>
                        <block>"{"
                        <expr_stmt><expr><call><name>"dtls1_stop_timer"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"tlsext_hb_seq"</name></name><operator>"++"</operator></expr>";"</expr_stmt>
                        <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"tlsext_hb_pending"</name></name> <operator>"="</operator> <literal type="number">"0"</literal></expr>";"</expr_stmt>
                        "}"</block></then></if>
                "}"</block></then></if></elseif></if>

        <return>"return" <expr><literal type="number">"0"</literal></expr>";"</return>
        "}"</block></function>

<function><type><name>"int"</name></type>
<name>"dtls1_heartbeat"</name><parameter_list>"("<parameter><decl><type><name>"SSL"</name> <modifier>"*"</modifier></type><name>"s"</name></decl></parameter>")"</parameter_list>
        <block>"{"
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"char"</name> <modifier>"*"</modifier></type><name>"buf"</name></decl>"," <modifier>"*"</modifier><decl><type ref="prev"/><name>"p"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"int"</name></type> <name>"ret"</name></decl>";"</decl_stmt>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"int"</name></type> <name>"payload"</name> <init>"=" <expr><literal type="number">"18"</literal></expr></init></decl>";"</decl_stmt> <comment type="block">"/* Sequence number + random bytes */"</comment>
        <decl_stmt><decl><type><name>"unsigned"</name> <name>"int"</name></type> <name>"padding"</name> <init>"=" <expr><literal type="number">"16"</literal></expr></init></decl>";"</decl_stmt> <comment type="block">"/* Use minimum padding */"</comment>

        <comment type="block">"/* Only send if peer supports and accepts HB requests... */"</comment>
        <if>"if" <condition>"("<expr><operator>"!"</operator><operator>"("</operator><name><name>"s"</name><operator>"-&gt;"</operator><name>"tlsext_heartbeat"</name></name> <operator>"&amp;"</operator> <name>"SSL_TLSEXT_HB_ENABLED"</name><operator>")"</operator> <operator>"||"</operator>
            <name><name>"s"</name><operator>"-&gt;"</operator><name>"tlsext_heartbeat"</name></name> <operator>"&amp;"</operator> <name>"SSL_TLSEXT_HB_DONT_SEND_REQUESTS"</name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_HEARTBEAT"</name></expr></argument>","<argument><expr><name>"SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <return>"return" <expr><operator>"-"</operator><literal type="number">"1"</literal></expr>";"</return>
                "}"</block></then></if>

        <comment type="block">"/* ...and there is none in flight yet... */"</comment>
        <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"tlsext_hb_pending"</name></name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_HEARTBEAT"</name></expr></argument>","<argument><expr><name>"SSL_R_TLS_HEARTBEAT_PENDING"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <return>"return" <expr><operator>"-"</operator><literal type="number">"1"</literal></expr>";"</return>
                "}"</block></then></if>

        <comment type="block">"/* ...and no handshake in progress. */"</comment>
        <if>"if" <condition>"("<expr><call><name>"SSL_in_init"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call> <operator>"||"</operator> <name><name>"s"</name><operator>"-&gt;"</operator><name>"in_handshake"</name></name></expr>")"</condition><then>
                <block>"{"
                <expr_stmt><expr><call><name>"SSLerr"</name><argument_list>"("<argument><expr><name>"SSL_F_DTLS1_HEARTBEAT"</name></expr></argument>","<argument><expr><name>"SSL_R_UNEXPECTED_MESSAGE"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <return>"return" <expr><operator>"-"</operator><literal type="number">"1"</literal></expr>";"</return>
                "}"</block></then></if>

        <comment type="block">"/* Check if padding is too long, payload and padding
         * must not exceed 2^14 - 3 = 16381 bytes in total.
         */"</comment>
        <expr_stmt><expr><call><name>"OPENSSL_assert"</name><argument_list>"("<argument><expr><name>"payload"</name> <operator>"+"</operator> <name>"padding"</name> <operator>"&lt;="</operator> <literal type="number">"16381"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <comment type="block">"/* Create HeartBeat message, we just use a sequence number
         * as payload to distuingish different messages and add
         * some random stuff.
         *  - Message Type, 1 byte
         *  - Payload Length, 2 bytes (unsigned int)
         *  - Payload, the sequence number (2 bytes uint)
         *  - Payload, random bytes (16 bytes uint)
         *  - Padding
         */"</comment>
        <expr_stmt><expr><name>"buf"</name> <operator>"="</operator> <call><name>"OPENSSL_malloc"</name><argument_list>"("<argument><expr><literal type="number">"1"</literal> <operator>"+"</operator> <literal type="number">"2"</literal> <operator>"+"</operator> <name>"payload"</name> <operator>"+"</operator> <name>"padding"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"p"</name> <operator>"="</operator> <name>"buf"</name></expr>";"</expr_stmt>
        <comment type="block">"/* Message Type */"</comment>
        <expr_stmt><expr><operator>"*"</operator><name>"p"</name><operator>"++"</operator> <operator>"="</operator> <name>"TLS1_HB_REQUEST"</name></expr>";"</expr_stmt>
        <comment type="block">"/* Payload length (18 bytes here) */"</comment>
        <expr_stmt><expr><call><name>"s2n"</name><argument_list>"("<argument><expr><name>"payload"</name></expr></argument>"," <argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <comment type="block">"/* Sequence number */"</comment>
        <expr_stmt><expr><call><name>"s2n"</name><argument_list>"("<argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"tlsext_hb_seq"</name></name></expr></argument>"," <argument><expr><name>"p"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <comment type="block">"/* 16 random bytes */"</comment>
        <expr_stmt><expr><call><name>"RAND_pseudo_bytes"</name><argument_list>"("<argument><expr><name>"p"</name></expr></argument>"," <argument><expr><literal type="number">"16"</literal></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <expr_stmt><expr><name>"p"</name> <operator>"+="</operator> <literal type="number">"16"</literal></expr>";"</expr_stmt>
        <comment type="block">"/* Random padding */"</comment>
        <expr_stmt><expr><call><name>"RAND_pseudo_bytes"</name><argument_list>"("<argument><expr><name>"p"</name></expr></argument>"," <argument><expr><name>"padding"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <expr_stmt><expr><name>"ret"</name> <operator>"="</operator> <call><name>"dtls1_write_bytes"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name>"TLS1_RT_HEARTBEAT"</name></expr></argument>"," <argument><expr><name>"buf"</name></expr></argument>"," <argument><expr><literal type="number">"3"</literal> <operator>"+"</operator> <name>"payload"</name> <operator>"+"</operator> <name>"padding"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
        <if>"if" <condition>"("<expr><name>"ret"</name> <operator>"&gt;="</operator> <literal type="number">"0"</literal></expr>")"</condition><then>
                <block>"{"
                <if>"if" <condition>"("<expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name></expr>")"</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback"</name></name><argument_list>"("<argument><expr><literal type="number">"1"</literal></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"version"</name></name></expr></argument>"," <argument><expr><name>"TLS1_RT_HEARTBEAT"</name></expr></argument>","
                                <argument><expr><name>"buf"</name></expr></argument>"," <argument><expr><literal type="number">"3"</literal> <operator>"+"</operator> <name>"payload"</name> <operator>"+"</operator> <name>"padding"</name></expr></argument>","
                                <argument><expr><name>"s"</name></expr></argument>"," <argument><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"msg_callback_arg"</name></name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt></block></then></if>

                <expr_stmt><expr><call><name>"dtls1_start_timer"</name><argument_list>"("<argument><expr><name>"s"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>
                <expr_stmt><expr><name><name>"s"</name><operator>"-&gt;"</operator><name>"tlsext_hb_pending"</name></name> <operator>"="</operator> <literal type="number">"1"</literal></expr>";"</expr_stmt>
                "}"</block></then></if>

        <expr_stmt><expr><call><name>"OPENSSL_free"</name><argument_list>"("<argument><expr><name>"buf"</name></expr></argument>")"</argument_list></call></expr>";"</expr_stmt>

        <return>"return" <expr><name>"ret"</name></expr>";"</return>
        "}"</block></function>
<cpp:endif>"#"<cpp:directive>"endif"</cpp:directive></cpp:endif></unit>
