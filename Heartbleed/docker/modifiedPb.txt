 child {
    kind: comment
    text: "/* ssl/d1_both.c */"
  }
  child {
    kind: comment
    text: "/* 
 * DTLS implementation written by Nagendra Modadugu
 * (nagendra@cs.stanford.edu) for the OpenSSL project 2005.  
 */"
  }
  child {
    kind: comment
    text: "/* ====================================================================
 * Copyright (c) 1998-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    \"This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)\"
 *
 * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called \"OpenSSL\"
 *    nor may \"OpenSSL\" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    \"This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)\"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */"
  }
  child {
    kind: comment
    text: "/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    \"This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)\"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    \"This product includes software written by Tim Hudson (tjh@cryptsoft.com)\"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */"
  }
  child {
    kind: include
    text: "#"
    child {
      kind: directive
      text: "include"
    }
    child {
      kind: file
      text: "&lt;limits.h&gt;"
    }
  }
  child {
    kind: include
    text: "#"
    child {
      kind: directive
      text: "include"
    }
    child {
      kind: file
      text: "&lt;string.h&gt;"
    }
  }
  child {
    kind: include
    text: "#"
    child {
      kind: directive
      text: "include"
    }
    child {
      kind: file
      text: "&lt;stdio.h&gt;"
    }
  }
  child {
    kind: include
    text: "#"
    child {
      kind: directive
      text: "include"
    }
    child {
      kind: file
      text: "\"ssl_locl.h\""
    }
  }
  child {
    kind: include
    text: "#"
    child {
      kind: directive
      text: "include"
    }
    child {
      kind: file
      text: "&lt;openssl/buffer.h&gt;"
    }
  }
  child {
    kind: include
    text: "#"
    child {
      kind: directive
      text: "include"
    }
    child {
      kind: file
      text: "&lt;openssl/rand.h&gt;"
    }
  }
  child {
    kind: include
    text: "#"
    child {
      kind: directive
      text: "include"
    }
    child {
      kind: file
      text: "&lt;openssl/objects.h&gt;"
    }
  }
  child {
    kind: include
    text: "#"
    child {
      kind: directive
      text: "include"
    }
    child {
      kind: file
      text: "&lt;openssl/evp.h&gt;"
    }
  }
  child {
    kind: include
    text: "#"
    child {
      kind: directive
      text: "include"
    }
    child {
      kind: file
      text: "&lt;openssl/x509.h&gt;"
    }
  }
  child {
    kind: define
    text: "#"
    child {
      kind: directive
      text: "define"
    }
    child {
      kind: macro
      child {
        kind: name
        text: "RSMBLY_BITMASK_SIZE"
      }
      child {
        kind: parameter_list
        text: "("
        child {
          kind: parameter
          child {
            kind: type
            child {
              kind: name
              text: "msg_len"
            }
          }
          }        
        text: ")"
      }
    }
    child {
      kind: value
      text: "(((msg_len) + 7) / 8)"
    }
  }
  child {
    kind: define
    text: "#"
    child {
      kind: directive
      text: "define"
    }
    child {
      kind: macro
      child {
        kind: name
        text: "RSMBLY_BITMASK_MARK"
      }
      child {
        kind: parameter_list
        text: "("
        child {
          kind: parameter
          child {
            kind: type
            child {
              kind: name
              text: "bitmask"
            }
          }
          }        
        text: ","
        child {
          kind: parameter
          child {
            kind: type
            child {
              kind: name
              text: "start"
            }
          }
          }        
        text: ","
        child {
          kind: parameter
          child {
            kind: type
            child {
              kind: name
              text: "end"
            }
          }
          }        
        text: ")"
      }
    }
    child {
      kind: value
      text: "{ \\
                        if ((end) - (start) &lt;= 8) { \\
                                long ii; \\
                                for (ii = (start); ii &lt; (end); ii++) bitmask[((ii) &gt;&gt; 3)] |= (1 &lt;&lt; ((ii) &amp; 7)); \\
                        } else { \\
                                long ii; \\
                                bitmask[((start) &gt;&gt; 3)] |= bitmask_start_values[((start) &amp; 7)]; \\
                                for (ii = (((start) &gt;&gt; 3) + 1); ii &lt; ((((end) - 1)) &gt;&gt; 3); ii++) bitmask[ii] = 0xff; \\
                                bitmask[(((end) - 1) &gt;&gt; 3)] |= bitmask_end_values[((end) &amp; 7)]; \\
                        } }"
    }
  }
  child {
    kind: define
    text: "#"
    child {
      kind: directive
      text: "define"
    }
    child {
      kind: macro
      child {
        kind: name
        text: "RSMBLY_BITMASK_IS_COMPLETE"
      }
      child {
        kind: parameter_list
        text: "("
        child {
          kind: parameter
          child {
            kind: type
            child {
              kind: name
              text: "bitmask"
            }
          }
          }        
        text: ","
        child {
          kind: parameter
          child {
            kind: type
            child {
              kind: name
              text: "msg_len"
            }
          }
          }        
        text: ","
        child {
          kind: parameter
          child {
            kind: type
            child {
              kind: name
              text: "is_complete"
            }
          }
          }        
        text: ")"
      }
    }
    child {
      kind: value
      text: "{ \\
                        long ii; \\
                        OPENSSL_assert((msg_len) &gt; 0); \\
                        is_complete = 1; \\
                        if (bitmask[(((msg_len) - 1) &gt;&gt; 3)] != bitmask_end_values[((msg_len) &amp; 7)]) is_complete = 0; \\
                        if (is_complete) for (ii = (((msg_len) - 1) &gt;&gt; 3) - 1; ii &gt;= 0 ; ii--) \\
                                if (bitmask[ii] != 0xff) { is_complete = 0; break; } }"
    }
  }
  child {
    kind: if
    text: "#"
    child {
      kind: directive
      text: "if"
    }
    child {
      kind: expr
      child {
        kind: literal
        text: "0"
        literal {
          type: "number"
        }
      }
    }
  }
  child {
    kind: define
    text: "#"
    child {
      kind: directive
      text: "define"
    }
    child {
      kind: macro
      child {
        kind: name
        text: "RSMBLY_BITMASK_PRINT"
      }
      child {
        kind: parameter_list
        text: "("
        child {
          kind: parameter
          child {
            kind: type
            child {
              kind: name
              text: "bitmask"
            }
          }
          }        
        text: ","
        child {
          kind: parameter
          child {
            kind: type
            child {
              kind: name
              text: "msg_len"
            }
          }
          }        
        text: ")"
      }
    }
    child {
      kind: value
      text: "{ \\
                        long ii; \\
                        printf(\"bitmask: \"); for (ii = 0; ii &lt; (msg_len); ii++) \\
                        printf(\"%d \", (bitmask[ii &gt;&gt; 3] &amp; (1 &lt;&lt; (ii &amp; 7))) &gt;&gt; (ii &amp; 7)); \\
                        printf(\"\\n\"); }"
    }
  }
  child {
    kind: endif
    text: "#"
    child {
      kind: directive
      text: "endif"
    }
  }
  child {
    kind: decl_stmt
    child {
      kind: decl
      child {
        kind: specifier
        text: "static"
      }
      child {
        kind: type
        child {
          kind: name
          text: "unsigned"
        }
        child {
          kind: name
          text: "char"
        }
      }
      child {
        kind: name
        child {
          kind: name
          text: "bitmask_start_values"
        }
        child {
          kind: index
          text: "[]"
        }
      }
      child {
        kind: init
        text: "="
        child {
          kind: expr
          child {
            kind: block
            text: "{"
            child {
              kind: expr
              child {
                kind: literal
                text: "0xff"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0xfe"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0xfc"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0xf8"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0xf0"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0xe0"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0xc0"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0x80"
                literal {
                  type: "number"
                }
              }
              }        
            text: "}"
          }
        }
      }
      }        
    text: ";"
  }
  child {
    kind: decl_stmt
    child {
      kind: decl
      child {
        kind: specifier
        text: "static"
      }
      child {
        kind: type
        child {
          kind: name
          text: "unsigned"
        }
        child {
          kind: name
          text: "char"
        }
      }
      child {
        kind: name
        child {
          kind: name
          text: "bitmask_end_values"
        }
        child {
          kind: index
          text: "[]"
        }
      }
      child {
        kind: init
        text: "="
        child {
          kind: expr
          child {
            kind: block
            text: "{"
            child {
              kind: expr
              child {
                kind: literal
                text: "0xff"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0x01"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0x03"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0x07"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0x0f"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0x1f"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0x3f"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "0x7f"
                literal {
                  type: "number"
                }
              }
              }        
            text: "}"
          }
        }
      }
      }        
    text: ";"
  }
  child {
    kind: comment
    text: "/* XDTLS:  figure out the right values */"
  }
  child {
    kind: decl_stmt
    child {
      kind: decl
      child {
        kind: specifier
        text: "static"
      }
      child {
        kind: type
        child {
          kind: name
          text: "unsigned"
        }
        child {
          kind: name
          text: "int"
        }
      }
      child {
        kind: name
        child {
          kind: name
          text: "g_probable_mtu"
        }
        child {
          kind: index
          text: "[]"
        }
      }
      child {
        kind: init
        text: "="
        child {
          kind: expr
          child {
            kind: block
            text: "{"
            child {
              kind: expr
              child {
                kind: literal
                text: "1500"
                literal {
                  type: "number"
                }
              }
              child {
                kind: operator
                text: "-"
              }
              child {
                kind: literal
                text: "28"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "512"
                literal {
                  type: "number"
                }
              }
              child {
                kind: operator
                text: "-"
              }
              child {
                kind: literal
                text: "28"
                literal {
                  type: "number"
                }
              }
              }        
            text: ","
            child {
              kind: expr
              child {
                kind: literal
                text: "256"
                literal {
                  type: "number"
                }
              }
              child {
                kind: operator
                text: "-"
              }
              child {
                kind: literal
                text: "28"
                literal {
                  type: "number"
                }
              }
              }        
            text: "}"
          }
        }
      }
      }        
    text: ";"
  }
  child {
    kind: function_decl
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "unsigned"
      }
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_guess_mtu"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "curr_mtu"
          }
        }
        }        
      text: ")"
      }        
    text: ";"
  }
  child {
    kind: function_decl
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "void"
      }
    }
    child {
      kind: name
      text: "dtls1_fix_message_header"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_off"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_len"
          }
        }
        }        
      text: ")"
      }        
    text: ";"
  }
  child {
    kind: function_decl
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "unsigned"
      }
      child {
        kind: name
        text: "char"
      }
      child {
        kind: modifier
        text: "*"
      }
    }
    child {
      kind: name
      text: "dtls1_write_message_header"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "p"
          }
        }
        }        
      text: ")"
      }        
    text: ";"
  }
  child {
    kind: function_decl
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "void"
      }
    }
    child {
      kind: name
      text: "dtls1_set_message_header_int"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
          }
          child {
            kind: name
            text: "mt"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "len"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "short"
            }
          }
          child {
            kind: name
            text: "seq_num"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_off"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_len"
          }
        }
        }        
      text: ")"
      }        
    text: ";"
  }
  child {
    kind: function_decl
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "long"
      }
    }
    child {
      kind: name
      text: "dtls1_get_message_fragment"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "st1"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "stn"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "max"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "ok"
          }
        }
        }        
      text: ")"
      }        
    text: ";"
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "hm_fragment"
      }
      child {
        kind: modifier
        text: "*"
      }
    }
    child {
      kind: name
      text: "dtls1_hm_fragment_new"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_len"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "reassembly"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "hm_fragment"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "frag"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: name
                text: "NULL"
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "buf"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: name
                text: "NULL"
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "bitmask"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: name
                text: "NULL"
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "frag"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "hm_fragment"
          }
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: call
            child {
              kind: name
              text: "OPENSSL_malloc"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: sizeof
                    text: "sizeof"
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "hm_fragment"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: name
                  text: "NULL"
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "frag_len"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "buf"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: operator
                  text: "("
                }
                child {
                  kind: name
                  text: "unsigned"
                }
                child {
                  kind: name
                  text: "char"
                }
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: operator
                  text: ")"
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_malloc"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "frag_len"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "buf"
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: name
                    text: "NULL"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "OPENSSL_free"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "frag"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "NULL"
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
              }        
            text: "}"
          }
        }
      }
      child {
        kind: comment
        text: "/* zero length fragment gets zero frag-&gt;fragment */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "fragment"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "buf"
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Initialize reassembly bitmask if necessary */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "reassembly"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "bitmask"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: operator
                  text: "("
                }
                child {
                  kind: name
                  text: "unsigned"
                }
                child {
                  kind: name
                  text: "char"
                }
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: operator
                  text: ")"
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_malloc"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: call
                          child {
                            kind: name
                            text: "RSMBLY_BITMASK_SIZE"
                          }
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "frag_len"
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "bitmask"
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: name
                    text: "NULL"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: if
                    text: "if"
                    child {
                      kind: condition
                      text: "("
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "buf"
                        }
                        child {
                          kind: operator
                          text: "!="
                        }
                        child {
                          kind: name
                          text: "NULL"
                        }
                        }        
                      text: ")"
                    }
                    child {
                      kind: then
                      child {
                        kind: block
                        child {
                          kind: expr_stmt
                          child {
                            kind: expr
                            child {
                              kind: call
                              child {
                                kind: name
                                text: "OPENSSL_free"
                              }
                              child {
                                kind: argument_list
                                text: "("
                                child {
                                  kind: argument
                                  child {
                                    kind: expr
                                    child {
                                      kind: name
                                      text: "buf"
                                    }
                                  }
                                  }        
                                text: ")"
                              }
                            }
                            }        
                          text: ";"
                        }
                      }
                    }
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "OPENSSL_free"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "frag"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "NULL"
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "memset"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "bitmask"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: call
                          child {
                            kind: name
                            text: "RSMBLY_BITMASK_SIZE"
                          }
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "frag_len"
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "reassembly"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "bitmask"
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "frag"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "void"
      }
    }
    child {
      kind: name
      text: "dtls1_hm_fragment_free"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "hm_fragment"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "frag"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "frag"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "msg_header"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "is_ccs"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "EVP_CIPHER_CTX_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "frag"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_header"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "saved_retransmit_state"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "enc_write_ctx"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "EVP_MD_CTX_destroy"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "frag"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_header"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "saved_retransmit_state"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "write_hash"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "frag"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "fragment"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "frag"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "fragment"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "frag"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "reassembly"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "frag"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "reassembly"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "OPENSSL_free"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "frag"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: comment
    text: "/* send s-&gt;init_buf in records of type 'type' (SSL3_RT_HANDSHAKE or SSL3_RT_CHANGE_CIPHER_SPEC) */"
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_do_write"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "type"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "ret"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "curr_mtu"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "len"
          }
          }        
        text: ","
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "frag_off"
          }
          }        
        text: ","
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "mac_size"
          }
          }        
        text: ","
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "blocksize"
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* AHA!  Figure out the MTU, and stick to the right size */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "d1"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "mtu"
              }
            }
            child {
              kind: operator
              text: "&lt;"
            }
            child {
              kind: call
              child {
                kind: name
                text: "dtls1_min_mtu"
              }
              child {
                kind: argument_list
                text: "()"
              }
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: operator
              text: "("
            }
            child {
              kind: call
              child {
                kind: name
                text: "SSL_get_options"
              }
              child {
                kind: argument_list
                text: "("
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "s"
                    }
                  }
                  }        
                text: ")"
              }
            }
            child {
              kind: operator
              text: "&amp;"
            }
            child {
              kind: name
              text: "SSL_OP_NO_QUERY_MTU"
            }
            child {
              kind: operator
              text: ")"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "d1"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "mtu"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "BIO_ctrl"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: call
                          child {
                            kind: name
                            text: "SSL_get_wbio"
                          }
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "s"
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "BIO_CTRL_DGRAM_QUERY_MTU"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "NULL"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: comment
              text: "/* I've seen the kernel return bogus numbers when it doesn't know
                 * (initial write), so just make sure we have a reasonable number */"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "d1"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "mtu"
                    }
                  }
                  child {
                    kind: operator
                    text: "&lt;"
                  }
                  child {
                    kind: call
                    child {
                      kind: name
                      text: "dtls1_min_mtu"
                    }
                    child {
                      kind: argument_list
                      text: "()"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "d1"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "mtu"
                        }
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: literal
                        text: "0"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "d1"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "mtu"
                        }
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "dtls1_guess_mtu"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "d1"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "mtu"
                                }
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "BIO_ctrl"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: call
                                child {
                                  kind: name
                                  text: "SSL_get_wbio"
                                }
                                child {
                                  kind: argument_list
                                  text: "("
                                  child {
                                    kind: argument
                                    child {
                                      kind: expr
                                      child {
                                        kind: name
                                        text: "s"
                                      }
                                    }
                                    }        
                                  text: ")"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "BIO_CTRL_DGRAM_SET_MTU"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "d1"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "mtu"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "NULL"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
              }        
            text: "}"
          }
        }
      }
      child {
        kind: if
        text: "#"
        child {
          kind: directive
          text: "if"
        }
        child {
          kind: expr
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
        }
        }
      text: "mtu = s-&gt;d1-&gt;mtu;

        fprintf(stderr, \"using MTU = %d\\n\", mtu);

        mtu -= (DTLS1_HM_HEADER_LENGTH + DTLS1_RT_HEADER_LENGTH);

        curr_mtu = mtu - BIO_wpending(SSL_get_wbio(s));

        if ( curr_mtu &gt; 0)
                mtu = curr_mtu;
        else if ( ( ret = BIO_flush(SSL_get_wbio(s))) &lt;= 0)
                return ret;

        if ( BIO_wpending(SSL_get_wbio(s)) + s-&gt;init_num &gt;= mtu)
                {
                ret = BIO_flush(SSL_get_wbio(s));
                if ( ret &lt;= 0)
                        return ret;
                mtu = s-&gt;d1-&gt;mtu - (DTLS1_HM_HEADER_LENGTH + DTLS1_RT_HEADER_LENGTH);
                }"
      child {
        kind: endif
        text: "#"
        child {
          kind: directive
          text: "endif"
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "OPENSSL_assert"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "d1"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "mtu"
                    }
                  }
                  child {
                    kind: operator
                    text: "&gt;="
                  }
                  child {
                    kind: call
                    child {
                      kind: name
                      text: "dtls1_min_mtu"
                    }
                    child {
                      kind: argument_list
                      text: "()"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* should have something reasonable now */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "init_off"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: literal
              text: "0"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: name
              text: "type"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "SSL3_RT_HANDSHAKE"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_assert"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "init_num"
                          }
                        }
                        child {
                          kind: operator
                          text: "=="
                        }
                        child {
                          kind: operator
                          text: "("
                        }
                        child {
                          kind: name
                          text: "int"
                        }
                        child {
                          kind: operator
                          text: ")"
                        }
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "d1"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "w_msg_hdr"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "msg_len"
                          }
                        }
                        child {
                          kind: operator
                          text: "+"
                        }
                        child {
                          kind: name
                          text: "DTLS1_HM_HEADER_LENGTH"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "write_hash"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "mac_size"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "EVP_MD_CTX_size"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "write_hash"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
        child {
          kind: else
          text: "else"
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "mac_size"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "enc_write_ctx"
              }
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: operator
              text: "("
            }
            child {
              kind: call
              child {
                kind: name
                text: "EVP_CIPHER_mode"
              }
              child {
                kind: argument_list
                text: "("
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      child {
                        kind: name
                        text: "s"
                      }
                      child {
                        kind: operator
                        text: "-&gt;"
                      }
                      child {
                        kind: name
                        text: "enc_write_ctx"
                      }
                      child {
                        kind: operator
                        text: "-&gt;"
                      }
                      child {
                        kind: name
                        text: "cipher"
                      }
                    }
                  }
                  }        
                text: ")"
              }
            }
            child {
              kind: operator
              text: "&amp;"
            }
            child {
              kind: name
              text: "EVP_CIPH_CBC_MODE"
            }
            child {
              kind: operator
              text: ")"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "blocksize"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "2"
                  literal {
                    type: "number"
                  }
                }
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "EVP_CIPHER_block_size"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "enc_write_ctx"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "cipher"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
        child {
          kind: else
          text: "else"
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "blocksize"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "frag_off"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: while
        text: "while"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "init_num"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: block
          text: "{"
          child {
            kind: expr_stmt
            child {
              kind: expr
              child {
                kind: name
                text: "curr_mtu"
              }
              child {
                kind: operator
                text: "="
              }
              child {
                kind: name
                child {
                  kind: name
                  text: "s"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "d1"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "mtu"
                }
              }
              child {
                kind: operator
                text: "-"
              }
              child {
                kind: call
                child {
                  kind: name
                  text: "BIO_wpending"
                }
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "SSL_get_wbio"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "s"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                    }
                    }        
                  text: ")"
                }
              }
              child {
                kind: operator
                text: "-"
              }
              child {
                kind: name
                text: "DTLS1_RT_HEADER_LENGTH"
              }
              child {
                kind: operator
                text: "-"
              }
              child {
                kind: name
                text: "mac_size"
              }
              child {
                kind: operator
                text: "-"
              }
              child {
                kind: name
                text: "blocksize"
              }
              }        
            text: ";"
          }
          child {
            kind: if
            text: "if"
            child {
              kind: condition
              text: "("
              child {
                kind: expr
                child {
                  kind: name
                  text: "curr_mtu"
                }
                child {
                  kind: operator
                  text: "&lt;="
                }
                child {
                  kind: name
                  text: "DTLS1_HM_HEADER_LENGTH"
                }
                }        
              text: ")"
            }
            child {
              kind: then
              child {
                kind: block
                text: "{"
                child {
                  kind: comment
                  text: "/* grr.. we could get an error if MTU picked was wrong */"
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "ret"
                    }
                    child {
                      kind: operator
                      text: "="
                    }
                    child {
                      kind: call
                      child {
                        kind: name
                        text: "BIO_flush"
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: call
                              child {
                                kind: name
                                text: "SSL_get_wbio"
                              }
                              child {
                                kind: argument_list
                                text: "("
                                child {
                                  kind: argument
                                  child {
                                    kind: expr
                                    child {
                                      kind: name
                                      text: "s"
                                    }
                                  }
                                  }        
                                text: ")"
                              }
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: if
                  text: "if"
                  child {
                    kind: condition
                    text: "("
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "ret"
                      }
                      child {
                        kind: operator
                        text: "&lt;="
                      }
                      child {
                        kind: literal
                        text: "0"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ")"
                  }
                  child {
                    kind: then
                    child {
                      kind: block
                      child {
                        kind: return
                        text: "return"
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "ret"
                          }
                          }        
                        text: ";"
                      }
                    }
                  }
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "curr_mtu"
                    }
                    child {
                      kind: operator
                      text: "="
                    }
                    child {
                      kind: name
                      child {
                        kind: name
                        text: "s"
                      }
                      child {
                        kind: operator
                        text: "-&gt;"
                      }
                      child {
                        kind: name
                        text: "d1"
                      }
                      child {
                        kind: operator
                        text: "-&gt;"
                      }
                      child {
                        kind: name
                        text: "mtu"
                      }
                    }
                    child {
                      kind: operator
                      text: "-"
                    }
                    child {
                      kind: name
                      text: "DTLS1_RT_HEADER_LENGTH"
                    }
                    child {
                      kind: operator
                      text: "-"
                    }
                    child {
                      kind: name
                      text: "mac_size"
                    }
                    child {
                      kind: operator
                      text: "-"
                    }
                    child {
                      kind: name
                      text: "blocksize"
                    }
                    }        
                  text: ";"
                  }        
                text: "}"
              }
            }
          }
          child {
            kind: if
            text: "if"
            child {
              kind: condition
              text: "("
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_num"
                  }
                }
                child {
                  kind: operator
                  text: "&gt;"
                }
                child {
                  kind: name
                  text: "curr_mtu"
                }
                }        
              text: ")"
            }
            child {
              kind: then
              child {
                kind: block
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "len"
                    }
                    child {
                      kind: operator
                      text: "="
                    }
                    child {
                      kind: name
                      text: "curr_mtu"
                    }
                    }        
                  text: ";"
                }
              }
            }
            child {
              kind: else
              text: "else"
              child {
                kind: block
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "len"
                    }
                    child {
                      kind: operator
                      text: "="
                    }
                    child {
                      kind: name
                      child {
                        kind: name
                        text: "s"
                      }
                      child {
                        kind: operator
                        text: "-&gt;"
                      }
                      child {
                        kind: name
                        text: "init_num"
                      }
                    }
                    }        
                  text: ";"
                }
              }
            }
          }
          child {
            kind: comment
            text: "/* XDTLS: this function is too long.  split out the CCS part */"
          }
          child {
            kind: if
            text: "if"
            child {
              kind: condition
              text: "("
              child {
                kind: expr
                child {
                  kind: name
                  text: "type"
                }
                child {
                  kind: operator
                  text: "=="
                }
                child {
                  kind: name
                  text: "SSL3_RT_HANDSHAKE"
                }
                }        
              text: ")"
            }
            child {
              kind: then
              child {
                kind: block
                text: "{"
                child {
                  kind: if
                  text: "if"
                  child {
                    kind: condition
                    text: "("
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "init_off"
                        }
                      }
                      child {
                        kind: operator
                        text: "!="
                      }
                      child {
                        kind: literal
                        text: "0"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ")"
                  }
                  child {
                    kind: then
                    child {
                      kind: block
                      text: "{"
                      child {
                        kind: expr_stmt
                        child {
                          kind: expr
                          child {
                            kind: call
                            child {
                              kind: name
                              text: "OPENSSL_assert"
                            }
                            child {
                              kind: argument_list
                              text: "("
                              child {
                                kind: argument
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    child {
                                      kind: name
                                      text: "s"
                                    }
                                    child {
                                      kind: operator
                                      text: "-&gt;"
                                    }
                                    child {
                                      kind: name
                                      text: "init_off"
                                    }
                                  }
                                  child {
                                    kind: operator
                                    text: "&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "DTLS1_HM_HEADER_LENGTH"
                                  }
                                }
                                }        
                              text: ")"
                            }
                          }
                          }        
                        text: ";"
                      }
                      child {
                        kind: expr_stmt
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "s"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "init_off"
                            }
                          }
                          child {
                            kind: operator
                            text: "-="
                          }
                          child {
                            kind: name
                            text: "DTLS1_HM_HEADER_LENGTH"
                          }
                          }        
                        text: ";"
                      }
                      child {
                        kind: expr_stmt
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "s"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "init_num"
                            }
                          }
                          child {
                            kind: operator
                            text: "+="
                          }
                          child {
                            kind: name
                            text: "DTLS1_HM_HEADER_LENGTH"
                          }
                          }        
                        text: ";"
                      }
                      child {
                        kind: if
                        text: "if"
                        child {
                          kind: condition
                          text: "("
                          child {
                            kind: expr
                            child {
                              kind: name
                              child {
                                kind: name
                                text: "s"
                              }
                              child {
                                kind: operator
                                text: "-&gt;"
                              }
                              child {
                                kind: name
                                text: "init_num"
                              }
                            }
                            child {
                              kind: operator
                              text: "&gt;"
                            }
                            child {
                              kind: name
                              text: "curr_mtu"
                            }
                            }        
                          text: ")"
                        }
                        child {
                          kind: then
                          child {
                            kind: block
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "len"
                                }
                                child {
                                  kind: operator
                                  text: "="
                                }
                                child {
                                  kind: name
                                  text: "curr_mtu"
                                }
                                }        
                              text: ";"
                            }
                          }
                        }
                        child {
                          kind: else
                          text: "else"
                          child {
                            kind: block
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "len"
                                }
                                child {
                                  kind: operator
                                  text: "="
                                }
                                child {
                                  kind: name
                                  child {
                                    kind: name
                                    text: "s"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "init_num"
                                  }
                                }
                                }        
                              text: ";"
                            }
                          }
                        }
                        }        
                      text: "}"
                    }
                  }
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: call
                      child {
                        kind: name
                        text: "dtls1_fix_message_header"
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "s"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "frag_off"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "len"
                            }
                            child {
                              kind: operator
                              text: "-"
                            }
                            child {
                              kind: name
                              text: "DTLS1_HM_HEADER_LENGTH"
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: call
                      child {
                        kind: name
                        text: "dtls1_write_message_header"
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "s"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: operator
                              text: "("
                            }
                            child {
                              kind: name
                              text: "unsigned"
                            }
                            child {
                              kind: name
                              text: "char"
                            }
                            child {
                              kind: operator
                              text: "*"
                            }
                            child {
                              kind: operator
                              text: ")"
                            }
                            child {
                              kind: operator
                              text: "&amp;"
                            }
                            child {
                              kind: name
                              child {
                                kind: name
                                text: "s"
                              }
                              child {
                                kind: operator
                                text: "-&gt;"
                              }
                              child {
                                kind: name
                                text: "init_buf"
                              }
                              child {
                                kind: operator
                                text: "-&gt;"
                              }
                              child {
                                kind: name
                                text: "data"
                              }
                              child {
                                kind: index
                                text: "["
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    child {
                                      kind: name
                                      text: "s"
                                    }
                                    child {
                                      kind: operator
                                      text: "-&gt;"
                                    }
                                    child {
                                      kind: name
                                      text: "init_off"
                                    }
                                  }
                                  }        
                                text: "]"
                              }
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: call
                      child {
                        kind: name
                        text: "OPENSSL_assert"
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "len"
                            }
                            child {
                              kind: operator
                              text: "&gt;="
                            }
                            child {
                              kind: name
                              text: "DTLS1_HM_HEADER_LENGTH"
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                  }        
                text: "}"
              }
            }
          }
          child {
            kind: expr_stmt
            child {
              kind: expr
              child {
                kind: name
                text: "ret"
              }
              child {
                kind: operator
                text: "="
              }
              child {
                kind: call
                child {
                  kind: name
                  text: "dtls1_write_bytes"
                }
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "s"
                      }
                    }
                    }        
                  text: ","
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "type"
                      }
                    }
                    }        
                  text: ","
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: operator
                        text: "&amp;"
                      }
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "init_buf"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "data"
                        }
                        child {
                          kind: index
                          text: "["
                          child {
                            kind: expr
                            child {
                              kind: name
                              child {
                                kind: name
                                text: "s"
                              }
                              child {
                                kind: operator
                                text: "-&gt;"
                              }
                              child {
                                kind: name
                                text: "init_off"
                              }
                            }
                            }        
                          text: "]"
                        }
                      }
                    }
                    }        
                  text: ","
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "len"
                      }
                    }
                    }        
                  text: ")"
                }
              }
              }        
            text: ";"
          }
          child {
            kind: if
            text: "if"
            child {
              kind: condition
              text: "("
              child {
                kind: expr
                child {
                  kind: name
                  text: "ret"
                }
                child {
                  kind: operator
                  text: "&lt;"
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ")"
            }
            child {
              kind: then
              child {
                kind: block
                text: "{"
                child {
                  kind: comment
                  text: "/* might need to update MTU here, but we don't know
                         * which previous packet caused the failure -- so can't
                         * really retransmit anything.  continue as if everything
                         * is fine and wait for an alert to handle the
                         * retransmit 
                         */"
                }
                child {
                  kind: if
                  text: "if"
                  child {
                    kind: condition
                    text: "("
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "BIO_ctrl"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: call
                                child {
                                  kind: name
                                  text: "SSL_get_wbio"
                                }
                                child {
                                  kind: argument_list
                                  text: "("
                                  child {
                                    kind: argument
                                    child {
                                      kind: expr
                                      child {
                                        kind: name
                                        text: "s"
                                      }
                                    }
                                    }        
                                  text: ")"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "BIO_CTRL_DGRAM_MTU_EXCEEDED"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: literal
                                text: "0"
                                literal {
                                  type: "number"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "NULL"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      child {
                        kind: operator
                        text: "&gt;"
                      }
                      child {
                        kind: literal
                        text: "0"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ")"
                  }
                  child {
                    kind: then
                    child {
                      kind: block
                      child {
                        kind: expr_stmt
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "s"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "d1"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "mtu"
                            }
                          }
                          child {
                            kind: operator
                            text: "="
                          }
                          child {
                            kind: call
                            child {
                              kind: name
                              text: "BIO_ctrl"
                            }
                            child {
                              kind: argument_list
                              text: "("
                              child {
                                kind: argument
                                child {
                                  kind: expr
                                  child {
                                    kind: call
                                    child {
                                      kind: name
                                      text: "SSL_get_wbio"
                                    }
                                    child {
                                      kind: argument_list
                                      text: "("
                                      child {
                                        kind: argument
                                        child {
                                          kind: expr
                                          child {
                                            kind: name
                                            text: "s"
                                          }
                                        }
                                        }        
                                      text: ")"
                                    }
                                  }
                                }
                                }        
                              text: ","
                              child {
                                kind: argument
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    text: "BIO_CTRL_DGRAM_QUERY_MTU"
                                  }
                                }
                                }        
                              text: ","
                              child {
                                kind: argument
                                child {
                                  kind: expr
                                  child {
                                    kind: literal
                                    text: "0"
                                    literal {
                                      type: "number"
                                    }
                                  }
                                }
                                }        
                              text: ","
                              child {
                                kind: argument
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    text: "NULL"
                                  }
                                }
                                }        
                              text: ")"
                            }
                          }
                          }        
                        text: ";"
                      }
                    }
                  }
                  child {
                    kind: else
                    text: "else"
                    child {
                      kind: block
                      child {
                        kind: return
                        text: "return"
                        child {
                          kind: expr
                          child {
                            kind: operator
                            text: "("
                          }
                          child {
                            kind: operator
                            text: "-"
                          }
                          child {
                            kind: literal
                            text: "1"
                            literal {
                              type: "number"
                            }
                          }
                          child {
                            kind: operator
                            text: ")"
                          }
                          }        
                        text: ";"
                      }
                    }
                  }
                  }        
                text: "}"
              }
            }
            child {
              kind: else
              text: "else"
              child {
                kind: block
                text: "{"
                child {
                  kind: comment
                  text: "/* bad if this assert fails, only part of the handshake
                         * message got sent.  but why would this happen? */"
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: call
                      child {
                        kind: name
                        text: "OPENSSL_assert"
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "len"
                            }
                            child {
                              kind: operator
                              text: "=="
                            }
                            child {
                              kind: operator
                              text: "("
                            }
                            child {
                              kind: name
                              text: "unsigned"
                            }
                            child {
                              kind: name
                              text: "int"
                            }
                            child {
                              kind: operator
                              text: ")"
                            }
                            child {
                              kind: name
                              text: "ret"
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: if
                  text: "if"
                  child {
                    kind: condition
                    text: "("
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "type"
                      }
                      child {
                        kind: operator
                        text: "=="
                      }
                      child {
                        kind: name
                        text: "SSL3_RT_HANDSHAKE"
                      }
                      child {
                        kind: operator
                        text: "&amp;&amp;"
                      }
                      child {
                        kind: operator
                        text: "!"
                      }
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "d1"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "retransmitting"
                        }
                      }
                      }        
                    text: ")"
                  }
                  child {
                    kind: then
                    child {
                      kind: block
                      text: "{"
                      child {
                        kind: comment
                        text: "/* should not be done for 'Hello Request's, but in that case
                                 * we'll ignore the result anyway */"
                      }
                      child {
                        kind: decl_stmt
                        child {
                          kind: decl
                          child {
                            kind: type
                            child {
                              kind: name
                              text: "unsigned"
                            }
                            child {
                              kind: name
                              text: "char"
                            }
                            child {
                              kind: modifier
                              text: "*"
                            }
                          }
                          child {
                            kind: name
                            text: "p"
                          }
                          child {
                            kind: init
                            text: "="
                            child {
                              kind: expr
                              child {
                                kind: operator
                                text: "("
                              }
                              child {
                                kind: name
                                text: "unsigned"
                              }
                              child {
                                kind: name
                                text: "char"
                              }
                              child {
                                kind: operator
                                text: "*"
                              }
                              child {
                                kind: operator
                                text: ")"
                              }
                              child {
                                kind: operator
                                text: "&amp;"
                              }
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "init_buf"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "data"
                                }
                                child {
                                  kind: index
                                  text: "["
                                  child {
                                    kind: expr
                                    child {
                                      kind: name
                                      child {
                                        kind: name
                                        text: "s"
                                      }
                                      child {
                                        kind: operator
                                        text: "-&gt;"
                                      }
                                      child {
                                        kind: name
                                        text: "init_off"
                                      }
                                    }
                                    }        
                                  text: "]"
                                }
                              }
                            }
                          }
                          }        
                        text: ";"
                      }
                      child {
                        kind: decl_stmt
                        child {
                          kind: decl
                          child {
                            kind: type
                            child {
                              kind: specifier
                              text: "const"
                            }
                            child {
                              kind: name
                              child {
                                kind: name
                                text: "struct"
                              }
                              child {
                                kind: name
                                text: "hm_header_st"
                              }
                            }
                            child {
                              kind: modifier
                              text: "*"
                            }
                          }
                          child {
                            kind: name
                            text: "msg_hdr"
                          }
                          child {
                            kind: init
                            text: "="
                            child {
                              kind: expr
                              child {
                                kind: operator
                                text: "&amp;"
                              }
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "d1"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "w_msg_hdr"
                                }
                              }
                            }
                          }
                          }        
                        text: ";"
                      }
                      child {
                        kind: decl_stmt
                        child {
                          kind: decl
                          child {
                            kind: type
                            child {
                              kind: name
                              text: "int"
                            }
                          }
                          child {
                            kind: name
                            text: "xlen"
                          }
                          }        
                        text: ";"
                      }
                      child {
                        kind: if
                        text: "if"
                        child {
                          kind: condition
                          text: "("
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "frag_off"
                            }
                            child {
                              kind: operator
                              text: "=="
                            }
                            child {
                              kind: literal
                              text: "0"
                              literal {
                                type: "number"
                              }
                            }
                            child {
                              kind: operator
                              text: "&amp;&amp;"
                            }
                            child {
                              kind: name
                              child {
                                kind: name
                                text: "s"
                              }
                              child {
                                kind: operator
                                text: "-&gt;"
                              }
                              child {
                                kind: name
                                text: "version"
                              }
                            }
                            child {
                              kind: operator
                              text: "!="
                            }
                            child {
                              kind: name
                              text: "DTLS1_BAD_VER"
                            }
                            }        
                          text: ")"
                        }
                        child {
                          kind: then
                          child {
                            kind: block
                            text: "{"
                            child {
                              kind: comment
                              text: "/* reconstruct message header is if it
                                         * is being sent in single fragment */"
                            }
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: operator
                                  text: "*"
                                }
                                child {
                                  kind: name
                                  text: "p"
                                }
                                child {
                                  kind: operator
                                  text: "++"
                                }
                                child {
                                  kind: operator
                                  text: "="
                                }
                                child {
                                  kind: name
                                  child {
                                    kind: name
                                    text: "msg_hdr"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "type"
                                  }
                                }
                                }        
                              text: ";"
                            }
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: call
                                  child {
                                    kind: name
                                    text: "l2n3"
                                  }
                                  child {
                                    kind: argument_list
                                    text: "("
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          child {
                                            kind: name
                                            text: "msg_hdr"
                                          }
                                          child {
                                            kind: operator
                                            text: "-&gt;"
                                          }
                                          child {
                                            kind: name
                                            text: "msg_len"
                                          }
                                        }
                                      }
                                      }        
                                    text: ","
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          text: "p"
                                        }
                                      }
                                      }        
                                    text: ")"
                                  }
                                }
                                }        
                              text: ";"
                            }
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: call
                                  child {
                                    kind: name
                                    text: "s2n"
                                  }
                                  child {
                                    kind: argument_list
                                    text: "("
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          child {
                                            kind: name
                                            text: "msg_hdr"
                                          }
                                          child {
                                            kind: operator
                                            text: "-&gt;"
                                          }
                                          child {
                                            kind: name
                                            text: "seq"
                                          }
                                        }
                                      }
                                      }        
                                    text: ","
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          text: "p"
                                        }
                                      }
                                      }        
                                    text: ")"
                                  }
                                }
                                }        
                              text: ";"
                            }
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: call
                                  child {
                                    kind: name
                                    text: "l2n3"
                                  }
                                  child {
                                    kind: argument_list
                                    text: "("
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: literal
                                          text: "0"
                                          literal {
                                            type: "number"
                                          }
                                        }
                                      }
                                      }        
                                    text: ","
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          text: "p"
                                        }
                                      }
                                      }        
                                    text: ")"
                                  }
                                }
                                }        
                              text: ";"
                            }
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: call
                                  child {
                                    kind: name
                                    text: "l2n3"
                                  }
                                  child {
                                    kind: argument_list
                                    text: "("
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          child {
                                            kind: name
                                            text: "msg_hdr"
                                          }
                                          child {
                                            kind: operator
                                            text: "-&gt;"
                                          }
                                          child {
                                            kind: name
                                            text: "msg_len"
                                          }
                                        }
                                      }
                                      }        
                                    text: ","
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          text: "p"
                                        }
                                      }
                                      }        
                                    text: ")"
                                  }
                                }
                                }        
                              text: ";"
                            }
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "p"
                                }
                                child {
                                  kind: operator
                                  text: "-="
                                }
                                child {
                                  kind: name
                                  text: "DTLS1_HM_HEADER_LENGTH"
                                }
                                }        
                              text: ";"
                            }
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "xlen"
                                }
                                child {
                                  kind: operator
                                  text: "="
                                }
                                child {
                                  kind: name
                                  text: "ret"
                                }
                                }        
                              text: ";"
                              }        
                            text: "}"
                          }
                        }
                        child {
                          kind: else
                          text: "else"
                          child {
                            kind: block
                            text: "{"
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "p"
                                }
                                child {
                                  kind: operator
                                  text: "+="
                                }
                                child {
                                  kind: name
                                  text: "DTLS1_HM_HEADER_LENGTH"
                                }
                                }        
                              text: ";"
                            }
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "xlen"
                                }
                                child {
                                  kind: operator
                                  text: "="
                                }
                                child {
                                  kind: name
                                  text: "ret"
                                }
                                child {
                                  kind: operator
                                  text: "-"
                                }
                                child {
                                  kind: name
                                  text: "DTLS1_HM_HEADER_LENGTH"
                                }
                                }        
                              text: ";"
                              }        
                            text: "}"
                          }
                        }
                      }
                      child {
                        kind: expr_stmt
                        child {
                          kind: expr
                          child {
                            kind: call
                            child {
                              kind: name
                              text: "ssl3_finish_mac"
                            }
                            child {
                              kind: argument_list
                              text: "("
                              child {
                                kind: argument
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    text: "s"
                                  }
                                }
                                }        
                              text: ","
                              child {
                                kind: argument
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    text: "p"
                                  }
                                }
                                }        
                              text: ","
                              child {
                                kind: argument
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    text: "xlen"
                                  }
                                }
                                }        
                              text: ")"
                            }
                          }
                          }        
                        text: ";"
                        }        
                      text: "}"
                    }
                  }
                }
                child {
                  kind: if
                  text: "if"
                  child {
                    kind: condition
                    text: "("
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "ret"
                      }
                      child {
                        kind: operator
                        text: "=="
                      }
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "init_num"
                        }
                      }
                      }        
                    text: ")"
                  }
                  child {
                    kind: then
                    child {
                      kind: block
                      text: "{"
                      child {
                        kind: if
                        text: "if"
                        child {
                          kind: condition
                          text: "("
                          child {
                            kind: expr
                            child {
                              kind: name
                              child {
                                kind: name
                                text: "s"
                              }
                              child {
                                kind: operator
                                text: "-&gt;"
                              }
                              child {
                                kind: name
                                text: "msg_callback"
                              }
                            }
                            }        
                          text: ")"
                        }
                        child {
                          kind: then
                          child {
                            kind: block
                            child {
                              kind: expr_stmt
                              child {
                                kind: expr
                                child {
                                  kind: call
                                  child {
                                    kind: name
                                    child {
                                      kind: name
                                      text: "s"
                                    }
                                    child {
                                      kind: operator
                                      text: "-&gt;"
                                    }
                                    child {
                                      kind: name
                                      text: "msg_callback"
                                    }
                                  }
                                  child {
                                    kind: argument_list
                                    text: "("
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: literal
                                          text: "1"
                                          literal {
                                            type: "number"
                                          }
                                        }
                                      }
                                      }        
                                    text: ","
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          child {
                                            kind: name
                                            text: "s"
                                          }
                                          child {
                                            kind: operator
                                            text: "-&gt;"
                                          }
                                          child {
                                            kind: name
                                            text: "version"
                                          }
                                        }
                                      }
                                      }        
                                    text: ","
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          text: "type"
                                        }
                                      }
                                      }        
                                    text: ","
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          child {
                                            kind: name
                                            text: "s"
                                          }
                                          child {
                                            kind: operator
                                            text: "-&gt;"
                                          }
                                          child {
                                            kind: name
                                            text: "init_buf"
                                          }
                                          child {
                                            kind: operator
                                            text: "-&gt;"
                                          }
                                          child {
                                            kind: name
                                            text: "data"
                                          }
                                        }
                                      }
                                      }        
                                    text: ","
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: call
                                          text: "("
                                          child {
                                            kind: name
                                            text: "size_t"
                                            }        
                                          text: ")"
                                          child {
                                            kind: argument_list
                                            text: "("
                                            child {
                                              kind: argument
                                              child {
                                                kind: expr
                                                child {
                                                  kind: name
                                                  child {
                                                    kind: name
                                                    text: "s"
                                                  }
                                                  child {
                                                    kind: operator
                                                    text: "-&gt;"
                                                  }
                                                  child {
                                                    kind: name
                                                    text: "init_off"
                                                  }
                                                }
                                                child {
                                                  kind: operator
                                                  text: "+"
                                                }
                                                child {
                                                  kind: name
                                                  child {
                                                    kind: name
                                                    text: "s"
                                                  }
                                                  child {
                                                    kind: operator
                                                    text: "-&gt;"
                                                  }
                                                  child {
                                                    kind: name
                                                    text: "init_num"
                                                  }
                                                }
                                              }
                                              }        
                                            text: ")"
                                          }
                                        }
                                      }
                                      }        
                                    text: ","
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          text: "s"
                                        }
                                      }
                                      }        
                                    text: ","
                                    child {
                                      kind: argument
                                      child {
                                        kind: expr
                                        child {
                                          kind: name
                                          child {
                                            kind: name
                                            text: "s"
                                          }
                                          child {
                                            kind: operator
                                            text: "-&gt;"
                                          }
                                          child {
                                            kind: name
                                            text: "msg_callback_arg"
                                          }
                                        }
                                      }
                                      }        
                                    text: ")"
                                  }
                                }
                                }        
                              text: ";"
                            }
                          }
                        }
                      }
                      child {
                        kind: expr_stmt
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "s"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "init_off"
                            }
                          }
                          child {
                            kind: operator
                            text: "="
                          }
                          child {
                            kind: literal
                            text: "0"
                            literal {
                              type: "number"
                            }
                          }
                          }        
                        text: ";"
                      }
                      child {
                        kind: comment
                        text: "/* done writing this message */"
                      }
                      child {
                        kind: expr_stmt
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "s"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "init_num"
                            }
                          }
                          child {
                            kind: operator
                            text: "="
                          }
                          child {
                            kind: literal
                            text: "0"
                            literal {
                              type: "number"
                            }
                          }
                          }        
                        text: ";"
                      }
                      child {
                        kind: return
                        text: "return"
                        child {
                          kind: expr
                          child {
                            kind: operator
                            text: "("
                          }
                          child {
                            kind: literal
                            text: "1"
                            literal {
                              type: "number"
                            }
                          }
                          child {
                            kind: operator
                            text: ")"
                          }
                          }        
                        text: ";"
                        }        
                      text: "}"
                    }
                  }
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      child {
                        kind: name
                        text: "s"
                      }
                      child {
                        kind: operator
                        text: "-&gt;"
                      }
                      child {
                        kind: name
                        text: "init_off"
                      }
                    }
                    child {
                      kind: operator
                      text: "+="
                    }
                    child {
                      kind: name
                      text: "ret"
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      child {
                        kind: name
                        text: "s"
                      }
                      child {
                        kind: operator
                        text: "-&gt;"
                      }
                      child {
                        kind: name
                        text: "init_num"
                      }
                    }
                    child {
                      kind: operator
                      text: "-="
                    }
                    child {
                      kind: name
                      text: "ret"
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "frag_off"
                    }
                    child {
                      kind: operator
                      text: "+="
                    }
                    child {
                      kind: operator
                      text: "("
                    }
                    child {
                      kind: name
                      text: "ret"
                    }
                    child {
                      kind: operator
                      text: "-="
                    }
                    child {
                      kind: name
                      text: "DTLS1_HM_HEADER_LENGTH"
                    }
                    child {
                      kind: operator
                      text: ")"
                    }
                    }        
                  text: ";"
                  }        
                text: "}"
              }
            }
            }        
          text: "}"
        }
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: operator
            text: "("
          }
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: comment
    text: "/* Obtain handshake message of message type 'mt' (any if mt == -1),
 * maximum acceptable body length 'max'.
 * Read an entire handshake message.  Handshake messages arrive in
 * fragments.
 */"
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "long"
      }
    }
    child {
      kind: name
      text: "dtls1_get_message"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "st1"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "stn"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "mt"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "max"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "ok"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "i"
          }
          }        
        text: ","
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "al"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              child {
                kind: name
                text: "struct"
              }
              child {
                kind: name
                text: "hm_header_st"
              }
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "msg_hdr"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "p"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "msg_len"
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* s3-&gt;tmp is used to store messages that are unexpected, caused
         * by the absence of an optional handshake message */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "s3"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "tmp"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "reuse_message"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "s3"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "tmp"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "reuse_message"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: operator
                    text: "("
                  }
                  child {
                    kind: name
                    text: "mt"
                  }
                  child {
                    kind: operator
                    text: "&gt;="
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  child {
                    kind: operator
                    text: ")"
                  }
                  child {
                    kind: operator
                    text: "&amp;&amp;"
                  }
                  child {
                    kind: operator
                    text: "("
                  }
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "s3"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "tmp"
                    }
                    child {
                      kind: operator
                      text: "."
                    }
                    child {
                      kind: name
                      text: "message_type"
                    }
                  }
                  child {
                    kind: operator
                    text: "!="
                  }
                  child {
                    kind: name
                    text: "mt"
                  }
                  child {
                    kind: operator
                    text: ")"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "al"
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: name
                        text: "SSL_AD_UNEXPECTED_MESSAGE"
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "SSLerr"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "SSL_F_DTLS1_GET_MESSAGE"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "SSL_R_UNEXPECTED_MESSAGE"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: goto
                    text: "goto"
                    child {
                      kind: name
                      text: "f_err"
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: name
                  text: "ok"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "1"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_msg"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_buf"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "data"
                  }
                }
                child {
                  kind: operator
                  text: "+"
                }
                child {
                  kind: name
                  text: "DTLS1_HM_HEADER_LENGTH"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_num"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: operator
                  text: "("
                }
                child {
                  kind: name
                  text: "int"
                }
                child {
                  kind: operator
                  text: ")"
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "s3"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "tmp"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "message_size"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_num"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "msg_hdr"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "&amp;"
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "r_msg_hdr"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "memset"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "msg_hdr"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0x00"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: sizeof
                    text: "sizeof"
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          text: "struct"
                          child {
                            kind: name
                            text: "hm_header_st"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: label
        child {
          kind: name
          text: "again"
          }        
        text: ":"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "i"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "dtls1_get_message_fragment"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "st1"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "stn"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "max"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "ok"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "i"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "DTLS1_HM_BAD_FRAGMENT"
            }
            child {
              kind: operator
              text: "||"
            }
            child {
              kind: name
              text: "i"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "DTLS1_HM_FRAGMENT_RETRY"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: comment
            text: "/* bad fragment received */"
          }
          child {
            kind: block
            child {
              kind: goto
              text: "goto"
              child {
                kind: name
                text: "again"
                }        
              text: ";"
            }
          }
        }
        child {
          kind: elseif
          text: "else"
          child {
            kind: if
            text: "if"
            child {
              kind: condition
              text: "("
              child {
                kind: expr
                child {
                  kind: name
                  text: "i"
                }
                child {
                  kind: operator
                  text: "&lt;="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                child {
                  kind: operator
                  text: "&amp;&amp;"
                }
                child {
                  kind: operator
                  text: "!"
                }
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: name
                  text: "ok"
                }
                }        
              text: ")"
            }
            child {
              kind: then
              child {
                kind: block
                child {
                  kind: return
                  text: "return"
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "i"
                    }
                    }        
                  text: ";"
                }
              }
            }
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "unsigned"
          }
          child {
            kind: name
            text: "char"
          }
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "init_buf"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "data"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "msg_len"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_len"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* reconstruct message header */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "++"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "type"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "l2n3"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "msg_len"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "s2n"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "seq"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "l2n3"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "l2n3"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "msg_len"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "version"
              }
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              text: "DTLS1_BAD_VER"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "p"
                }
                child {
                  kind: operator
                  text: "-="
                }
                child {
                  kind: name
                  text: "DTLS1_HM_HEADER_LENGTH"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "msg_len"
                }
                child {
                  kind: operator
                  text: "+="
                }
                child {
                  kind: name
                  text: "DTLS1_HM_HEADER_LENGTH"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "ssl3_finish_mac"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "msg_len"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "msg_callback"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_callback"
                    }
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "version"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL3_RT_HANDSHAKE"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "p"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "msg_len"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_callback_arg"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "memset"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "msg_hdr"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0x00"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: sizeof
                    text: "sizeof"
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          text: "struct"
                          child {
                            kind: name
                            text: "hm_header_st"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Don't change sequence numbers while listening */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "d1"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "listen"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "d1"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "handshake_read_seq"
                  }
                }
                child {
                  kind: operator
                  text: "++"
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "init_msg"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "init_buf"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "data"
            }
          }
          child {
            kind: operator
            text: "+"
          }
          child {
            kind: name
            text: "DTLS1_HM_HEADER_LENGTH"
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "init_num"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: label
        child {
          kind: name
          text: "f_err"
          }        
        text: ":"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "ssl3_send_alert"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "SSL3_AL_FATAL"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "al"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: name
            text: "ok"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: operator
            text: "-"
          }
          child {
            kind: literal
            text: "1"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_preprocess_fragment"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              child {
                kind: name
                text: "struct"
              }
              child {
                kind: name
                text: "hm_header_st"
              }
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "msg_hdr"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "max"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "size_t"
            }
          }
          child {
            kind: name
            text: "frag_off"
          }
          }        
        text: ","
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "frag_len"
          }
          }        
        text: ","
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "msg_len"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "msg_len"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_len"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "frag_off"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "frag_off"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "frag_len"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "frag_len"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* sanity checking */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              text: "frag_off"
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: name
              text: "frag_len"
            }
            child {
              kind: operator
              text: ")"
            }
            child {
              kind: operator
              text: "&gt;"
            }
            child {
              kind: name
              text: "msg_len"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "SSLerr"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_F_DTLS1_PREPROCESS_FRAGMENT"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_R_EXCESSIVE_MESSAGE_SIZE"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: name
                  text: "SSL_AD_ILLEGAL_PARAMETER"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              text: "frag_off"
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: name
              text: "frag_len"
            }
            child {
              kind: operator
              text: ")"
            }
            child {
              kind: operator
              text: "&gt;"
            }
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
            child {
              kind: operator
              text: ")"
            }
            child {
              kind: name
              text: "max"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "SSLerr"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_F_DTLS1_PREPROCESS_FRAGMENT"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_R_EXCESSIVE_MESSAGE_SIZE"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: name
                  text: "SSL_AD_ILLEGAL_PARAMETER"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "d1"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "r_msg_hdr"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "frag_off"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: literal
              text: "0"
              literal {
                type: "number"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: comment
            text: "/* first fragment */"
          }
          child {
            kind: block
            text: "{"
            child {
              kind: comment
              text: "/* msg_len is limited to 2^24, but is effectively checked
                 * against max above */"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: operator
                    text: "!"
                  }
                  child {
                    kind: call
                    child {
                      kind: name
                      text: "BUF_MEM_grow_clean"
                    }
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "s"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "init_buf"
                            }
                          }
                        }
                        }        
                      text: ","
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "msg_len"
                          }
                          child {
                            kind: operator
                            text: "+"
                          }
                          child {
                            kind: name
                            text: "DTLS1_HM_HEADER_LENGTH"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "SSLerr"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "SSL_F_DTLS1_PREPROCESS_FRAGMENT"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "ERR_R_BUF_LIB"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "SSL_AD_INTERNAL_ERROR"
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "s3"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "tmp"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "message_size"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "msg_len"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "d1"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "r_msg_hdr"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "msg_len"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "msg_len"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "s3"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "tmp"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "message_type"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "msg_hdr"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "type"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "d1"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "r_msg_hdr"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "type"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "msg_hdr"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "type"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "d1"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "r_msg_hdr"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "seq"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "msg_hdr"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "seq"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
        child {
          kind: elseif
          text: "else"
          child {
            kind: if
            text: "if"
            child {
              kind: condition
              text: "("
              child {
                kind: expr
                child {
                  kind: name
                  text: "msg_len"
                }
                child {
                  kind: operator
                  text: "!="
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "d1"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "r_msg_hdr"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "msg_len"
                  }
                }
                }        
              text: ")"
            }
            child {
              kind: then
              child {
                kind: block
                text: "{"
                child {
                  kind: comment
                  text: "/* They must be playing with us! BTW, failure to enforce
                 * upper limit would open possibility for buffer overrun. */"
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: call
                      child {
                        kind: name
                        text: "SSLerr"
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "SSL_F_DTLS1_PREPROCESS_FRAGMENT"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "SSL_R_EXCESSIVE_MESSAGE_SIZE"
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: return
                  text: "return"
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "SSL_AD_ILLEGAL_PARAMETER"
                    }
                    }        
                  text: ";"
                  }        
                text: "}"
              }
            }
          }
        }
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* no error */"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_retrieve_buffered_fragment"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "max"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "ok"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: comment
        text: "/* (0) check whether the desired fragment is available
         * if so:
         * (1) copy over the fragment to s-&gt;init_buf-&gt;data[]
         * (2) update s-&gt;init_num
         */"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "pitem"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "item"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "hm_fragment"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "frag"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "al"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: name
            text: "ok"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "item"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "pqueue_peek"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "d1"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "buffered_messages"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "item"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "frag"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "hm_fragment"
          }
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: name
            child {
              kind: name
              text: "item"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "data"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Don't return if reassembly still in progress */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "frag"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "reassembly"
              }
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "d1"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "handshake_read_seq"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              child {
                kind: name
                text: "frag"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "msg_header"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "seq"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: decl_stmt
              child {
                kind: decl
                child {
                  kind: type
                  child {
                    kind: name
                    text: "unsigned"
                  }
                  child {
                    kind: name
                    text: "long"
                  }
                }
                child {
                  kind: name
                  text: "frag_len"
                }
                child {
                  kind: init
                  text: "="
                  child {
                    kind: expr
                    child {
                      kind: name
                      child {
                        kind: name
                        text: "frag"
                      }
                      child {
                        kind: operator
                        text: "-&gt;"
                      }
                      child {
                        kind: name
                        text: "msg_header"
                      }
                      child {
                        kind: operator
                        text: "."
                      }
                      child {
                        kind: name
                        text: "frag_len"
                      }
                    }
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "pqueue_pop"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "d1"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "buffered_messages"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "al"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_preprocess_fragment"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "&amp;"
                        }
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "frag"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_header"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "max"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "al"
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: comment
                  text: "/* no alert */"
                }
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: decl_stmt
                    child {
                      kind: decl
                      child {
                        kind: type
                        child {
                          kind: name
                          text: "unsigned"
                        }
                        child {
                          kind: name
                          text: "char"
                        }
                        child {
                          kind: modifier
                          text: "*"
                        }
                      }
                      child {
                        kind: name
                        text: "p"
                      }
                      child {
                        kind: init
                        text: "="
                        child {
                          kind: expr
                          child {
                            kind: operator
                            text: "("
                          }
                          child {
                            kind: name
                            text: "unsigned"
                          }
                          child {
                            kind: name
                            text: "char"
                          }
                          child {
                            kind: operator
                            text: "*"
                          }
                          child {
                            kind: operator
                            text: ")"
                          }
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "s"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "init_buf"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "data"
                            }
                          }
                          child {
                            kind: operator
                            text: "+"
                          }
                          child {
                            kind: name
                            text: "DTLS1_HM_HEADER_LENGTH"
                          }
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "memcpy"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: operator
                                text: "&amp;"
                              }
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "p"
                                }
                                child {
                                  kind: index
                                  text: "["
                                  child {
                                    kind: expr
                                    child {
                                      kind: name
                                      child {
                                        kind: name
                                        text: "frag"
                                      }
                                      child {
                                        kind: operator
                                        text: "-&gt;"
                                      }
                                      child {
                                        kind: name
                                        text: "msg_header"
                                      }
                                      child {
                                        kind: operator
                                        text: "."
                                      }
                                      child {
                                        kind: name
                                        text: "frag_off"
                                      }
                                    }
                                    }        
                                  text: "]"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "frag"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "fragment"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "frag"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "msg_header"
                                }
                                child {
                                  kind: operator
                                  text: "."
                                }
                                child {
                                  kind: name
                                  text: "frag_len"
                                }
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_hm_fragment_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "frag"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "pitem_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "item"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "al"
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: operator
                        text: "*"
                      }
                      child {
                        kind: name
                        text: "ok"
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: literal
                        text: "1"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "frag_len"
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "ssl3_send_alert"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL3_AL_FATAL"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "al"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_num"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: name
                  text: "ok"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: operator
                  text: "-"
                }
                child {
                  kind: literal
                  text: "1"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
        child {
          kind: else
          text: "else"
          child {
            kind: block
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
          }
        }
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_reassemble_fragment"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              child {
                kind: name
                text: "struct"
              }
              child {
                kind: name
                text: "hm_header_st"
              }
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "msg_hdr"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "ok"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "hm_fragment"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "frag"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: name
                text: "NULL"
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "pitem"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "item"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: name
                text: "NULL"
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "i"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: operator
                text: "-"
              }
              child {
                kind: literal
                text: "1"
                literal {
                  type: "number"
                }
              }
            }
          }
          }        
        text: ","
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "is_complete"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
          }
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "8"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_len"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: name
                child {
                  kind: name
                  text: "msg_hdr"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "frag_len"
                }
              }
            }
          }
          }        
        text: ","
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "max_len"
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              child {
                kind: name
                text: "msg_hdr"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "frag_off"
              }
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: name
              text: "frag_len"
            }
            child {
              kind: operator
              text: ")"
            }
            child {
              kind: operator
              text: "&gt;"
            }
            child {
              kind: name
              child {
                kind: name
                text: "msg_hdr"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "msg_len"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: goto
              text: "goto"
              child {
                kind: name
                text: "err"
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* Determine maximum allowed message size. Depends on (user set)
         * maximum certificate length, but 16k is minimum.
         */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "DTLS1_HM_HEADER_LENGTH"
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: name
              text: "SSL3_RT_MAX_ENCRYPTED_LENGTH"
            }
            child {
              kind: operator
              text: "&lt;"
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "max_cert_list"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "max_len"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "max_cert_list"
                  }
                }
                }        
              text: ";"
            }
          }
        }
        child {
          kind: else
          text: "else"
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "max_len"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "DTLS1_HM_HEADER_LENGTH"
                }
                child {
                  kind: operator
                  text: "+"
                }
                child {
                  kind: name
                  text: "SSL3_RT_MAX_ENCRYPTED_LENGTH"
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              child {
                kind: name
                text: "msg_hdr"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "frag_off"
              }
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: name
              text: "frag_len"
            }
            child {
              kind: operator
              text: ")"
            }
            child {
              kind: operator
              text: "&gt;"
            }
            child {
              kind: name
              text: "max_len"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: goto
              text: "goto"
              child {
                kind: name
                text: "err"
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* Try to find item in queue */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "memset"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "seq64be"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: sizeof
                    text: "sizeof"
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "seq64be"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "6"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            text: "("
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
              }        
            text: ")"
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "seq"
                    }
                  }
                  child {
                    kind: operator
                    text: "&gt;&gt;"
                  }
                  child {
                    kind: literal
                    text: "8"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "7"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "unsigned"
          }
          child {
            kind: name
            text: "char"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "seq"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "item"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "pqueue_find"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "d1"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "buffered_messages"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "seq64be"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "item"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "frag"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_hm_fragment_new"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "msg_hdr"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_len"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "1"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "frag"
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: name
                    text: "NULL"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  child {
                    kind: goto
                    text: "goto"
                    child {
                      kind: name
                      text: "err"
                      }        
                    text: ";"
                  }
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "memcpy"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "&amp;"
                        }
                        child {
                          kind: operator
                          text: "("
                        }
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "frag"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_header"
                          }
                        }
                        child {
                          kind: operator
                          text: ")"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "msg_hdr"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: sizeof
                          text: "sizeof"
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: operator
                                  text: "*"
                                }
                                child {
                                  kind: name
                                  text: "msg_hdr"
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "frag"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "msg_header"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "frag_len"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "frag"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "msg_header"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "msg_len"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "frag"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "msg_header"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "frag_off"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
        child {
          kind: else
          text: "else"
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "frag"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: operator
                  text: "("
                }
                child {
                  kind: name
                  text: "hm_fragment"
                }
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: operator
                  text: ")"
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "item"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "data"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* If message is already reassembled, this must be a
         * retransmit and can be dropped.
         */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "frag"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "reassembly"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: decl_stmt
              child {
                kind: decl
                child {
                  kind: type
                  child {
                    kind: name
                    text: "unsigned"
                  }
                  child {
                    kind: name
                    text: "char"
                  }
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "devnull"
                  }
                  child {
                    kind: index
                    text: "["
                    child {
                      kind: expr
                      child {
                        kind: literal
                        text: "256"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: "]"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: while
              text: "while"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "frag_len"
                  }
                  }        
                text: ")"
              }
              child {
                kind: block
                text: "{"
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "i"
                    }
                    child {
                      kind: operator
                      text: "="
                    }
                    child {
                      kind: call
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "method"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "ssl_read_bytes"
                        }
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "s"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "SSL3_RT_HANDSHAKE"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "devnull"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: ternary
                              child {
                                kind: condition
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    text: "frag_len"
                                  }
                                  child {
                                    kind: operator
                                    text: "&gt;"
                                  }
                                  child {
                                    kind: sizeof
                                    text: "sizeof"
                                    child {
                                      kind: argument_list
                                      text: "("
                                      child {
                                        kind: argument
                                        child {
                                          kind: expr
                                          child {
                                            kind: name
                                            text: "devnull"
                                          }
                                        }
                                        }        
                                      text: ")"
                                    }
                                  }
                                  }        
                                text: "?"
                              }
                              child {
                                kind: then
                                child {
                                  kind: expr
                                  child {
                                    kind: sizeof
                                    text: "sizeof"
                                    child {
                                      kind: argument_list
                                      text: "("
                                      child {
                                        kind: argument
                                        child {
                                          kind: expr
                                          child {
                                            kind: name
                                            text: "devnull"
                                          }
                                        }
                                        }        
                                      text: ")"
                                    }
                                  }
                                }
                              }
                              child {
                                kind: else
                                text: ":"
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    text: "frag_len"
                                  }
                                }
                              }
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: literal
                              text: "0"
                              literal {
                                type: "number"
                              }
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: if
                  text: "if"
                  child {
                    kind: condition
                    text: "("
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "i"
                      }
                      child {
                        kind: operator
                        text: "&lt;="
                      }
                      child {
                        kind: literal
                        text: "0"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ")"
                  }
                  child {
                    kind: then
                    child {
                      kind: block
                      child {
                        kind: goto
                        text: "goto"
                        child {
                          kind: name
                          text: "err"
                          }        
                        text: ";"
                      }
                    }
                  }
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "frag_len"
                    }
                    child {
                      kind: operator
                      text: "-="
                    }
                    child {
                      kind: name
                      text: "i"
                    }
                    }        
                  text: ";"
                  }        
                text: "}"
              }
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: name
                  text: "DTLS1_HM_FRAGMENT_RETRY"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: comment
        text: "/* read the body of the fragment (header has already been read */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "i"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "method"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "ssl_read_bytes"
              }
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "SSL3_RT_HANDSHAKE"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "frag"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "fragment"
                    }
                  }
                  child {
                    kind: operator
                    text: "+"
                  }
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "frag_off"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "frag_len"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "i"
            }
            child {
              kind: operator
              text: "&lt;="
            }
            child {
              kind: literal
              text: "0"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "||"
            }
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
            child {
              kind: operator
              text: ")"
            }
            child {
              kind: name
              text: "i"
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              text: "frag_len"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: goto
              text: "goto"
              child {
                kind: name
                text: "err"
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "RSMBLY_BITMASK_MARK"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "frag"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "reassembly"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: operator
                    text: "("
                  }
                  child {
                    kind: name
                    text: "long"
                  }
                  child {
                    kind: operator
                    text: ")"
                  }
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "frag_off"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: call
                    text: "("
                    child {
                      kind: name
                      text: "long"
                      }        
                    text: ")"
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "msg_hdr"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "frag_off"
                            }
                          }
                          child {
                            kind: operator
                            text: "+"
                          }
                          child {
                            kind: name
                            text: "frag_len"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "RSMBLY_BITMASK_IS_COMPLETE"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "frag"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "reassembly"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: operator
                    text: "("
                  }
                  child {
                    kind: name
                    text: "long"
                  }
                  child {
                    kind: operator
                    text: ")"
                  }
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_len"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "is_complete"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "is_complete"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "frag"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "reassembly"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "frag"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "reassembly"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "NULL"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "item"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "memset"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "seq64be"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: sizeof
                          text: "sizeof"
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "seq64be"
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "seq64be"
                  }
                  child {
                    kind: index
                    text: "["
                    child {
                      kind: expr
                      child {
                        kind: literal
                        text: "6"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: "]"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  text: "("
                  child {
                    kind: name
                    text: "unsigned"
                  }
                  child {
                    kind: name
                    text: "char"
                    }        
                  text: ")"
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "msg_hdr"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "seq"
                          }
                        }
                        child {
                          kind: operator
                          text: "&gt;&gt;"
                        }
                        child {
                          kind: literal
                          text: "8"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "seq64be"
                  }
                  child {
                    kind: index
                    text: "["
                    child {
                      kind: expr
                      child {
                        kind: literal
                        text: "7"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: "]"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  text: "("
                  child {
                    kind: name
                    text: "unsigned"
                  }
                  child {
                    kind: name
                    text: "char"
                    }        
                  text: ")"
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "msg_hdr"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "seq"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "item"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "pitem_new"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "seq64be"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "frag"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "item"
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: name
                    text: "NULL"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: goto
                    text: "goto"
                    child {
                      kind: name
                      text: "err"
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "i"
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: operator
                        text: "-"
                      }
                      child {
                        kind: literal
                        text: "1"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "pqueue_insert"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "d1"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "buffered_messages"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "item"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "DTLS1_HM_FRAGMENT_RETRY"
          }
          }        
        text: ";"
      }
      child {
        kind: label
        child {
          kind: name
          text: "err"
          }        
        text: ":"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_hm_fragment_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "frag"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "item"
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "item"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: name
            text: "ok"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "i"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_process_out_of_seq_message"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              child {
                kind: name
                text: "struct"
              }
              child {
                kind: name
                text: "hm_header_st"
              }
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "msg_hdr"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "ok"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "i"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: operator
                text: "-"
              }
              child {
                kind: literal
                text: "1"
                literal {
                  type: "number"
                }
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "hm_fragment"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "frag"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: name
                text: "NULL"
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "pitem"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "item"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: name
                text: "NULL"
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
          }
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "8"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_len"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: name
                child {
                  kind: name
                  text: "msg_hdr"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "frag_len"
                }
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              child {
                kind: name
                text: "msg_hdr"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "frag_off"
              }
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: name
              text: "frag_len"
            }
            child {
              kind: operator
              text: ")"
            }
            child {
              kind: operator
              text: "&gt;"
            }
            child {
              kind: name
              child {
                kind: name
                text: "msg_hdr"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "msg_len"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: goto
              text: "goto"
              child {
                kind: name
                text: "err"
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* Try to find item in queue, to prevent duplicate entries */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "memset"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "seq64be"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: sizeof
                    text: "sizeof"
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "seq64be"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "6"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            text: "("
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
              }        
            text: ")"
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "seq"
                    }
                  }
                  child {
                    kind: operator
                    text: "&gt;&gt;"
                  }
                  child {
                    kind: literal
                    text: "8"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "7"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "unsigned"
          }
          child {
            kind: name
            text: "char"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "seq"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "item"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "pqueue_find"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "d1"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "buffered_messages"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "seq64be"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* If we already have an entry and this one is a fragment,
         * don't discard it and rather try to reassemble it.
         */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "item"
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              text: "NULL"
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: name
              text: "frag_len"
            }
            child {
              kind: operator
              text: "&lt;"
            }
            child {
              kind: name
              child {
                kind: name
                text: "msg_hdr"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "msg_len"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "item"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "NULL"
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* Discard the message if sequence number was already there, is
         * too far in the future, already in the queue or if we received
         * a FINISHED before the SERVER_HELLO, which then must be a stale
         * retransmit.
         */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "msg_hdr"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "seq"
              }
            }
            child {
              kind: operator
              text: "&lt;="
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "d1"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "handshake_read_seq"
              }
            }
            child {
              kind: operator
              text: "||"
            }
            child {
              kind: name
              child {
                kind: name
                text: "msg_hdr"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "seq"
              }
            }
            child {
              kind: operator
              text: "&gt;"
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "d1"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "handshake_read_seq"
              }
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: literal
              text: "10"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "||"
            }
            child {
              kind: name
              text: "item"
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              text: "NULL"
            }
            child {
              kind: operator
              text: "||"
            }
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "d1"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "handshake_read_seq"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: literal
              text: "0"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: name
              child {
                kind: name
                text: "msg_hdr"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "type"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "SSL3_MT_FINISHED"
            }
            child {
              kind: operator
              text: ")"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: decl_stmt
              child {
                kind: decl
                child {
                  kind: type
                  child {
                    kind: name
                    text: "unsigned"
                  }
                  child {
                    kind: name
                    text: "char"
                  }
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "devnull"
                  }
                  child {
                    kind: index
                    text: "["
                    child {
                      kind: expr
                      child {
                        kind: literal
                        text: "256"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: "]"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: while
              text: "while"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "frag_len"
                  }
                  }        
                text: ")"
              }
              child {
                kind: block
                text: "{"
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "i"
                    }
                    child {
                      kind: operator
                      text: "="
                    }
                    child {
                      kind: call
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "method"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "ssl_read_bytes"
                        }
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "s"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "SSL3_RT_HANDSHAKE"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "devnull"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: ternary
                              child {
                                kind: condition
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    text: "frag_len"
                                  }
                                  child {
                                    kind: operator
                                    text: "&gt;"
                                  }
                                  child {
                                    kind: sizeof
                                    text: "sizeof"
                                    child {
                                      kind: argument_list
                                      text: "("
                                      child {
                                        kind: argument
                                        child {
                                          kind: expr
                                          child {
                                            kind: name
                                            text: "devnull"
                                          }
                                        }
                                        }        
                                      text: ")"
                                    }
                                  }
                                  }        
                                text: "?"
                              }
                              child {
                                kind: then
                                child {
                                  kind: expr
                                  child {
                                    kind: sizeof
                                    text: "sizeof"
                                    child {
                                      kind: argument_list
                                      text: "("
                                      child {
                                        kind: argument
                                        child {
                                          kind: expr
                                          child {
                                            kind: name
                                            text: "devnull"
                                          }
                                        }
                                        }        
                                      text: ")"
                                    }
                                  }
                                }
                              }
                              child {
                                kind: else
                                text: ":"
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    text: "frag_len"
                                  }
                                }
                              }
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: literal
                              text: "0"
                              literal {
                                type: "number"
                              }
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: if
                  text: "if"
                  child {
                    kind: condition
                    text: "("
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "i"
                      }
                      child {
                        kind: operator
                        text: "&lt;="
                      }
                      child {
                        kind: literal
                        text: "0"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ")"
                  }
                  child {
                    kind: then
                    child {
                      kind: block
                      child {
                        kind: goto
                        text: "goto"
                        child {
                          kind: name
                          text: "err"
                          }        
                        text: ";"
                      }
                    }
                  }
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "frag_len"
                    }
                    child {
                      kind: operator
                      text: "-="
                    }
                    child {
                      kind: name
                      text: "i"
                    }
                    }        
                  text: ";"
                  }        
                text: "}"
              }
              }        
            text: "}"
          }
        }
        child {
          kind: else
          text: "else"
          child {
            kind: block
            text: "{"
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "frag_len"
                  }
                  child {
                    kind: operator
                    text: "&amp;&amp;"
                  }
                  child {
                    kind: name
                    text: "frag_len"
                  }
                  child {
                    kind: operator
                    text: "&lt;"
                  }
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_len"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "dtls1_reassemble_fragment"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "s"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "msg_hdr"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "ok"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "frag"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_hm_fragment_new"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "frag_len"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "frag"
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: name
                    text: "NULL"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  child {
                    kind: goto
                    text: "goto"
                    child {
                      kind: name
                      text: "err"
                      }        
                    text: ";"
                  }
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "memcpy"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "&amp;"
                        }
                        child {
                          kind: operator
                          text: "("
                        }
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "frag"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_header"
                          }
                        }
                        child {
                          kind: operator
                          text: ")"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "msg_hdr"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: sizeof
                          text: "sizeof"
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: operator
                                  text: "*"
                                }
                                child {
                                  kind: name
                                  text: "msg_hdr"
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "frag_len"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: comment
                    text: "/* read the body of the fragment (header has already been read */"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "i"
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: call
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "method"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "ssl_read_bytes"
                          }
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "s"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "SSL3_RT_HANDSHAKE"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "frag"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "fragment"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "frag_len"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: literal
                                text: "0"
                                literal {
                                  type: "number"
                                }
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: if
                    text: "if"
                    child {
                      kind: condition
                      text: "("
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "i"
                        }
                        child {
                          kind: operator
                          text: "&lt;="
                        }
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                        child {
                          kind: operator
                          text: "||"
                        }
                        child {
                          kind: operator
                          text: "("
                        }
                        child {
                          kind: name
                          text: "unsigned"
                        }
                        child {
                          kind: name
                          text: "long"
                        }
                        child {
                          kind: operator
                          text: ")"
                        }
                        child {
                          kind: name
                          text: "i"
                        }
                        child {
                          kind: operator
                          text: "!="
                        }
                        child {
                          kind: name
                          text: "frag_len"
                        }
                        }        
                      text: ")"
                    }
                    child {
                      kind: then
                      child {
                        kind: block
                        child {
                          kind: goto
                          text: "goto"
                          child {
                            kind: name
                            text: "err"
                            }        
                          text: ";"
                        }
                      }
                    }
                    }        
                  text: "}"
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "memset"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "seq64be"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: sizeof
                          text: "sizeof"
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "seq64be"
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "seq64be"
                  }
                  child {
                    kind: index
                    text: "["
                    child {
                      kind: expr
                      child {
                        kind: literal
                        text: "6"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: "]"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  text: "("
                  child {
                    kind: name
                    text: "unsigned"
                  }
                  child {
                    kind: name
                    text: "char"
                    }        
                  text: ")"
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "msg_hdr"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "seq"
                          }
                        }
                        child {
                          kind: operator
                          text: "&gt;&gt;"
                        }
                        child {
                          kind: literal
                          text: "8"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "seq64be"
                  }
                  child {
                    kind: index
                    text: "["
                    child {
                      kind: expr
                      child {
                        kind: literal
                        text: "7"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: "]"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  text: "("
                  child {
                    kind: name
                    text: "unsigned"
                  }
                  child {
                    kind: name
                    text: "char"
                    }        
                  text: ")"
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "msg_hdr"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "seq"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "item"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "pitem_new"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "seq64be"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "frag"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "item"
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: name
                    text: "NULL"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  child {
                    kind: goto
                    text: "goto"
                    child {
                      kind: name
                      text: "err"
                      }        
                    text: ";"
                  }
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "pqueue_insert"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "d1"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "buffered_messages"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "item"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "DTLS1_HM_FRAGMENT_RETRY"
          }
          }        
        text: ";"
      }
      child {
        kind: label
        child {
          kind: name
          text: "err"
          }        
        text: ":"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_hm_fragment_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "frag"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "item"
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "item"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: name
            text: "ok"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "i"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "long"
      }
    }
    child {
      kind: name
      text: "dtls1_get_message_fragment"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "st1"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "stn"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "max"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "ok"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
          }
          child {
            kind: name
            child {
              kind: name
              text: "wire"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: name
                  text: "DTLS1_HM_HEADER_LENGTH"
                }
                }        
              text: "]"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "len"
          }
          }        
        text: ","
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "frag_off"
          }
          }        
        text: ","
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "frag_len"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "i"
          }
          }        
        text: ","
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "al"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              child {
                kind: name
                text: "struct"
              }
              child {
                kind: name
                text: "hm_header_st"
              }
            }
          }
          child {
            kind: name
            text: "msg_hdr"
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* see if we have the required fragment already */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              text: "frag_len"
            }
            child {
              kind: operator
              text: "="
            }
            child {
              kind: call
              child {
                kind: name
                text: "dtls1_retrieve_buffered_fragment"
              }
              child {
                kind: argument_list
                text: "("
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "s"
                    }
                  }
                  }        
                text: ","
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "max"
                    }
                  }
                  }        
                text: ","
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "ok"
                    }
                  }
                  }        
                text: ")"
              }
            }
            child {
              kind: operator
              text: ")"
            }
            child {
              kind: operator
              text: "||"
            }
            child {
              kind: operator
              text: "*"
            }
            child {
              kind: name
              text: "ok"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: operator
                    text: "*"
                  }
                  child {
                    kind: name
                    text: "ok"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "init_num"
                        }
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: name
                        text: "frag_len"
                      }
                      }        
                    text: ";"
                  }
                }
              }
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: name
                  text: "frag_len"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: comment
        text: "/* read handshake message header */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "i"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "method"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "ssl_read_bytes"
              }
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "SSL3_RT_HANDSHAKE"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "wire"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "DTLS1_HM_HEADER_LENGTH"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "i"
            }
            child {
              kind: operator
              text: "&lt;="
            }
            child {
              kind: literal
              text: "0"
              literal {
                type: "number"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: comment
            text: "/* nbio, or an error */"
          }
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "rwstate"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "SSL_READING"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: name
                  text: "ok"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: name
                  text: "i"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: comment
        text: "/* Handshake fails if message header is incomplete */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "i"
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              text: "DTLS1_HM_HEADER_LENGTH"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "al"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "SSL_AD_UNEXPECTED_MESSAGE"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "SSLerr"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_F_DTLS1_GET_MESSAGE_FRAGMENT"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_R_UNEXPECTED_MESSAGE"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: goto
              text: "goto"
              child {
                kind: name
                text: "f_err"
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: comment
        text: "/* parse the message fragment header */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "dtls1_get_message_header"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "wire"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: operator
                    text: "&amp;"
                  }
                  child {
                    kind: name
                    text: "msg_hdr"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* 
         * if this is a future (or stale) message it gets buffered
         * (or dropped)--no further processing at this time
         * While listening, we accept seq 1 (ClientHello with cookie)
         * although we're still expecting seq 0 (ClientHello)
         */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "msg_hdr"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "seq"
              }
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "d1"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "handshake_read_seq"
              }
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "d1"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "listen"
              }
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: name
              child {
                kind: name
                text: "msg_hdr"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "seq"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: literal
              text: "1"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: ")"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_process_out_of_seq_message"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "&amp;"
                        }
                        child {
                          kind: name
                          text: "msg_hdr"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "ok"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "len"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "msg_len"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "frag_off"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "frag_off"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "frag_len"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "frag_len"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "frag_len"
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: name
              text: "frag_len"
            }
            child {
              kind: operator
              text: "&lt;"
            }
            child {
              kind: name
              text: "len"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_reassemble_fragment"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "&amp;"
                        }
                        child {
                          kind: name
                          text: "msg_hdr"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "ok"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "server"
              }
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "d1"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "r_msg_hdr"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "frag_off"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: literal
              text: "0"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: name
              child {
                kind: name
                text: "wire"
              }
              child {
                kind: index
                text: "["
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  }        
                text: "]"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "SSL3_MT_HELLO_REQUEST"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: comment
              text: "/* The server may always send 'Hello Request' messages --
                 * we are doing a handshake anyway now, so ignore them
                 * if their format is correct. Does not count for
                 * 'Finished' MAC. */"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "wire"
                    }
                    child {
                      kind: index
                      text: "["
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "1"
                          literal {
                            type: "number"
                          }
                        }
                        }        
                      text: "]"
                    }
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  child {
                    kind: operator
                    text: "&amp;&amp;"
                  }
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "wire"
                    }
                    child {
                      kind: index
                      text: "["
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "2"
                          literal {
                            type: "number"
                          }
                        }
                        }        
                      text: "]"
                    }
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  child {
                    kind: operator
                    text: "&amp;&amp;"
                  }
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "wire"
                    }
                    child {
                      kind: index
                      text: "["
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "3"
                          literal {
                            type: "number"
                          }
                        }
                        }        
                      text: "]"
                    }
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: if
                    text: "if"
                    child {
                      kind: condition
                      text: "("
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_callback"
                          }
                        }
                        }        
                      text: ")"
                    }
                    child {
                      kind: then
                      child {
                        kind: block
                        child {
                          kind: expr_stmt
                          child {
                            kind: expr
                            child {
                              kind: call
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "msg_callback"
                                }
                              }
                              child {
                                kind: argument_list
                                text: "("
                                child {
                                  kind: argument
                                  child {
                                    kind: expr
                                    child {
                                      kind: literal
                                      text: "0"
                                      literal {
                                        type: "number"
                                      }
                                    }
                                  }
                                  }        
                                text: ","
                                child {
                                  kind: argument
                                  child {
                                    kind: expr
                                    child {
                                      kind: name
                                      child {
                                        kind: name
                                        text: "s"
                                      }
                                      child {
                                        kind: operator
                                        text: "-&gt;"
                                      }
                                      child {
                                        kind: name
                                        text: "version"
                                      }
                                    }
                                  }
                                  }        
                                text: ","
                                child {
                                  kind: argument
                                  child {
                                    kind: expr
                                    child {
                                      kind: name
                                      text: "SSL3_RT_HANDSHAKE"
                                    }
                                  }
                                  }        
                                text: ","
                                child {
                                  kind: argument
                                  child {
                                    kind: expr
                                    child {
                                      kind: name
                                      text: "wire"
                                    }
                                  }
                                  }        
                                text: ","
                                child {
                                  kind: argument
                                  child {
                                    kind: expr
                                    child {
                                      kind: name
                                      text: "DTLS1_HM_HEADER_LENGTH"
                                    }
                                  }
                                  }        
                                text: ","
                                child {
                                  kind: argument
                                  child {
                                    kind: expr
                                    child {
                                      kind: name
                                      text: "s"
                                    }
                                  }
                                  }        
                                text: ","
                                child {
                                  kind: argument
                                  child {
                                    kind: expr
                                    child {
                                      kind: name
                                      child {
                                        kind: name
                                        text: "s"
                                      }
                                      child {
                                        kind: operator
                                        text: "-&gt;"
                                      }
                                      child {
                                        kind: name
                                        text: "msg_callback_arg"
                                      }
                                    }
                                  }
                                  }        
                                text: ")"
                              }
                            }
                            }        
                          text: ";"
                        }
                      }
                    }
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "init_num"
                        }
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: literal
                        text: "0"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "dtls1_get_message_fragment"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "s"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "st1"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "stn"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "max"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "ok"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
              child {
                kind: else
                text: "else"
                child {
                  kind: comment
                  text: "/* Incorrectly formated Hello request */"
                }
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "al"
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: name
                        text: "SSL_AD_UNEXPECTED_MESSAGE"
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "SSLerr"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "SSL_F_DTLS1_GET_MESSAGE_FRAGMENT"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "SSL_R_UNEXPECTED_MESSAGE"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: goto
                    text: "goto"
                    child {
                      kind: name
                      text: "f_err"
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
              }        
            text: "}"
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              text: "al"
            }
            child {
              kind: operator
              text: "="
            }
            child {
              kind: call
              child {
                kind: name
                text: "dtls1_preprocess_fragment"
              }
              child {
                kind: argument_list
                text: "("
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "s"
                    }
                  }
                  }        
                text: ","
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: operator
                      text: "&amp;"
                    }
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                  }
                  }        
                text: ","
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "max"
                    }
                  }
                  }        
                text: ")"
              }
            }
            child {
              kind: operator
              text: ")"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: goto
              text: "goto"
              child {
                kind: name
                text: "f_err"
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* XDTLS:  ressurect this when restart is in place */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "state"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "stn"
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "frag_len"
            }
            child {
              kind: operator
              text: "&gt;"
            }
            child {
              kind: literal
              text: "0"
              literal {
                type: "number"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: decl_stmt
              child {
                kind: decl
                child {
                  kind: type
                  child {
                    kind: name
                    text: "unsigned"
                  }
                  child {
                    kind: name
                    text: "char"
                  }
                  child {
                    kind: modifier
                    text: "*"
                  }
                }
                child {
                  kind: name
                  text: "p"
                }
                child {
                  kind: init
                  text: "="
                  child {
                    kind: expr
                    child {
                      kind: operator
                      text: "("
                    }
                    child {
                      kind: name
                      text: "unsigned"
                    }
                    child {
                      kind: name
                      text: "char"
                    }
                    child {
                      kind: operator
                      text: "*"
                    }
                    child {
                      kind: operator
                      text: ")"
                    }
                    child {
                      kind: name
                      child {
                        kind: name
                        text: "s"
                      }
                      child {
                        kind: operator
                        text: "-&gt;"
                      }
                      child {
                        kind: name
                        text: "init_buf"
                      }
                      child {
                        kind: operator
                        text: "-&gt;"
                      }
                      child {
                        kind: name
                        text: "data"
                      }
                    }
                    child {
                      kind: operator
                      text: "+"
                    }
                    child {
                      kind: name
                      text: "DTLS1_HM_HEADER_LENGTH"
                    }
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "i"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "method"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "ssl_read_bytes"
                    }
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL3_RT_HANDSHAKE"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "&amp;"
                        }
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "p"
                          }
                          child {
                            kind: index
                            text: "["
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "frag_off"
                              }
                              }        
                            text: "]"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "frag_len"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: comment
              text: "/* XDTLS:  fix this--message fragments cannot span multiple packets */"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "i"
                  }
                  child {
                    kind: operator
                    text: "&lt;="
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "rwstate"
                        }
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: name
                        text: "SSL_READING"
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: operator
                        text: "*"
                      }
                      child {
                        kind: name
                        text: "ok"
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: literal
                        text: "0"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "i"
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
              }        
            text: "}"
          }
        }
        child {
          kind: else
          text: "else"
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "i"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* XDTLS:  an incorrectly formatted fragment should cause the 
         * handshake to fail */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "i"
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              text: "int"
            }
            child {
              kind: operator
              text: ")"
            }
            child {
              kind: name
              text: "frag_len"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "al"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "SSL3_AD_ILLEGAL_PARAMETER"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "SSLerr"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_F_DTLS1_GET_MESSAGE_FRAGMENT"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL3_AD_ILLEGAL_PARAMETER"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: goto
              text: "goto"
              child {
                kind: name
                text: "f_err"
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: name
            text: "ok"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "1"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Note that s-&gt;init_num is *not* used as current offset in
         * s-&gt;init_buf-&gt;data, but as a counter summing up fragments'
         * lengths: as soon as they sum up to handshake packet
         * length, we assume we have got all the fragments. */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "init_num"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "frag_len"
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "frag_len"
          }
          }        
        text: ";"
      }
      child {
        kind: label
        child {
          kind: name
          text: "f_err"
          }        
        text: ":"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "ssl3_send_alert"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "SSL3_AL_FATAL"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "al"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "init_num"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: name
            text: "ok"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: operator
            text: "("
          }
          child {
            kind: operator
            text: "-"
          }
          child {
            kind: literal
            text: "1"
            literal {
              type: "number"
            }
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_send_finished"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "a"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "b"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: specifier
              text: "const"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "sender"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "slen"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "p"
          }
          }        
        text: ","
        child {
          kind: modifier
          text: "*"
        }
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "d"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "i"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "l"
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "state"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "a"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "d"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: operator
                  text: "("
                }
                child {
                  kind: name
                  text: "unsigned"
                }
                child {
                  kind: name
                  text: "char"
                }
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: operator
                  text: ")"
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_buf"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "data"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "p"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: operator
                  text: "&amp;"
                }
                child {
                  kind: operator
                  text: "("
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "d"
                  }
                  child {
                    kind: index
                    text: "["
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "DTLS1_HM_HEADER_LENGTH"
                      }
                      }        
                    text: "]"
                  }
                }
                child {
                  kind: operator
                  text: ")"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "i"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "method"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "ssl3_enc"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "final_finish_mac"
                    }
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "sender"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "slen"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "s3"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "tmp"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "finish_md"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "s3"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "tmp"
                  }
                  child {
                    kind: operator
                    text: "."
                  }
                  child {
                    kind: name
                    text: "finish_md_len"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "i"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "memcpy"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "p"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "s3"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "tmp"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "finish_md"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "i"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "p"
                }
                child {
                  kind: operator
                  text: "+="
                }
                child {
                  kind: name
                  text: "i"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "l"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "i"
                }
                }        
              text: ";"
            }
            child {
              kind: comment
              text: "/* Copy the finished so we can use it for
         * renegotiation checks
         */"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "type"
                    }
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: name
                    text: "SSL_ST_CONNECT"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "OPENSSL_assert"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "i"
                              }
                              child {
                                kind: operator
                                text: "&lt;="
                              }
                              child {
                                kind: name
                                text: "EVP_MAX_MD_SIZE"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "memcpy"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "s3"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "previous_client_finished"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "s3"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "tmp"
                                }
                                child {
                                  kind: operator
                                  text: "."
                                }
                                child {
                                  kind: name
                                  text: "finish_md"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "i"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "s3"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "previous_client_finished_len"
                        }
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: name
                        text: "i"
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
              child {
                kind: else
                text: "else"
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "OPENSSL_assert"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "i"
                              }
                              child {
                                kind: operator
                                text: "&lt;="
                              }
                              child {
                                kind: name
                                text: "EVP_MAX_MD_SIZE"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "memcpy"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "s3"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "previous_server_finished"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "s3"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "tmp"
                                }
                                child {
                                  kind: operator
                                  text: "."
                                }
                                child {
                                  kind: name
                                  text: "finish_md"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "i"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "s3"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "previous_server_finished_len"
                        }
                      }
                      child {
                        kind: operator
                        text: "="
                      }
                      child {
                        kind: name
                        text: "i"
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
            }
            child {
              kind: ifdef
              text: "#"
              child {
                kind: directive
                text: "ifdef"
              }
              child {
                kind: name
                text: "OPENSSL_SYS_WIN16"
              }
            }
            child {
              kind: comment
              text: "/* MSVC 1.5 does not clear the top bytes of the word unless
                 * I do this.
                 */"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "l"
                }
                child {
                  kind: operator
                  text: "&amp;="
                }
                child {
                  kind: literal
                  text: "0xffff"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: endif
              text: "#"
              child {
                kind: directive
                text: "endif"
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "d"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_set_message_header"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "d"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL3_MT_FINISHED"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "l"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "l"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_num"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: operator
                  text: "("
                }
                child {
                  kind: name
                  text: "int"
                }
                child {
                  kind: operator
                  text: ")"
                }
                child {
                  kind: name
                  text: "l"
                }
                child {
                  kind: operator
                  text: "+"
                }
                child {
                  kind: name
                  text: "DTLS1_HM_HEADER_LENGTH"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_off"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: comment
              text: "/* buffer the message to handle re-xmits */"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_buffer_message"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "state"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "b"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: comment
        text: "/* SSL3_ST_SEND_xxxxxx_HELLO_B */"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: operator
            text: "("
          }
          child {
            kind: call
            child {
              kind: name
              text: "dtls1_do_write"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "SSL3_RT_HANDSHAKE"
                  }
                }
                }        
              text: ")"
            }
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: comment
    text: "/* for these 2 messages, we need to
 * ssl-&gt;enc_read_ctx                    re-init
 * ssl-&gt;s3-&gt;read_sequence               zero
 * ssl-&gt;s3-&gt;read_mac_secret             re-init
 * ssl-&gt;session-&gt;read_sym_enc           assign
 * ssl-&gt;session-&gt;read_compression       assign
 * ssl-&gt;session-&gt;read_hash              assign
 */"
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_send_change_cipher_spec"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "a"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "b"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "p"
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "state"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "a"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "p"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: operator
                  text: "("
                }
                child {
                  kind: name
                  text: "unsigned"
                }
                child {
                  kind: name
                  text: "char"
                }
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: operator
                  text: ")"
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_buf"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "data"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: name
                  text: "p"
                }
                child {
                  kind: operator
                  text: "++"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "SSL3_MT_CCS"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "d1"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "handshake_write_seq"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "d1"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "next_handshake_write_seq"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_num"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "DTLS1_CCS_HEADER_LENGTH"
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "version"
                    }
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: name
                    text: "DTLS1_BAD_VER"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "d1"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "next_handshake_write_seq"
                        }
                      }
                      child {
                        kind: operator
                        text: "++"
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "s2n"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "d1"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "handshake_write_seq"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "p"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "init_num"
                        }
                      }
                      child {
                        kind: operator
                        text: "+="
                      }
                      child {
                        kind: literal
                        text: "2"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "init_off"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_set_message_header_int"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL3_MT_CCS"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "d1"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "handshake_write_seq"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: comment
              text: "/* buffer the message to handle re-xmits */"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_buffer_message"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "1"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "state"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "b"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: comment
        text: "/* SSL3_ST_CW_CHANGE_B */"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: operator
            text: "("
          }
          child {
            kind: call
            child {
              kind: name
              text: "dtls1_do_write"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "SSL3_RT_CHANGE_CIPHER_SPEC"
                  }
                }
                }        
              text: ")"
            }
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_add_cert_to_buf"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "BUF_MEM"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "buf"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "l"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "X509"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "x"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "n"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "p"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "n"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "i2d_X509"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "x"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "NULL"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: call
              child {
                kind: name
                text: "BUF_MEM_grow_clean"
              }
              child {
                kind: argument_list
                text: "("
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "buf"
                    }
                  }
                  }        
                text: ","
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: call
                      text: "("
                      child {
                        kind: name
                        text: "int"
                        }        
                      text: ")"
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "n"
                            }
                            child {
                              kind: operator
                              text: "+"
                            }
                            child {
                              kind: operator
                              text: "("
                            }
                            child {
                              kind: operator
                              text: "*"
                            }
                            child {
                              kind: name
                              text: "l"
                            }
                            child {
                              kind: operator
                              text: ")"
                            }
                            child {
                              kind: operator
                              text: "+"
                            }
                            child {
                              kind: literal
                              text: "3"
                              literal {
                                type: "number"
                              }
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                  }
                  }        
                text: ")"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "SSLerr"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_F_DTLS1_ADD_CERT_TO_BUF"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "ERR_R_BUF_LIB"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "unsigned"
          }
          child {
            kind: name
            text: "char"
          }
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: operator
            text: "&amp;"
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            child {
              kind: name
              text: "buf"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "data"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: name
                  text: "l"
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "l2n3"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "n"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "i2d_X509"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "x"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: operator
                    text: "&amp;"
                  }
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: name
            text: "l"
          }
          child {
            kind: operator
            text: "+="
          }
          child {
            kind: name
            text: "n"
          }
          child {
            kind: operator
            text: "+"
          }
          child {
            kind: literal
            text: "3"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: literal
            text: "1"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "unsigned"
      }
      child {
        kind: name
        text: "long"
      }
    }
    child {
      kind: name
      text: "dtls1_output_cert_chain"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "X509"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "x"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "p"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "i"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "l"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: literal
                text: "3"
                literal {
                  type: "number"
                }
              }
              child {
                kind: operator
                text: "+"
              }
              child {
                kind: name
                text: "DTLS1_HM_HEADER_LENGTH"
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "BUF_MEM"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "buf"
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* TLSv1 sends a chain with nothing in it, instead of an alert */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "buf"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "init_buf"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: call
              child {
                kind: name
                text: "BUF_MEM_grow_clean"
              }
              child {
                kind: argument_list
                text: "("
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "buf"
                    }
                  }
                  }        
                text: ","
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: literal
                      text: "10"
                      literal {
                        type: "number"
                      }
                    }
                  }
                  }        
                text: ")"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "SSLerr"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_F_DTLS1_OUTPUT_CERT_CHAIN"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "ERR_R_BUF_LIB"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: operator
                  text: "("
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                child {
                  kind: operator
                  text: ")"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "x"
            }
            child {
              kind: operator
              text: "!="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: decl_stmt
              child {
                kind: decl
                child {
                  kind: type
                  child {
                    kind: name
                    text: "X509_STORE_CTX"
                  }
                }
                child {
                  kind: name
                  text: "xs_ctx"
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: operator
                    text: "!"
                  }
                  child {
                    kind: call
                    child {
                      kind: name
                      text: "X509_STORE_CTX_init"
                    }
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: operator
                            text: "&amp;"
                          }
                          child {
                            kind: name
                            text: "xs_ctx"
                          }
                        }
                        }        
                      text: ","
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "s"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "ctx"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "cert_store"
                            }
                          }
                        }
                        }        
                      text: ","
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "x"
                          }
                        }
                        }        
                      text: ","
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "NULL"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "SSLerr"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "SSL_F_DTLS1_OUTPUT_CERT_CHAIN"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "ERR_R_X509_LIB"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: operator
                        text: "("
                      }
                      child {
                        kind: literal
                        text: "0"
                        literal {
                          type: "number"
                        }
                      }
                      child {
                        kind: operator
                        text: ")"
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "X509_verify_cert"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "&amp;"
                        }
                        child {
                          kind: name
                          text: "xs_ctx"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: comment
              text: "/* Don't leave errors in the queue */"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "ERR_clear_error"
                  }
                  child {
                    kind: argument_list
                    text: "()"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: for
              text: "for"
              child {
                kind: control
                text: "("
                child {
                  kind: init
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "i"
                    }
                    child {
                      kind: operator
                      text: "="
                    }
                    child {
                      kind: literal
                      text: "0"
                      literal {
                        type: "number"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: condition
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "i"
                    }
                    child {
                      kind: operator
                      text: "&lt;"
                    }
                    child {
                      kind: call
                      child {
                        kind: name
                        text: "sk_X509_num"
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              child {
                                kind: name
                                text: "xs_ctx"
                              }
                              child {
                                kind: operator
                                text: "."
                              }
                              child {
                                kind: name
                                text: "chain"
                              }
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: incr
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "i"
                    }
                    child {
                      kind: operator
                      text: "++"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: block
                text: "{"
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "x"
                    }
                    child {
                      kind: operator
                      text: "="
                    }
                    child {
                      kind: call
                      child {
                        kind: name
                        text: "sk_X509_value"
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              child {
                                kind: name
                                text: "xs_ctx"
                              }
                              child {
                                kind: operator
                                text: "."
                              }
                              child {
                                kind: name
                                text: "chain"
                              }
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "i"
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: if
                  text: "if"
                  child {
                    kind: condition
                    text: "("
                    child {
                      kind: expr
                      child {
                        kind: operator
                        text: "!"
                      }
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "dtls1_add_cert_to_buf"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "buf"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: operator
                                text: "&amp;"
                              }
                              child {
                                kind: name
                                text: "l"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "x"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ")"
                  }
                  child {
                    kind: then
                    child {
                      kind: block
                      text: "{"
                      child {
                        kind: expr_stmt
                        child {
                          kind: expr
                          child {
                            kind: call
                            child {
                              kind: name
                              text: "X509_STORE_CTX_cleanup"
                            }
                            child {
                              kind: argument_list
                              text: "("
                              child {
                                kind: argument
                                child {
                                  kind: expr
                                  child {
                                    kind: operator
                                    text: "&amp;"
                                  }
                                  child {
                                    kind: name
                                    text: "xs_ctx"
                                  }
                                }
                                }        
                              text: ")"
                            }
                          }
                          }        
                        text: ";"
                      }
                      child {
                        kind: return
                        text: "return"
                        child {
                          kind: expr
                          child {
                            kind: literal
                            text: "0"
                            literal {
                              type: "number"
                            }
                          }
                          }        
                        text: ";"
                        }        
                      text: "}"
                    }
                  }
                  }        
                text: "}"
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "X509_STORE_CTX_cleanup"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "&amp;"
                        }
                        child {
                          kind: name
                          text: "xs_ctx"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: comment
        text: "/* Thawte special :-) */"
      }
      child {
        kind: for
        text: "for"
        child {
          kind: control
          text: "("
          child {
            kind: init
            child {
              kind: expr
              child {
                kind: name
                text: "i"
              }
              child {
                kind: operator
                text: "="
              }
              child {
                kind: literal
                text: "0"
                literal {
                  type: "number"
                }
              }
              }        
            text: ";"
          }
          child {
            kind: condition
            child {
              kind: expr
              child {
                kind: name
                text: "i"
              }
              child {
                kind: operator
                text: "&lt;"
              }
              child {
                kind: call
                child {
                  kind: name
                  text: "sk_X509_num"
                }
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "ctx"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "extra_certs"
                        }
                      }
                    }
                    }        
                  text: ")"
                }
              }
              }        
            text: ";"
          }
          child {
            kind: incr
            child {
              kind: expr
              child {
                kind: name
                text: "i"
              }
              child {
                kind: operator
                text: "++"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: block
          text: "{"
          child {
            kind: expr_stmt
            child {
              kind: expr
              child {
                kind: name
                text: "x"
              }
              child {
                kind: operator
                text: "="
              }
              child {
                kind: call
                child {
                  kind: name
                  text: "sk_X509_value"
                }
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "ctx"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "extra_certs"
                        }
                      }
                    }
                    }        
                  text: ","
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "i"
                      }
                    }
                    }        
                  text: ")"
                }
              }
              }        
            text: ";"
          }
          child {
            kind: if
            text: "if"
            child {
              kind: condition
              text: "("
              child {
                kind: expr
                child {
                  kind: operator
                  text: "!"
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_add_cert_to_buf"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "buf"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "&amp;"
                        }
                        child {
                          kind: name
                          text: "l"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "x"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ")"
            }
            child {
              kind: then
              child {
                kind: block
                child {
                  kind: return
                  text: "return"
                  child {
                    kind: expr
                    child {
                      kind: literal
                      text: "0"
                      literal {
                        type: "number"
                      }
                    }
                    }        
                  text: ";"
                }
              }
            }
            }        
          text: "}"
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "l"
          }
          child {
            kind: operator
            text: "-="
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: literal
            text: "3"
            literal {
              type: "number"
            }
          }
          child {
            kind: operator
            text: "+"
          }
          child {
            kind: name
            text: "DTLS1_HM_HEADER_LENGTH"
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "unsigned"
          }
          child {
            kind: name
            text: "char"
          }
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: operator
            text: "&amp;"
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            child {
              kind: name
              text: "buf"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "data"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: name
                  text: "DTLS1_HM_HEADER_LENGTH"
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "l2n3"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "l"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "l"
          }
          child {
            kind: operator
            text: "+="
          }
          child {
            kind: literal
            text: "3"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "unsigned"
          }
          child {
            kind: name
            text: "char"
          }
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: operator
            text: "&amp;"
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            child {
              kind: name
              text: "buf"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "data"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "dtls1_set_message_header"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "SSL3_MT_CERTIFICATE"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "l"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "l"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "l"
          }
          child {
            kind: operator
            text: "+="
          }
          child {
            kind: name
            text: "DTLS1_HM_HEADER_LENGTH"
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "l"
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_read_failed"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "code"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "code"
            }
            child {
              kind: operator
              text: "&gt;"
            }
            child {
              kind: literal
              text: "0"
              literal {
                type: "number"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "fprintf"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "stderr"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "\"invalid state reached %s:%d\""
                          literal {
                            type: "string"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "__FILE__"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "__LINE__"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: literal
                  text: "1"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: call
              child {
                kind: name
                text: "dtls1_is_timer_expired"
              }
              child {
                kind: argument_list
                text: "("
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "s"
                    }
                  }
                  }        
                text: ")"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: comment
              text: "/* not a timeout, none of our business, 
                   let higher layers handle this.  in fact it's probably an error */"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: name
                  text: "code"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: ifndef
        text: "#"
        child {
          kind: directive
          text: "ifndef"
        }
        child {
          kind: name
          text: "OPENSSL_NO_HEARTBEATS"
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: call
              child {
                kind: name
                text: "SSL_in_init"
              }
              child {
                kind: argument_list
                text: "("
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "s"
                    }
                  }
                  }        
                text: ")"
              }
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "tlsext_hb_pending"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: comment
            text: "/* done, no need to send a retransmit */"
          }
          child {
            kind: else
            text: "#"
            child {
              kind: directive
              text: "else"
            }
          }
          child {
            kind: block
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: operator
                    text: "!"
                  }
                  child {
                    kind: call
                    child {
                      kind: name
                      text: "SSL_in_init"
                    }
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "s"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: comment
                  text: "/* done, no need to send a retransmit */"
                }
                child {
                  kind: endif
                  text: "#"
                  child {
                    kind: directive
                    text: "endif"
                  }
                }
                child {
                  kind: block
                  text: "{"
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "BIO_set_flags"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: call
                                child {
                                  kind: name
                                  text: "SSL_get_rbio"
                                }
                                child {
                                  kind: argument_list
                                  text: "("
                                  child {
                                    kind: argument
                                    child {
                                      kind: expr
                                      child {
                                        kind: name
                                        text: "s"
                                      }
                                    }
                                    }        
                                  text: ")"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "BIO_FLAGS_READ"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "code"
                      }
                      }        
                    text: ";"
                    }        
                  text: "}"
                }
              }
            }
          }
        }
      }
      child {
        kind: if
        text: "#"
        child {
          kind: directive
          text: "if"
        }
        child {
          kind: expr
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* for now, each alert contains only one record number */"
        }                                                                                              
      text: "item = pqueue_peek(state-&gt;rcvd_records);
        if ( item )
                {"
      child {
        kind: comment
        text: "/* send an alert immediately for all the missing records */"
        }                        
      text: "}
        else"
      child {
        kind: endif
        text: "#"
        child {
          kind: directive
          text: "endif"
        }
      }
      child {
        kind: if
        text: "#"
        child {
          kind: directive
          text: "if"
        }
        child {
          kind: expr
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* no more alert sending, just retransmit the last set of messages */"
        }                                                                                                                                                                                             
      text: "if ( state-&gt;timeout.read_timeouts &gt;= DTLS1_TMO_READ_COUNT)
                ssl3_send_alert(s,SSL3_AL_WARNING,
                        DTLS1_AD_MISSING_HANDSHAKE_MESSAGE);"
      child {
        kind: endif
        text: "#"
        child {
          kind: directive
          text: "endif"
        }
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "dtls1_handle_timeout"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_get_queue_priority"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "short"
            }
          }
          child {
            kind: name
            text: "seq"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "is_ccs"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: comment
        text: "/* The index of the retransmission queue actually is the message sequence number,
         * since the queue only contains messages of a single handshake. However, the
         * ChangeCipherSpec has no message sequence number and so using only the sequence
         * will result in the CCS and Finished having the same index. To prevent this,
         * the sequence number is multiplied by 2. In case of a CCS 1 is subtracted.
         * This does not only differ CSS and Finished, it also maintains the order of the
         * index (important for priority queues) and fits in the unsigned short variable.
         */"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "seq"
          }
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: literal
            text: "2"
            literal {
              type: "number"
            }
          }
          child {
            kind: operator
            text: "-"
          }
          child {
            kind: name
            text: "is_ccs"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_retransmit_buffered_messages"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "pqueue"
            }
          }
          child {
            kind: name
            text: "sent"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: name
                child {
                  kind: name
                  text: "s"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "d1"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "sent_messages"
                }
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "piterator"
            }
          }
          child {
            kind: name
            text: "iter"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "pitem"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "item"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "hm_fragment"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "frag"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "found"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: literal
                text: "0"
                literal {
                  type: "number"
                }
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "iter"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "pqueue_iterator"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "sent"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: for
        text: "for"
        child {
          kind: control
          text: "("
          child {
            kind: init
            child {
              kind: expr
              child {
                kind: name
                text: "item"
              }
              child {
                kind: operator
                text: "="
              }
              child {
                kind: call
                child {
                  kind: name
                  text: "pqueue_next"
                }
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: operator
                        text: "&amp;"
                      }
                      child {
                        kind: name
                        text: "iter"
                      }
                    }
                    }        
                  text: ")"
                }
              }
              }        
            text: ";"
          }
          child {
            kind: condition
            child {
              kind: expr
              child {
                kind: name
                text: "item"
              }
              child {
                kind: operator
                text: "!="
              }
              child {
                kind: name
                text: "NULL"
              }
              }        
            text: ";"
          }
          child {
            kind: incr
            child {
              kind: expr
              child {
                kind: name
                text: "item"
              }
              child {
                kind: operator
                text: "="
              }
              child {
                kind: call
                child {
                  kind: name
                  text: "pqueue_next"
                }
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: operator
                        text: "&amp;"
                      }
                      child {
                        kind: name
                        text: "iter"
                      }
                    }
                    }        
                  text: ")"
                }
              }
            }
            }        
          text: ")"
        }
        child {
          kind: block
          text: "{"
          child {
            kind: expr_stmt
            child {
              kind: expr
              child {
                kind: name
                text: "frag"
              }
              child {
                kind: operator
                text: "="
              }
              child {
                kind: operator
                text: "("
              }
              child {
                kind: name
                text: "hm_fragment"
              }
              child {
                kind: operator
                text: "*"
              }
              child {
                kind: operator
                text: ")"
              }
              child {
                kind: name
                child {
                  kind: name
                  text: "item"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "data"
                }
              }
              }        
            text: ";"
          }
          child {
            kind: if
            text: "if"
            child {
              kind: condition
              text: "("
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_retransmit_message"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "("
                        }
                        child {
                          kind: name
                          text: "unsigned"
                        }
                        child {
                          kind: name
                          text: "short"
                        }
                        child {
                          kind: operator
                          text: ")"
                        }
                        child {
                          kind: call
                          child {
                            kind: name
                            text: "dtls1_get_queue_priority"
                          }
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  child {
                                    kind: name
                                    text: "frag"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "msg_header"
                                  }
                                  child {
                                    kind: operator
                                    text: "."
                                  }
                                  child {
                                    kind: name
                                    text: "seq"
                                  }
                                }
                              }
                              }        
                            text: ","
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  child {
                                    kind: name
                                    text: "frag"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "msg_header"
                                  }
                                  child {
                                    kind: operator
                                    text: "."
                                  }
                                  child {
                                    kind: name
                                    text: "is_ccs"
                                  }
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "&amp;"
                        }
                        child {
                          kind: name
                          text: "found"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                child {
                  kind: operator
                  text: "&lt;="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                child {
                  kind: operator
                  text: "&amp;&amp;"
                }
                child {
                  kind: name
                  text: "found"
                }
                }        
              text: ")"
            }
            child {
              kind: then
              child {
                kind: block
                text: "{"
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: call
                      child {
                        kind: name
                        text: "fprintf"
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "stderr"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: literal
                              text: "\"dtls1_retransmit_message() failed\n\""
                              literal {
                                type: "string"
                              }
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: return
                  text: "return"
                  child {
                    kind: expr
                    child {
                      kind: operator
                      text: "-"
                    }
                    child {
                      kind: literal
                      text: "1"
                      literal {
                        type: "number"
                      }
                    }
                    }        
                  text: ";"
                  }        
                text: "}"
              }
            }
            }        
          text: "}"
        }
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: literal
            text: "1"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_buffer_message"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "is_ccs"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "pitem"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "item"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "hm_fragment"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "frag"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
          }
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "8"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* this function is called immediately after a message has 
         * been serialized */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "OPENSSL_assert"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "init_off"
                    }
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "frag"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "dtls1_hm_fragment_new"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "init_num"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "memcpy"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "frag"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "fragment"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "init_buf"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "data"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "init_num"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "is_ccs"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_assert"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "d1"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "w_msg_hdr"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "msg_len"
                          }
                        }
                        child {
                          kind: operator
                          text: "+"
                        }
                        child {
                          kind: operator
                          text: "("
                        }
                        child {
                          kind: ternary
                          child {
                            kind: condition
                            child {
                              kind: expr
                              child {
                                kind: operator
                                text: "("
                              }
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "version"
                                }
                              }
                              child {
                                kind: operator
                                text: "=="
                              }
                              child {
                                kind: name
                                text: "DTLS1_VERSION"
                              }
                              child {
                                kind: operator
                                text: ")"
                              }
                              }        
                            text: "?"
                          }
                          child {
                            kind: then
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "DTLS1_CCS_HEADER_LENGTH"
                              }
                            }
                          }
                          child {
                            kind: else
                            text: ":"
                            child {
                              kind: expr
                              child {
                                kind: literal
                                text: "3"
                                literal {
                                  type: "number"
                                }
                              }
                            }
                          }
                        }
                        child {
                          kind: operator
                          text: ")"
                        }
                        child {
                          kind: operator
                          text: "=="
                        }
                        child {
                          kind: operator
                          text: "("
                        }
                        child {
                          kind: name
                          text: "unsigned"
                        }
                        child {
                          kind: name
                          text: "int"
                        }
                        child {
                          kind: operator
                          text: ")"
                        }
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "init_num"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
        child {
          kind: else
          text: "else"
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_assert"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "d1"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "w_msg_hdr"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "msg_len"
                          }
                        }
                        child {
                          kind: operator
                          text: "+"
                        }
                        child {
                          kind: name
                          text: "DTLS1_HM_HEADER_LENGTH"
                        }
                        child {
                          kind: operator
                          text: "=="
                        }
                        child {
                          kind: operator
                          text: "("
                        }
                        child {
                          kind: name
                          text: "unsigned"
                        }
                        child {
                          kind: name
                          text: "int"
                        }
                        child {
                          kind: operator
                          text: ")"
                        }
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "init_num"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "msg_len"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "w_msg_hdr"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "msg_len"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "seq"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "w_msg_hdr"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "seq"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "type"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "w_msg_hdr"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "type"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "frag_off"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "frag_len"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "w_msg_hdr"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "msg_len"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "is_ccs"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "is_ccs"
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* save current state*/"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "saved_retransmit_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "enc_write_ctx"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "enc_write_ctx"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "saved_retransmit_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "write_hash"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "write_hash"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "saved_retransmit_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "compress"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "compress"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "saved_retransmit_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "session"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "session"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "saved_retransmit_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "epoch"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "w_epoch"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "memset"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "seq64be"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: sizeof
                    text: "sizeof"
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "seq64be"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "6"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            text: "("
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
              }        
            text: ")"
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: call
                    child {
                      kind: name
                      text: "dtls1_get_queue_priority"
                    }
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "frag"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "msg_header"
                            }
                            child {
                              kind: operator
                              text: "."
                            }
                            child {
                              kind: name
                              text: "seq"
                            }
                          }
                        }
                        }        
                      text: ","
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "frag"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "msg_header"
                            }
                            child {
                              kind: operator
                              text: "."
                            }
                            child {
                              kind: name
                              text: "is_ccs"
                            }
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                  child {
                    kind: operator
                    text: "&gt;&gt;"
                  }
                  child {
                    kind: literal
                    text: "8"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "7"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            text: "("
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
              }        
            text: ")"
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: call
                    child {
                      kind: name
                      text: "dtls1_get_queue_priority"
                    }
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "frag"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "msg_header"
                            }
                            child {
                              kind: operator
                              text: "."
                            }
                            child {
                              kind: name
                              text: "seq"
                            }
                          }
                        }
                        }        
                      text: ","
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "frag"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "msg_header"
                            }
                            child {
                              kind: operator
                              text: "."
                            }
                            child {
                              kind: name
                              text: "is_ccs"
                            }
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "item"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "pitem_new"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "seq64be"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "frag"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "item"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_hm_fragment_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "frag"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: if
        text: "#"
        child {
          kind: directive
          text: "if"
        }
        child {
          kind: expr
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
        }
        }                                                                                                                                                                                                                                                     
      text: "fprintf( stderr, \"buffered messge: \\ttype = %xx\\n\", msg_buf-&gt;type);
        fprintf( stderr, \"\\t\\t\\t\\t\\tlen = %d\\n\", msg_buf-&gt;len);
        fprintf( stderr, \"\\t\\t\\t\\t\\tseq_num = %d\\n\", msg_buf-&gt;seq_num);"
      child {
        kind: endif
        text: "#"
        child {
          kind: directive
          text: "endif"
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "pqueue_insert"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "d1"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "sent_messages"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "item"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: literal
            text: "1"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_retransmit_message"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "short"
            }
          }
          child {
            kind: name
            text: "seq"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_off"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "found"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "ret"
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* XDTLS: for now assuming that read/writes are blocking */"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "pitem"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "item"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "hm_fragment"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "frag"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "header_length"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
          }
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "8"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              child {
                kind: name
                text: "struct"
              }
              child {
                kind: name
                text: "dtls1_retransmit_state"
              }
            }
          }
          child {
            kind: name
            text: "saved_state"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
          }
          child {
            kind: name
            child {
              kind: name
              text: "save_write_sequence"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "8"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/*
          OPENSSL_assert(s-&gt;init_num == 0);
          OPENSSL_assert(s-&gt;init_off == 0);
         */"
      }
      child {
        kind: comment
        text: "/* XDTLS:  the requested message ought to be found, otherwise error */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "memset"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "seq64be"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: sizeof
                    text: "sizeof"
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "seq64be"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "6"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            text: "("
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
              }        
            text: ")"
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "seq"
                  }
                  child {
                    kind: operator
                    text: "&gt;&gt;"
                  }
                  child {
                    kind: literal
                    text: "8"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "seq64be"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: literal
                  text: "7"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "unsigned"
          }
          child {
            kind: name
            text: "char"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: name
            text: "seq"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "item"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "pqueue_find"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "d1"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "sent_messages"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "seq64be"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "item"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "NULL"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "fprintf"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "stderr"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "\"retransmit:  message %d non-existant\n\""
                          literal {
                            type: "string"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "seq"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: name
                  text: "found"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: name
            text: "found"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "1"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "frag"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "hm_fragment"
          }
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: name
            child {
              kind: name
              text: "item"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "data"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "frag"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "msg_header"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "is_ccs"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "header_length"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "DTLS1_CCS_HEADER_LENGTH"
                }
                }        
              text: ";"
            }
          }
        }
        child {
          kind: else
          text: "else"
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "header_length"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "DTLS1_HM_HEADER_LENGTH"
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "memcpy"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "init_buf"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "data"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "frag"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "fragment"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "frag"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_header"
                    }
                    child {
                      kind: operator
                      text: "."
                    }
                    child {
                      kind: name
                      text: "msg_len"
                    }
                  }
                  child {
                    kind: operator
                    text: "+"
                  }
                  child {
                    kind: name
                    text: "header_length"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "init_num"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "msg_len"
            }
          }
          child {
            kind: operator
            text: "+"
          }
          child {
            kind: name
            text: "header_length"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "dtls1_set_message_header_int"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "frag"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_header"
                    }
                    child {
                      kind: operator
                      text: "."
                    }
                    child {
                      kind: name
                      text: "type"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "frag"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_header"
                    }
                    child {
                      kind: operator
                      text: "."
                    }
                    child {
                      kind: name
                      text: "msg_len"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "frag"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_header"
                    }
                    child {
                      kind: operator
                      text: "."
                    }
                    child {
                      kind: name
                      text: "seq"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "frag"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_header"
                    }
                    child {
                      kind: operator
                      text: "."
                    }
                    child {
                      kind: name
                      text: "frag_len"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* save current state */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "saved_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "enc_write_ctx"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "enc_write_ctx"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "saved_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "write_hash"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "write_hash"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "saved_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "compress"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "compress"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "saved_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "session"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "session"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "saved_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "epoch"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "w_epoch"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "saved_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "epoch"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "w_epoch"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "retransmitting"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "1"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* restore state in which the message was originally sent */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "enc_write_ctx"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "saved_retransmit_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "enc_write_ctx"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "write_hash"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "saved_retransmit_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "write_hash"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "compress"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "saved_retransmit_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "compress"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "session"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "saved_retransmit_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "session"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "w_epoch"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "frag"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_header"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "saved_retransmit_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "epoch"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "frag"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "msg_header"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "saved_retransmit_state"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "epoch"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              child {
                kind: name
                text: "saved_state"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "epoch"
              }
            }
            child {
              kind: operator
              text: "-"
            }
            child {
              kind: literal
              text: "1"
              literal {
                type: "number"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "memcpy"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "save_write_sequence"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "s3"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "write_sequence"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: sizeof
                          text: "sizeof"
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  child {
                                    kind: name
                                    text: "s"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "s3"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "write_sequence"
                                  }
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "memcpy"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "s3"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "write_sequence"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "d1"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "last_write_sequence"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: sizeof
                          text: "sizeof"
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  child {
                                    kind: name
                                    text: "s"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "s3"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "write_sequence"
                                  }
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "ret"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "dtls1_do_write"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: ternary
                    child {
                      kind: condition
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "frag"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_header"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "is_ccs"
                          }
                        }
                        }        
                      text: "?"
                    }
                    child {
                      kind: then
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL3_RT_CHANGE_CIPHER_SPEC"
                        }
                      }
                    }
                    child {
                      kind: else
                      text: ":"
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL3_RT_HANDSHAKE"
                        }
                      }
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* restore current state */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "enc_write_ctx"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "saved_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "enc_write_ctx"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "write_hash"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "saved_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "write_hash"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "compress"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "saved_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "compress"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "session"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "saved_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "session"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "w_epoch"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "saved_state"
            }
            child {
              kind: operator
              text: "."
            }
            child {
              kind: name
              text: "epoch"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "frag"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "msg_header"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "saved_retransmit_state"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "epoch"
              }
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              child {
                kind: name
                text: "saved_state"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "epoch"
              }
            }
            child {
              kind: operator
              text: "-"
            }
            child {
              kind: literal
              text: "1"
              literal {
                type: "number"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "memcpy"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "d1"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "last_write_sequence"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "s3"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "write_sequence"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: sizeof
                          text: "sizeof"
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  child {
                                    kind: name
                                    text: "s"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "s3"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "write_sequence"
                                  }
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "memcpy"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "s3"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "write_sequence"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "save_write_sequence"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: sizeof
                          text: "sizeof"
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  child {
                                    kind: name
                                    text: "s"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "s3"
                                  }
                                  child {
                                    kind: operator
                                    text: "-&gt;"
                                  }
                                  child {
                                    kind: name
                                    text: "write_sequence"
                                  }
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "s"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "d1"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "retransmitting"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "void"
          }
          child {
            kind: operator
            text: ")"
          }
          child {
            kind: call
            child {
              kind: name
              text: "BIO_flush"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: call
                    child {
                      kind: name
                      text: "SSL_get_wbio"
                    }
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "s"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "ret"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: comment
    text: "/* call this function when the buffered messages are no longer needed */"
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "void"
      }
    }
    child {
      kind: name
      text: "dtls1_clear_record_buffer"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "pitem"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "item"
          }
          }        
        text: ";"
      }
      child {
        kind: for
        text: "for"
        child {
          kind: control
          text: "("
          child {
            kind: init
            child {
              kind: expr
              child {
                kind: name
                text: "item"
              }
              child {
                kind: operator
                text: "="
              }
              child {
                kind: call
                child {
                  kind: name
                  text: "pqueue_pop"
                }
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "d1"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "sent_messages"
                        }
                      }
                    }
                    }        
                  text: ")"
                }
              }
              }        
            text: ";"
          }
          child {
            kind: condition
            child {
              kind: expr
              child {
                kind: name
                text: "item"
              }
              child {
                kind: operator
                text: "!="
              }
              child {
                kind: name
                text: "NULL"
              }
              }        
            text: ";"
          }
          child {
            kind: incr
            child {
              kind: expr
              child {
                kind: name
                text: "item"
              }
              child {
                kind: operator
                text: "="
              }
              child {
                kind: call
                child {
                  kind: name
                  text: "pqueue_pop"
                }
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "d1"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "sent_messages"
                        }
                      }
                    }
                    }        
                  text: ")"
                }
              }
            }
            }        
          text: ")"
        }
        child {
          kind: block
          text: "{"
          child {
            kind: expr_stmt
            child {
              kind: expr
              child {
                kind: call
                child {
                  kind: name
                  text: "dtls1_hm_fragment_free"
                }
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: operator
                        text: "("
                      }
                      child {
                        kind: name
                        text: "hm_fragment"
                      }
                      child {
                        kind: operator
                        text: "*"
                      }
                      child {
                        kind: operator
                        text: ")"
                      }
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "item"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "data"
                        }
                      }
                    }
                    }        
                  text: ")"
                }
              }
              }        
            text: ";"
          }
          child {
            kind: expr_stmt
            child {
              kind: expr
              child {
                kind: call
                child {
                  kind: name
                  text: "pitem_free"
                }
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "item"
                      }
                    }
                    }        
                  text: ")"
                }
              }
              }        
            text: ";"
            }        
          text: "}"
        }
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "unsigned"
      }
      child {
        kind: name
        text: "char"
      }
      child {
        kind: modifier
        text: "*"
      }
    }
    child {
      kind: name
      text: "dtls1_set_message_header"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "p"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
          }
          child {
            kind: name
            text: "mt"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "len"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_off"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_len"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: comment
        text: "/* Don't change sequence numbers while listening */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "frag_off"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: literal
              text: "0"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "d1"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "listen"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "d1"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "handshake_write_seq"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "d1"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "next_handshake_write_seq"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "d1"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "next_handshake_write_seq"
                  }
                }
                child {
                  kind: operator
                  text: "++"
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "dtls1_set_message_header_int"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "mt"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "len"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "d1"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "handshake_write_seq"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "frag_off"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "frag_len"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "+="
          }
          child {
            kind: name
            text: "DTLS1_HM_HEADER_LENGTH"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: comment
    text: "/* don't actually do the writing, wait till the MTU has been retrieved */"
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "void"
      }
    }
    child {
      kind: name
      text: "dtls1_set_message_header_int"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
          }
          child {
            kind: name
            text: "mt"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "len"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "short"
            }
          }
          child {
            kind: name
            text: "seq_num"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_off"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_len"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              child {
                kind: name
                text: "struct"
              }
              child {
                kind: name
                text: "hm_header_st"
              }
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "msg_hdr"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: operator
                text: "&amp;"
              }
              child {
                kind: name
                child {
                  kind: name
                  text: "s"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "d1"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "w_msg_hdr"
                }
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "type"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "mt"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "msg_len"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "len"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "seq"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "seq_num"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "frag_off"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "frag_off"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "frag_len"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "frag_len"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "void"
      }
    }
    child {
      kind: name
      text: "dtls1_fix_message_header"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_off"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "long"
            }
          }
          child {
            kind: name
            text: "frag_len"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              child {
                kind: name
                text: "struct"
              }
              child {
                kind: name
                text: "hm_header_st"
              }
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "msg_hdr"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: operator
                text: "&amp;"
              }
              child {
                kind: name
                child {
                  kind: name
                  text: "s"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "d1"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "w_msg_hdr"
                }
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "frag_off"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "frag_off"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "frag_len"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "frag_len"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "unsigned"
      }
      child {
        kind: name
        text: "char"
      }
      child {
        kind: modifier
        text: "*"
      }
    }
    child {
      kind: name
      text: "dtls1_write_message_header"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "p"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              child {
                kind: name
                text: "struct"
              }
              child {
                kind: name
                text: "hm_header_st"
              }
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "msg_hdr"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: operator
                text: "&amp;"
              }
              child {
                kind: name
                child {
                  kind: name
                  text: "s"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "d1"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "w_msg_hdr"
                }
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "++"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "type"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "l2n3"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_len"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "s2n"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "seq"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "l2n3"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "frag_off"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "l2n3"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "frag_len"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "p"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "unsigned"
      }
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_min_mtu"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "void"
            }
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            child {
              kind: name
              text: "g_probable_mtu"
            }
            child {
              kind: index
              text: "["
              child {
                kind: expr
                child {
                  kind: operator
                  text: "("
                }
                child {
                  kind: sizeof
                  text: "sizeof"
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "g_probable_mtu"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                child {
                  kind: operator
                  text: "/"
                }
                child {
                  kind: sizeof
                  text: "sizeof"
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "g_probable_mtu"
                          }
                          child {
                            kind: index
                            text: "["
                            child {
                              kind: expr
                              child {
                                kind: literal
                                text: "0"
                                literal {
                                  type: "number"
                                }
                              }
                              }        
                            text: "]"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                child {
                  kind: operator
                  text: ")"
                }
                child {
                  kind: operator
                  text: "-"
                }
                child {
                  kind: literal
                  text: "1"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: "]"
            }
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: specifier
      text: "static"
    }
    child {
      kind: type
      child {
        kind: name
        text: "unsigned"
      }
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_guess_mtu"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "curr_mtu"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "i"
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "curr_mtu"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: literal
              text: "0"
              literal {
                type: "number"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "g_probable_mtu"
                  }
                  child {
                    kind: index
                    text: "["
                    child {
                      kind: expr
                      child {
                        kind: literal
                        text: "0"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: "]"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: for
        text: "for"
        child {
          kind: control
          text: "("
          child {
            kind: init
            child {
              kind: expr
              child {
                kind: name
                text: "i"
              }
              child {
                kind: operator
                text: "="
              }
              child {
                kind: literal
                text: "0"
                literal {
                  type: "number"
                }
              }
              }        
            text: ";"
          }
          child {
            kind: condition
            child {
              kind: expr
              child {
                kind: name
                text: "i"
              }
              child {
                kind: operator
                text: "&lt;"
              }
              child {
                kind: sizeof
                text: "sizeof"
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "g_probable_mtu"
                      }
                    }
                    }        
                  text: ")"
                }
              }
              child {
                kind: operator
                text: "/"
              }
              child {
                kind: sizeof
                text: "sizeof"
                child {
                  kind: argument_list
                  text: "("
                  child {
                    kind: argument
                    child {
                      kind: expr
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "g_probable_mtu"
                        }
                        child {
                          kind: index
                          text: "["
                          child {
                            kind: expr
                            child {
                              kind: literal
                              text: "0"
                              literal {
                                type: "number"
                              }
                            }
                            }        
                          text: "]"
                        }
                      }
                    }
                    }        
                  text: ")"
                }
              }
              }        
            text: ";"
          }
          child {
            kind: incr
            child {
              kind: expr
              child {
                kind: name
                text: "i"
              }
              child {
                kind: operator
                text: "++"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: block
          child {
            kind: if
            text: "if"
            child {
              kind: condition
              text: "("
              child {
                kind: expr
                child {
                  kind: name
                  text: "curr_mtu"
                }
                child {
                  kind: operator
                  text: "&gt;"
                }
                child {
                  kind: name
                  child {
                    kind: name
                    text: "g_probable_mtu"
                  }
                  child {
                    kind: index
                    text: "["
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "i"
                      }
                      }        
                    text: "]"
                  }
                }
                }        
              text: ")"
            }
            child {
              kind: then
              child {
                kind: block
                child {
                  kind: return
                  text: "return"
                  child {
                    kind: expr
                    child {
                      kind: name
                      child {
                        kind: name
                        text: "g_probable_mtu"
                      }
                      child {
                        kind: index
                        text: "["
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "i"
                          }
                          }        
                        text: "]"
                      }
                    }
                    }        
                  text: ";"
                }
              }
            }
          }
        }
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "curr_mtu"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "void"
      }
    }
    child {
      kind: name
      text: "dtls1_get_message_header"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "data"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              child {
                kind: name
                text: "struct"
              }
              child {
                kind: name
                text: "hm_header_st"
              }
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "msg_hdr"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "memset"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "msg_hdr"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0x00"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: sizeof
                    text: "sizeof"
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          text: "struct"
                          child {
                            kind: name
                            text: "hm_header_st"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "msg_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "type"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "data"
          }
          child {
            kind: operator
            text: "++"
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "n2l3"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "data"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_len"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "n2s"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "data"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "seq"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "n2l3"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "data"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "frag_off"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "n2l3"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "data"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "msg_hdr"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "frag_len"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "void"
      }
    }
    child {
      kind: name
      text: "dtls1_get_ccs_header"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "data"
          }
        }
        }        
      text: ","
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              child {
                kind: name
                text: "struct"
              }
              child {
                kind: name
                text: "ccs_header_st"
              }
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "ccs_hdr"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "memset"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "ccs_hdr"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0x00"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: sizeof
                    text: "sizeof"
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          text: "struct"
                          child {
                            kind: name
                            text: "ccs_header_st"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            child {
              kind: name
              text: "ccs_hdr"
            }
            child {
              kind: operator
              text: "-&gt;"
            }
            child {
              kind: name
              text: "type"
            }
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: operator
            text: "("
          }
          child {
            kind: name
            text: "data"
          }
          child {
            kind: operator
            text: "++"
          }
          child {
            kind: operator
            text: ")"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_shutdown"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "ret"
          }
          }        
        text: ";"
      }
      child {
        kind: ifndef
        text: "#"
        child {
          kind: directive
          text: "ifndef"
        }
        child {
          kind: name
          text: "OPENSSL_NO_SCTP"
        }
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: call
              child {
                kind: name
                text: "BIO_dgram_is_sctp"
              }
              child {
                kind: argument_list
                text: "("
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: call
                      child {
                        kind: name
                        text: "SSL_get_wbio"
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "s"
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                  }
                  }        
                text: ")"
              }
            }
            child {
              kind: operator
              text: "&amp;&amp;"
            }
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "shutdown"
              }
            }
            child {
              kind: operator
              text: "&amp;"
            }
            child {
              kind: name
              text: "SSL_SENT_SHUTDOWN"
            }
            child {
              kind: operator
              text: ")"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "ret"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "BIO_dgram_sctp_wait_for_dry"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: call
                          child {
                            kind: name
                            text: "SSL_get_wbio"
                          }
                          child {
                            kind: argument_list
                            text: "("
                            child {
                              kind: argument
                              child {
                                kind: expr
                                child {
                                  kind: name
                                  text: "s"
                                }
                              }
                              }        
                            text: ")"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "ret"
                  }
                  child {
                    kind: operator
                    text: "&lt;"
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: operator
                        text: "-"
                      }
                      child {
                        kind: literal
                        text: "1"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ";"
                  }
                }
              }
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "ret"
                  }
                  child {
                    kind: operator
                    text: "=="
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          text: "BIO_ctrl"
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: call
                                child {
                                  kind: name
                                  text: "SSL_get_wbio"
                                }
                                child {
                                  kind: argument_list
                                  text: "("
                                  child {
                                    kind: argument
                                    child {
                                      kind: expr
                                      child {
                                        kind: name
                                        text: "s"
                                      }
                                    }
                                    }        
                                  text: ")"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: literal
                                text: "1"
                                literal {
                                  type: "number"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "NULL"
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                }
              }
              }        
            text: "}"
          }
        }
      }
      child {
        kind: endif
        text: "#"
        child {
          kind: directive
          text: "endif"
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "ret"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "ssl3_shutdown"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: ifndef
        text: "#"
        child {
          kind: directive
          text: "ifndef"
        }
        child {
          kind: name
          text: "OPENSSL_NO_SCTP"
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "BIO_ctrl"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: call
                    child {
                      kind: name
                      text: "SSL_get_wbio"
                    }
                    child {
                      kind: argument_list
                      text: "("
                      child {
                        kind: argument
                        child {
                          kind: expr
                          child {
                            kind: name
                            text: "s"
                          }
                        }
                        }        
                      text: ")"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "NULL"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: endif
        text: "#"
        child {
          kind: directive
          text: "endif"
        }
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "ret"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: ifndef
    text: "#"
    child {
      kind: directive
      text: "ifndef"
    }
    child {
      kind: name
      text: "OPENSSL_NO_HEARTBEATS"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_process_heartbeat"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "p"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: operator
                text: "&amp;"
              }
              child {
                kind: name
                child {
                  kind: name
                  text: "s"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "s3"
                }
                child {
                  kind: operator
                  text: "-&gt;"
                }
                child {
                  kind: name
                  text: "rrec"
                }
                child {
                  kind: operator
                  text: "."
                }
                child {
                  kind: name
                  text: "data"
                }
                child {
                  kind: index
                  text: "["
                  child {
                    kind: expr
                    child {
                      kind: literal
                      text: "0"
                      literal {
                        type: "number"
                      }
                    }
                    }        
                  text: "]"
                }
              }
            }
          }
          }        
        text: ","
        child {
          kind: modifier
          text: "*"
        }
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "pl"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "short"
            }
          }
          child {
            kind: name
            text: "hbtype"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "payload"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "padding"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: literal
                text: "16"
                literal {
                  type: "number"
                }
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Use minimum padding */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "msg_callback"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_callback"
                    }
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: literal
                          text: "0"
                          literal {
                            type: "number"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "version"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "TLS1_RT_HEARTBEAT"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: operator
                          text: "&amp;"
                        }
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "s3"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "rrec"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "data"
                          }
                          child {
                            kind: index
                            text: "["
                            child {
                              kind: expr
                              child {
                                kind: literal
                                text: "0"
                                literal {
                                  type: "number"
                                }
                              }
                              }        
                            text: "]"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "s3"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "rrec"
                          }
                          child {
                            kind: operator
                            text: "."
                          }
                          child {
                            kind: name
                            text: "length"
                          }
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_callback_arg"
                          }
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* Read type and payload length first */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: literal
              text: "1"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: literal
              text: "2"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: literal
              text: "16"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "&gt;"
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "s3"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "rrec"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "length"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* silently discard */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "hbtype"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "++"
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "n2s"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "payload"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: literal
              text: "1"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: literal
              text: "2"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: name
              text: "payload"
            }
            child {
              kind: operator
              text: "+"
            }
            child {
              kind: literal
              text: "16"
              literal {
                type: "number"
              }
            }
            child {
              kind: operator
              text: "&gt;"
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "s3"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "rrec"
              }
              child {
                kind: operator
                text: "."
              }
              child {
                kind: name
                text: "length"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: literal
                  text: "0"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
            }
          }
        }
      }
      child {
        kind: comment
        text: "/* silently discard per RFC 6520 sec. 4 */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "pl"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "p"
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "hbtype"
            }
            child {
              kind: operator
              text: "=="
            }
            child {
              kind: name
              text: "TLS1_HB_REQUEST"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: decl_stmt
              child {
                kind: decl
                child {
                  kind: type
                  child {
                    kind: name
                    text: "unsigned"
                  }
                  child {
                    kind: name
                    text: "char"
                  }
                  child {
                    kind: modifier
                    text: "*"
                  }
                }
                child {
                  kind: name
                  text: "buffer"
                }
                }        
              text: ","
              child {
                kind: modifier
                text: "*"
              }
              child {
                kind: decl
                child {
                  kind: type
                  text: "This is just a placeholder. Please ignore this child."
                }
                child {
                  kind: name
                  text: "bp"
                }
                }        
              text: ";"
            }
            child {
              kind: decl_stmt
              child {
                kind: decl
                child {
                  kind: type
                  child {
                    kind: name
                    text: "unsigned"
                  }
                  child {
                    kind: name
                    text: "int"
                  }
                }
                child {
                  kind: name
                  text: "write_length"
                }
                child {
                  kind: init
                  text: "="
                  child {
                    kind: expr
                    child {
                      kind: literal
                      text: "1"
                      literal {
                        type: "number"
                      }
                    }
                    child {
                      kind: comment
                      text: "/* heartbeat type */"
                    }
                    child {
                      kind: operator
                      text: "+"
                    }
                    child {
                      kind: literal
                      text: "2"
                      literal {
                        type: "number"
                      }
                    }
                    child {
                      kind: comment
                      text: "/* heartbeat length */"
                    }
                    child {
                      kind: operator
                      text: "+"
                    }
                    child {
                      kind: name
                      text: "payload"
                    }
                    child {
                      kind: operator
                      text: "+"
                    }
                    child {
                      kind: name
                      text: "padding"
                    }
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: decl_stmt
              child {
                kind: decl
                child {
                  kind: type
                  child {
                    kind: name
                    text: "int"
                  }
                }
                child {
                  kind: name
                  text: "r"
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "write_length"
                  }
                  child {
                    kind: operator
                    text: "&gt;"
                  }
                  child {
                    kind: name
                    text: "SSL3_RT_MAX_PLAIN_LENGTH"
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: literal
                        text: "0"
                        literal {
                          type: "number"
                        }
                      }
                      }        
                    text: ";"
                  }
                }
              }
            }
            child {
              kind: comment
              text: "/* Allocate memory for the response, size is 1 byte
                 * message type, plus 2 bytes payload length, plus
                 * payload, plus padding
                 */"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "buffer"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_malloc"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "write_length"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "bp"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "buffer"
                }
                }        
              text: ";"
            }
            child {
              kind: comment
              text: "/* Enter response type, length and copy payload */"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: operator
                  text: "*"
                }
                child {
                  kind: name
                  text: "bp"
                }
                child {
                  kind: operator
                  text: "++"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: name
                  text: "TLS1_HB_RESPONSE"
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "s2n"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "payload"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "bp"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "memcpy"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "bp"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "pl"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "payload"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "bp"
                }
                child {
                  kind: operator
                  text: "+="
                }
                child {
                  kind: name
                  text: "payload"
                }
                }        
              text: ";"
            }
            child {
              kind: comment
              text: "/* Random padding */"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "RAND_pseudo_bytes"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "bp"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "padding"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  text: "r"
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_write_bytes"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "TLS1_RT_HEARTBEAT"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "buffer"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "write_length"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "r"
                  }
                  child {
                    kind: operator
                    text: "&gt;="
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  child {
                    kind: operator
                    text: "&amp;&amp;"
                  }
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_callback"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_callback"
                          }
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: literal
                                text: "1"
                                literal {
                                  type: "number"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "version"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "TLS1_RT_HEARTBEAT"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "buffer"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "write_length"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "s"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "msg_callback_arg"
                                }
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "OPENSSL_free"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "buffer"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "r"
                  }
                  child {
                    kind: operator
                    text: "&lt;"
                  }
                  child {
                    kind: literal
                    text: "0"
                    literal {
                      type: "number"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  child {
                    kind: return
                    text: "return"
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "r"
                      }
                      }        
                    text: ";"
                  }
                }
              }
              }        
            text: "}"
          }
        }
        child {
          kind: elseif
          text: "else"
          child {
            kind: if
            text: "if"
            child {
              kind: condition
              text: "("
              child {
                kind: expr
                child {
                  kind: name
                  text: "hbtype"
                }
                child {
                  kind: operator
                  text: "=="
                }
                child {
                  kind: name
                  text: "TLS1_HB_RESPONSE"
                }
                }        
              text: ")"
            }
            child {
              kind: then
              child {
                kind: block
                text: "{"
                child {
                  kind: decl_stmt
                  child {
                    kind: decl
                    child {
                      kind: type
                      child {
                        kind: name
                        text: "unsigned"
                      }
                      child {
                        kind: name
                        text: "int"
                      }
                    }
                    child {
                      kind: name
                      text: "seq"
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: comment
                  text: "/* We only send sequence numbers (2 bytes unsigned int),
                 * and 16 random bytes, so we just try to read the
                 * sequence number */"
                }
                child {
                  kind: expr_stmt
                  child {
                    kind: expr
                    child {
                      kind: call
                      child {
                        kind: name
                        text: "n2s"
                      }
                      child {
                        kind: argument_list
                        text: "("
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "pl"
                            }
                          }
                          }        
                        text: ","
                        child {
                          kind: argument
                          child {
                            kind: expr
                            child {
                              kind: name
                              text: "seq"
                            }
                          }
                          }        
                        text: ")"
                      }
                    }
                    }        
                  text: ";"
                }
                child {
                  kind: if
                  text: "if"
                  child {
                    kind: condition
                    text: "("
                    child {
                      kind: expr
                      child {
                        kind: name
                        text: "payload"
                      }
                      child {
                        kind: operator
                        text: "=="
                      }
                      child {
                        kind: literal
                        text: "18"
                        literal {
                          type: "number"
                        }
                      }
                      child {
                        kind: operator
                        text: "&amp;&amp;"
                      }
                      child {
                        kind: name
                        text: "seq"
                      }
                      child {
                        kind: operator
                        text: "=="
                      }
                      child {
                        kind: name
                        child {
                          kind: name
                          text: "s"
                        }
                        child {
                          kind: operator
                          text: "-&gt;"
                        }
                        child {
                          kind: name
                          text: "tlsext_hb_seq"
                        }
                      }
                      }        
                    text: ")"
                  }
                  child {
                    kind: then
                    child {
                      kind: block
                      text: "{"
                      child {
                        kind: expr_stmt
                        child {
                          kind: expr
                          child {
                            kind: call
                            child {
                              kind: name
                              text: "dtls1_stop_timer"
                            }
                            child {
                              kind: argument_list
                              text: "("
                              child {
                                kind: argument
                                child {
                                  kind: expr
                                  child {
                                    kind: name
                                    text: "s"
                                  }
                                }
                                }        
                              text: ")"
                            }
                          }
                          }        
                        text: ";"
                      }
                      child {
                        kind: expr_stmt
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "s"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "tlsext_hb_seq"
                            }
                          }
                          child {
                            kind: operator
                            text: "++"
                          }
                          }        
                        text: ";"
                      }
                      child {
                        kind: expr_stmt
                        child {
                          kind: expr
                          child {
                            kind: name
                            child {
                              kind: name
                              text: "s"
                            }
                            child {
                              kind: operator
                              text: "-&gt;"
                            }
                            child {
                              kind: name
                              text: "tlsext_hb_pending"
                            }
                          }
                          child {
                            kind: operator
                            text: "="
                          }
                          child {
                            kind: literal
                            text: "0"
                            literal {
                              type: "number"
                            }
                          }
                          }        
                        text: ";"
                        }        
                      text: "}"
                    }
                  }
                  }        
                text: "}"
              }
            }
          }
        }
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: literal
            text: "0"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: function
    child {
      kind: type
      child {
        kind: name
        text: "int"
      }
    }
    child {
      kind: name
      text: "dtls1_heartbeat"
    }
    child {
      kind: parameter_list
      text: "("
      child {
        kind: parameter
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "SSL"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "s"
          }
        }
        }        
      text: ")"
    }
    child {
      kind: block
      text: "{"
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "char"
            }
            child {
              kind: modifier
              text: "*"
            }
          }
          child {
            kind: name
            text: "buf"
          }
          }        
        text: ","
        child {
          kind: modifier
          text: "*"
        }
        child {
          kind: decl
          child {
            kind: type
            text: "This is just a placeholder. Please ignore this child."
          }
          child {
            kind: name
            text: "p"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "ret"
          }
          }        
        text: ";"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "payload"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: literal
                text: "18"
                literal {
                  type: "number"
                }
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Sequence number + random bytes */"
      }
      child {
        kind: decl_stmt
        child {
          kind: decl
          child {
            kind: type
            child {
              kind: name
              text: "unsigned"
            }
            child {
              kind: name
              text: "int"
            }
          }
          child {
            kind: name
            text: "padding"
          }
          child {
            kind: init
            text: "="
            child {
              kind: expr
              child {
                kind: literal
                text: "16"
                literal {
                  type: "number"
                }
              }
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Use minimum padding */"
      }
      child {
        kind: comment
        text: "/* Only send if peer supports and accepts HB requests... */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: operator
              text: "!"
            }
            child {
              kind: operator
              text: "("
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "tlsext_heartbeat"
              }
            }
            child {
              kind: operator
              text: "&amp;"
            }
            child {
              kind: name
              text: "SSL_TLSEXT_HB_ENABLED"
            }
            child {
              kind: operator
              text: ")"
            }
            child {
              kind: operator
              text: "||"
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "tlsext_heartbeat"
              }
            }
            child {
              kind: operator
              text: "&amp;"
            }
            child {
              kind: name
              text: "SSL_TLSEXT_HB_DONT_SEND_REQUESTS"
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "SSLerr"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_F_DTLS1_HEARTBEAT"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: operator
                  text: "-"
                }
                child {
                  kind: literal
                  text: "1"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: comment
        text: "/* ...and there is none in flight yet... */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "tlsext_hb_pending"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "SSLerr"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_F_DTLS1_HEARTBEAT"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_R_TLS_HEARTBEAT_PENDING"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: operator
                  text: "-"
                }
                child {
                  kind: literal
                  text: "1"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: comment
        text: "/* ...and no handshake in progress. */"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: call
              child {
                kind: name
                text: "SSL_in_init"
              }
              child {
                kind: argument_list
                text: "("
                child {
                  kind: argument
                  child {
                    kind: expr
                    child {
                      kind: name
                      text: "s"
                    }
                  }
                  }        
                text: ")"
              }
            }
            child {
              kind: operator
              text: "||"
            }
            child {
              kind: name
              child {
                kind: name
                text: "s"
              }
              child {
                kind: operator
                text: "-&gt;"
              }
              child {
                kind: name
                text: "in_handshake"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "SSLerr"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_F_DTLS1_HEARTBEAT"
                        }
                      }
                      }        
                    text: ","
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "SSL_R_UNEXPECTED_MESSAGE"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: return
              text: "return"
              child {
                kind: expr
                child {
                  kind: operator
                  text: "-"
                }
                child {
                  kind: literal
                  text: "1"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: comment
        text: "/* Check if padding is too long, payload and padding
         * must not exceed 2^14 - 3 = 16381 bytes in total.
         */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "OPENSSL_assert"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "payload"
                  }
                  child {
                    kind: operator
                    text: "+"
                  }
                  child {
                    kind: name
                    text: "padding"
                  }
                  child {
                    kind: operator
                    text: "&lt;="
                  }
                  child {
                    kind: literal
                    text: "16381"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Create HeartBeat message, we just use a sequence number
         * as payload to distuingish different messages and add
         * some random stuff.
         *  - Message Type, 1 byte
         *  - Payload Length, 2 bytes (unsigned int)
         *  - Payload, the sequence number (2 bytes uint)
         *  - Payload, random bytes (16 bytes uint)
         *  - Padding
         */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "buf"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "OPENSSL_malloc"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "1"
                    literal {
                      type: "number"
                    }
                  }
                  child {
                    kind: operator
                    text: "+"
                  }
                  child {
                    kind: literal
                    text: "2"
                    literal {
                      type: "number"
                    }
                  }
                  child {
                    kind: operator
                    text: "+"
                  }
                  child {
                    kind: name
                    text: "payload"
                  }
                  child {
                    kind: operator
                    text: "+"
                  }
                  child {
                    kind: name
                    text: "padding"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "buf"
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Message Type */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: operator
            text: "*"
          }
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "++"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: name
            text: "TLS1_HB_REQUEST"
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Payload length (18 bytes here) */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "s2n"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "payload"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Sequence number */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "s2n"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "tlsext_hb_seq"
                    }
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* 16 random bytes */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "RAND_pseudo_bytes"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "16"
                    literal {
                      type: "number"
                    }
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "p"
          }
          child {
            kind: operator
            text: "+="
          }
          child {
            kind: literal
            text: "16"
            literal {
              type: "number"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: comment
        text: "/* Random padding */"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "RAND_pseudo_bytes"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "p"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "padding"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: name
            text: "ret"
          }
          child {
            kind: operator
            text: "="
          }
          child {
            kind: call
            child {
              kind: name
              text: "dtls1_write_bytes"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "s"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "TLS1_RT_HEARTBEAT"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "buf"
                  }
                }
                }        
              text: ","
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: literal
                    text: "3"
                    literal {
                      type: "number"
                    }
                  }
                  child {
                    kind: operator
                    text: "+"
                  }
                  child {
                    kind: name
                    text: "payload"
                  }
                  child {
                    kind: operator
                    text: "+"
                  }
                  child {
                    kind: name
                    text: "padding"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: if
        text: "if"
        child {
          kind: condition
          text: "("
          child {
            kind: expr
            child {
              kind: name
              text: "ret"
            }
            child {
              kind: operator
              text: "&gt;="
            }
            child {
              kind: literal
              text: "0"
              literal {
                type: "number"
              }
            }
            }        
          text: ")"
        }
        child {
          kind: then
          child {
            kind: block
            text: "{"
            child {
              kind: if
              text: "if"
              child {
                kind: condition
                text: "("
                child {
                  kind: expr
                  child {
                    kind: name
                    child {
                      kind: name
                      text: "s"
                    }
                    child {
                      kind: operator
                      text: "-&gt;"
                    }
                    child {
                      kind: name
                      text: "msg_callback"
                    }
                  }
                  }        
                text: ")"
              }
              child {
                kind: then
                child {
                  kind: block
                  child {
                    kind: expr_stmt
                    child {
                      kind: expr
                      child {
                        kind: call
                        child {
                          kind: name
                          child {
                            kind: name
                            text: "s"
                          }
                          child {
                            kind: operator
                            text: "-&gt;"
                          }
                          child {
                            kind: name
                            text: "msg_callback"
                          }
                        }
                        child {
                          kind: argument_list
                          text: "("
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: literal
                                text: "1"
                                literal {
                                  type: "number"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "version"
                                }
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "TLS1_RT_HEARTBEAT"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "buf"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: literal
                                text: "3"
                                literal {
                                  type: "number"
                                }
                              }
                              child {
                                kind: operator
                                text: "+"
                              }
                              child {
                                kind: name
                                text: "payload"
                              }
                              child {
                                kind: operator
                                text: "+"
                              }
                              child {
                                kind: name
                                text: "padding"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                text: "s"
                              }
                            }
                            }        
                          text: ","
                          child {
                            kind: argument
                            child {
                              kind: expr
                              child {
                                kind: name
                                child {
                                  kind: name
                                  text: "s"
                                }
                                child {
                                  kind: operator
                                  text: "-&gt;"
                                }
                                child {
                                  kind: name
                                  text: "msg_callback_arg"
                                }
                              }
                            }
                            }        
                          text: ")"
                        }
                      }
                      }        
                    text: ";"
                  }
                }
              }
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: call
                  child {
                    kind: name
                    text: "dtls1_start_timer"
                  }
                  child {
                    kind: argument_list
                    text: "("
                    child {
                      kind: argument
                      child {
                        kind: expr
                        child {
                          kind: name
                          text: "s"
                        }
                      }
                      }        
                    text: ")"
                  }
                }
                }        
              text: ";"
            }
            child {
              kind: expr_stmt
              child {
                kind: expr
                child {
                  kind: name
                  child {
                    kind: name
                    text: "s"
                  }
                  child {
                    kind: operator
                    text: "-&gt;"
                  }
                  child {
                    kind: name
                    text: "tlsext_hb_pending"
                  }
                }
                child {
                  kind: operator
                  text: "="
                }
                child {
                  kind: literal
                  text: "1"
                  literal {
                    type: "number"
                  }
                }
                }        
              text: ";"
              }        
            text: "}"
          }
        }
      }
      child {
        kind: expr_stmt
        child {
          kind: expr
          child {
            kind: call
            child {
              kind: name
              text: "OPENSSL_free"
            }
            child {
              kind: argument_list
              text: "("
              child {
                kind: argument
                child {
                  kind: expr
                  child {
                    kind: name
                    text: "buf"
                  }
                }
                }        
              text: ")"
            }
          }
          }        
        text: ";"
      }
      child {
        kind: return
        text: "return"
        child {
          kind: expr
          child {
            kind: name
            text: "ret"
          }
          }        
        text: ";"
        }        
      text: "}"
    }
  }
  child {
    kind: endif
    text: "#"
    child {
      kind: directive
      text: "endif"
    }
  }
  unit {
    filename: "src.c"
    revision: "0.9.5"
    language: "C"
  }
